import { Component, Input } from '@angular/core';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { NgIf } from '@angular/common';
import * as i0 from "@angular/core";
export class IgxQueryBuilderHeaderComponent {
    constructor() {
        this._resourceStrings = CurrentResourceStrings.QueryBuilderResStrings;
        /**
         * An @Input property to show/hide the legend.
         *
         * @example
         * ```html
         * <igx-query-builder-header [showLegend]="false"></igx-query-builder-header>
         * ```
         */
        this.showLegend = true;
    }
    /**
     * Sets the resource strings.
     * By default it uses EN resources.
     */
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    /**
     * Returns the resource strings.
     */
    get resourceStrings() {
        return this._resourceStrings;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxQueryBuilderHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxQueryBuilderHeaderComponent, isStandalone: true, selector: "igx-query-builder-header", inputs: { title: "title", showLegend: "showLegend", resourceStrings: "resourceStrings" }, ngImport: i0, template: "<div class=\"igx-query-builder__header\">\n    <div class=\"ig-typography__h6\" style=\"pointer-events: none;\">\n        {{ title }}\n        <ng-content></ng-content>\n    </div>\n    <div *ngIf=\"showLegend\" class=\"igx-builder-legend\" >\n        <div class=\"igx-builder-legend__item--and\">\n            <span>{{this.resourceStrings.igx_query_builder_and_label}}</span>\n        </div>\n        <div class=\"igx-builder-legend__item--or\">\n            <span>{{this.resourceStrings.igx_query_builder_or_label}}</span>\n        </div>\n    </div>\n</div>\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxQueryBuilderHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-query-builder-header', standalone: true, imports: [NgIf], template: "<div class=\"igx-query-builder__header\">\n    <div class=\"ig-typography__h6\" style=\"pointer-events: none;\">\n        {{ title }}\n        <ng-content></ng-content>\n    </div>\n    <div *ngIf=\"showLegend\" class=\"igx-builder-legend\" >\n        <div class=\"igx-builder-legend__item--and\">\n            <span>{{this.resourceStrings.igx_query_builder_and_label}}</span>\n        </div>\n        <div class=\"igx-builder-legend__item--or\">\n            <span>{{this.resourceStrings.igx_query_builder_or_label}}</span>\n        </div>\n    </div>\n</div>\n" }]
        }], propDecorators: { title: [{
                type: Input
            }], showLegend: [{
                type: Input
            }], resourceStrings: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnktYnVpbGRlci1oZWFkZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL3F1ZXJ5LWJ1aWxkZXIvcXVlcnktYnVpbGRlci1oZWFkZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL3F1ZXJ5LWJ1aWxkZXIvcXVlcnktYnVpbGRlci1oZWFkZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDaEUsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQVF2QyxNQUFNLE9BQU8sOEJBQThCO0lBTjNDO1FBUVkscUJBQWdCLEdBQUcsc0JBQXNCLENBQUMsc0JBQXNCLENBQUM7UUFhekU7Ozs7Ozs7V0FPRztRQUVJLGVBQVUsR0FBRyxJQUFJLENBQUM7S0FpQjVCO0lBZkc7OztPQUdHO0lBQ0YsSUFDVyxlQUFlLENBQUMsS0FBbUM7UUFDM0QsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLGVBQWU7UUFDdkIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7SUFDaEMsQ0FBQzs4R0F4Q08sOEJBQThCO2tHQUE5Qiw4QkFBOEIsOEtDWDNDLG9qQkFjQSw0Q0RMYyxJQUFJOzsyRkFFTCw4QkFBOEI7a0JBTjFDLFNBQVM7K0JBQ0ksMEJBQTBCLGNBRXhCLElBQUksV0FDUCxDQUFDLElBQUksQ0FBQzs4QkFlUixLQUFLO3NCQURYLEtBQUs7Z0JBWUMsVUFBVTtzQkFEaEIsS0FBSztnQkFRTSxlQUFlO3NCQUR6QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSVF1ZXJ5QnVpbGRlclJlc291cmNlU3RyaW5ncyB9IGZyb20gJy4uL2NvcmUvaTE4bi9xdWVyeS1idWlsZGVyLXJlc291cmNlcyc7XG5pbXBvcnQgeyBDdXJyZW50UmVzb3VyY2VTdHJpbmdzIH0gZnJvbSAnLi4vY29yZS9pMThuL3Jlc291cmNlcyc7XG5pbXBvcnQgeyBOZ0lmIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtcXVlcnktYnVpbGRlci1oZWFkZXInLFxuICAgIHRlbXBsYXRlVXJsOiAncXVlcnktYnVpbGRlci1oZWFkZXIuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0YW5kYWxvbmU6IHRydWUsXG4gICAgaW1wb3J0czogW05nSWZdXG59KVxuZXhwb3J0IGNsYXNzIElneFF1ZXJ5QnVpbGRlckhlYWRlckNvbXBvbmVudCB7XG5cbiAgICBwcml2YXRlIF9yZXNvdXJjZVN0cmluZ3MgPSBDdXJyZW50UmVzb3VyY2VTdHJpbmdzLlF1ZXJ5QnVpbGRlclJlc1N0cmluZ3M7XG5cbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBzZXRzIHRoZSB0aXRsZSBvZiB0aGUgYElneFF1ZXJ5QnVpbGRlckhlYWRlckNvbXBvbmVudGAuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LXF1ZXJ5LWJ1aWxkZXItaGVhZGVyIHRpdGxlPVwiU2FtcGxlIFF1ZXJ5IEJ1aWxkZXJcIj48L2lneC1xdWVyeS1idWlsZGVyLWhlYWRlcj5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBASW5wdXQoKVxuICAgIHB1YmxpYyB0aXRsZTogc3RyaW5nO1xuXG4gICAgLyoqXG4gICAgICogQW4gQElucHV0IHByb3BlcnR5IHRvIHNob3cvaGlkZSB0aGUgbGVnZW5kLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBodG1sXG4gICAgICogPGlneC1xdWVyeS1idWlsZGVyLWhlYWRlciBbc2hvd0xlZ2VuZF09XCJmYWxzZVwiPjwvaWd4LXF1ZXJ5LWJ1aWxkZXItaGVhZGVyPlxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIHNob3dMZWdlbmQgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcmVzb3VyY2Ugc3RyaW5ncy5cbiAgICAgKiBCeSBkZWZhdWx0IGl0IHVzZXMgRU4gcmVzb3VyY2VzLlxuICAgICAqL1xuICAgICBASW5wdXQoKVxuICAgICBwdWJsaWMgc2V0IHJlc291cmNlU3RyaW5ncyh2YWx1ZTogSVF1ZXJ5QnVpbGRlclJlc291cmNlU3RyaW5ncykge1xuICAgICAgICB0aGlzLl9yZXNvdXJjZVN0cmluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9yZXNvdXJjZVN0cmluZ3MsIHZhbHVlKTtcbiAgICAgfVxuXG4gICAgIC8qKlxuICAgICAgKiBSZXR1cm5zIHRoZSByZXNvdXJjZSBzdHJpbmdzLlxuICAgICAgKi9cbiAgICAgcHVibGljIGdldCByZXNvdXJjZVN0cmluZ3MoKTogSVF1ZXJ5QnVpbGRlclJlc291cmNlU3RyaW5ncyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvdXJjZVN0cmluZ3M7XG4gICAgIH1cbn1cbiIsIjxkaXYgY2xhc3M9XCJpZ3gtcXVlcnktYnVpbGRlcl9faGVhZGVyXCI+XG4gICAgPGRpdiBjbGFzcz1cImlnLXR5cG9ncmFwaHlfX2g2XCIgc3R5bGU9XCJwb2ludGVyLWV2ZW50czogbm9uZTtcIj5cbiAgICAgICAge3sgdGl0bGUgfX1cbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIDwvZGl2PlxuICAgIDxkaXYgKm5nSWY9XCJzaG93TGVnZW5kXCIgY2xhc3M9XCJpZ3gtYnVpbGRlci1sZWdlbmRcIiA+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpZ3gtYnVpbGRlci1sZWdlbmRfX2l0ZW0tLWFuZFwiPlxuICAgICAgICAgICAgPHNwYW4+e3t0aGlzLnJlc291cmNlU3RyaW5ncy5pZ3hfcXVlcnlfYnVpbGRlcl9hbmRfbGFiZWx9fTwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJpZ3gtYnVpbGRlci1sZWdlbmRfX2l0ZW0tLW9yXCI+XG4gICAgICAgICAgICA8c3Bhbj57e3RoaXMucmVzb3VyY2VTdHJpbmdzLmlneF9xdWVyeV9idWlsZGVyX29yX2xhYmVsfX08L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuPC9kaXY+XG4iXX0=