import { __decorate, __param } from "tslib";
import { useAnimation } from '@angular/animations';
import { EventEmitter, Inject } from '@angular/core';
import { fadeIn } from '../animations/fade';
import { slideInLeft } from '../animations/slide';
import { mkenum } from '../core/utils';
import { IgxAngularAnimationService } from '../services/animation/angular-animation-service';
export var Direction;
(function (Direction) {
    Direction[Direction["NONE"] = 0] = "NONE";
    Direction[Direction["NEXT"] = 1] = "NEXT";
    Direction[Direction["PREV"] = 2] = "PREV";
})(Direction || (Direction = {}));
export const HorizontalAnimationType = mkenum({
    none: 'none',
    slide: 'slide',
    fade: 'fade'
});
/** @hidden */
let IgxCarouselComponentBase = class IgxCarouselComponentBase {
    constructor(animationService, cdr) {
        this.animationService = animationService;
        this.cdr = cdr;
        /** @hidden */
        this.animationType = HorizontalAnimationType.slide;
        /** @hidden @internal */
        this.enterAnimationDone = new EventEmitter();
        /** @hidden @internal */
        this.leaveAnimationDone = new EventEmitter();
        /** @hidden */
        this.defaultAnimationDuration = 320;
        /** @hidden */
        this.animationPosition = 0;
        /** @hidden */
        this.newDuration = 0;
    }
    /** @hidden */
    triggerAnimations() {
        if (this.animationType !== HorizontalAnimationType.none) {
            if (this.animationStarted(this.leaveAnimationPlayer) || this.animationStarted(this.enterAnimationPlayer)) {
                requestAnimationFrame(() => {
                    this.resetAnimations();
                    this.playAnimations();
                });
            }
            else {
                this.playAnimations();
            }
        }
    }
    /** @hidden */
    animationStarted(animation) {
        return animation && animation.hasStarted();
    }
    /** @hidden */
    playAnimations() {
        this.playLeaveAnimation();
        this.playEnterAnimation();
    }
    resetAnimations() {
        if (this.animationStarted(this.leaveAnimationPlayer)) {
            this.leaveAnimationPlayer.reset();
            this.leaveAnimationDone.emit();
        }
        if (this.animationStarted(this.enterAnimationPlayer)) {
            this.enterAnimationPlayer.reset();
            this.enterAnimationDone.emit();
            this.cdr.markForCheck();
        }
    }
    getAnimation() {
        let duration;
        if (this.newDuration) {
            duration = this.animationPosition ? this.animationPosition * this.newDuration : this.newDuration;
        }
        else {
            duration = this.animationPosition ? this.animationPosition * this.defaultAnimationDuration : this.defaultAnimationDuration;
        }
        switch (this.animationType) {
            case HorizontalAnimationType.slide:
                const trans = this.animationPosition ? this.animationPosition * 100 : 100;
                return {
                    enterAnimation: useAnimation(slideInLeft, {
                        params: {
                            delay: '0s',
                            duration: `${duration}ms`,
                            endOpacity: 1,
                            startOpacity: 1,
                            fromPosition: `translateX(${this.currentItem.direction === 1 ? trans : -trans}%)`,
                            toPosition: 'translateX(0%)'
                        }
                    }),
                    leaveAnimation: useAnimation(slideInLeft, {
                        params: {
                            delay: '0s',
                            duration: `${duration}ms`,
                            endOpacity: 1,
                            startOpacity: 1,
                            fromPosition: `translateX(0%)`,
                            toPosition: `translateX(${this.currentItem.direction === 1 ? -trans : trans}%)`,
                        }
                    })
                };
            case HorizontalAnimationType.fade:
                return {
                    enterAnimation: useAnimation(fadeIn, { params: { duration: `${duration}ms`, startOpacity: `${this.animationPosition}` } }),
                    leaveAnimation: null
                };
        }
        return {
            enterAnimation: null,
            leaveAnimation: null
        };
    }
    playEnterAnimation() {
        const animation = this.getAnimation().enterAnimation;
        if (!animation) {
            return;
        }
        this.enterAnimationPlayer = this.animationService.buildAnimation(animation, this.getCurrentElement());
        this.enterAnimationPlayer.animationEnd.subscribe(() => {
            // TODO: animation may never end. Find better way to clean up the player
            if (this.enterAnimationPlayer) {
                this.enterAnimationPlayer.reset();
                this.enterAnimationPlayer = null;
            }
            this.animationPosition = 0;
            this.newDuration = 0;
            this.previousItem.previous = false;
            this.enterAnimationDone.emit();
            this.cdr.markForCheck();
        });
        this.previousItem.previous = true;
        this.enterAnimationPlayer.play();
    }
    playLeaveAnimation() {
        const animation = this.getAnimation().leaveAnimation;
        if (!animation) {
            return;
        }
        this.leaveAnimationPlayer = this.animationService.buildAnimation(animation, this.getPreviousElement());
        this.leaveAnimationPlayer.animationEnd.subscribe(() => {
            // TODO: animation may never end. Find better way to clean up the player
            if (this.leaveAnimationPlayer) {
                this.leaveAnimationPlayer.reset();
                this.leaveAnimationPlayer = null;
            }
            this.animationPosition = 0;
            this.newDuration = 0;
            this.leaveAnimationDone.emit();
        });
        this.leaveAnimationPlayer.play();
    }
};
IgxCarouselComponentBase = __decorate([
    __param(0, Inject(IgxAngularAnimationService))
], IgxCarouselComponentBase);
export { IgxCarouselComponentBase };
//# sourceMappingURL=data:application/json;base64,