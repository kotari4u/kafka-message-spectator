import { Directive, InjectionToken } from '@angular/core';
import * as i0 from "@angular/core";
/** @hidden */
export const IGX_EXPANSION_PANEL_COMPONENT = new InjectionToken('IgxExpansionPanelToken');
export class HeaderContentBaseDirective {
    constructor(element) {
        this.element = element;
        /**
         * Returns the `textContent` of an element
         *
         * ```html
         * <igx-expansion-panel-title>
         *  Tooltip content
         * </igx-expansion-panel-title>
         * ```
         *
         *  or the `title` content
         *
         * ```html
         * <igx-expansion-panel-title [title]="'Tooltip content'">
         * </igx-expansion-panel-title>
         * ```
         *
         * If both are provided, returns the `title` content.
         *
         * @param element
         * @returns tooltip content for an element
         */
        this.getTooltipContent = (element) => {
            if (element.nativeElement.title) {
                return element.nativeElement.title;
            }
            if (element.nativeElement.textContent) {
                return element.nativeElement.textContent.trim();
            }
            return null;
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: HeaderContentBaseDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.2", type: HeaderContentBaseDirective, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: HeaderContentBaseDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLmNvbW1vbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9leHBhbnNpb24tcGFuZWwvZXhwYW5zaW9uLXBhbmVsLmNvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUE0QixjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBb0JwRixjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQUcsSUFBSSxjQUFjLENBQXdCLHdCQUF3QixDQUFDLENBQUM7QUFTakgsTUFBTSxPQUFnQiwwQkFBMEI7SUFFNUMsWUFBc0IsT0FBbUI7UUFBbkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUV6Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7V0FvQkc7UUFDSSxzQkFBaUIsR0FBRyxDQUFDLE9BQW1CLEVBQVUsRUFBRTtZQUN2RCxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFO2dCQUM3QixPQUFPLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO2FBQ3RDO1lBQ0QsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRTtnQkFDbkMsT0FBTyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQzthQUNuRDtZQUVELE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUMsQ0FBQztJQWhDMkMsQ0FBQzs4R0FGNUIsMEJBQTBCO2tHQUExQiwwQkFBMEI7OzJGQUExQiwwQkFBMEI7a0JBRC9DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBDYW5jZWxhYmxlRXZlbnRBcmdzLCBJQmFzZUV2ZW50QXJncyB9IGZyb20gJy4uL2NvcmUvdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElneEV4cGFuc2lvblBhbmVsQmFzZSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBjc3NDbGFzczogc3RyaW5nO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIGhlYWRlcklkOiBzdHJpbmc7XG4gICAgY29sbGFwc2VkOiBib29sZWFuO1xuICAgIGFuaW1hdGlvblNldHRpbmdzOiB7IG9wZW5BbmltYXRpb246IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhOyBjbG9zZUFuaW1hdGlvbjogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgfTtcbiAgICBjb250ZW50Q29sbGFwc2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb250ZW50Q29sbGFwc2luZzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29udGVudEV4cGFuZGVkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb250ZW50RXhwYW5kaW5nOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb2xsYXBzZShldnQ/OiBFdmVudCk7XG4gICAgZXhwYW5kKGV2dD86IEV2ZW50KTtcbiAgICB0b2dnbGUoZXZ0PzogRXZlbnQpO1xufVxuXG4vKiogQGhpZGRlbiAqL1xuZXhwb3J0IGNvbnN0IElHWF9FWFBBTlNJT05fUEFORUxfQ09NUE9ORU5UID0gbmV3IEluamVjdGlvblRva2VuPElneEV4cGFuc2lvblBhbmVsQmFzZT4oJ0lneEV4cGFuc2lvblBhbmVsVG9rZW4nKTtcblxuZXhwb3J0IGludGVyZmFjZSBJRXhwYW5zaW9uUGFuZWxFdmVudEFyZ3MgZXh0ZW5kcyBJQmFzZUV2ZW50QXJncyB7XG4gICAgZXZlbnQ6IEV2ZW50O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFeHBhbnNpb25QYW5lbENhbmNlbGFibGVFdmVudEFyZ3MgIGV4dGVuZHMgSUV4cGFuc2lvblBhbmVsRXZlbnRBcmdzLCBDYW5jZWxhYmxlRXZlbnRBcmdzIHt9XG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEhlYWRlckNvbnRlbnRCYXNlRGlyZWN0aXZlIHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBlbGVtZW50OiBFbGVtZW50UmVmKSB7IH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGB0ZXh0Q29udGVudGAgb2YgYW4gZWxlbWVudFxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZXhwYW5zaW9uLXBhbmVsLXRpdGxlPlxuICAgICAqICBUb29sdGlwIGNvbnRlbnRcbiAgICAgKiA8L2lneC1leHBhbnNpb24tcGFuZWwtdGl0bGU+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAgb3IgdGhlIGB0aXRsZWAgY29udGVudFxuICAgICAqXG4gICAgICogYGBgaHRtbFxuICAgICAqIDxpZ3gtZXhwYW5zaW9uLXBhbmVsLXRpdGxlIFt0aXRsZV09XCInVG9vbHRpcCBjb250ZW50J1wiPlxuICAgICAqIDwvaWd4LWV4cGFuc2lvbi1wYW5lbC10aXRsZT5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIElmIGJvdGggYXJlIHByb3ZpZGVkLCByZXR1cm5zIHRoZSBgdGl0bGVgIGNvbnRlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWxlbWVudFxuICAgICAqIEByZXR1cm5zIHRvb2x0aXAgY29udGVudCBmb3IgYW4gZWxlbWVudFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRUb29sdGlwQ29udGVudCA9IChlbGVtZW50OiBFbGVtZW50UmVmKTogc3RyaW5nID0+IHtcbiAgICAgICAgaWYgKGVsZW1lbnQubmF0aXZlRWxlbWVudC50aXRsZSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQubmF0aXZlRWxlbWVudC50aXRsZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZWxlbWVudC5uYXRpdmVFbGVtZW50LnRleHRDb250ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5uYXRpdmVFbGVtZW50LnRleHRDb250ZW50LnRyaW0oKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG59XG4iXX0=