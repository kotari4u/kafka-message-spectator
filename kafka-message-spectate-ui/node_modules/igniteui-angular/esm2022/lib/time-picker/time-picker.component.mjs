import { NgIf, NgClass, NgFor, NgTemplateOutlet } from '@angular/common';
import { Component, EventEmitter, HostBinding, Input, Output, ViewChild, ContentChild, Inject, LOCALE_ID, Optional, ContentChildren, HostListener } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl, NG_VALIDATORS } from '@angular/forms';
import { IgxInputGroupComponent } from '../input-group/input-group.component';
import { IgxInputDirective, IgxInputState } from '../directives/input/input.directive';
import { IGX_INPUT_GROUP_TYPE } from '../input-group/public_api';
import { DisplayDensityToken } from '../core/density';
import { IgxItemListDirective, IgxTimeItemDirective } from './time-picker.directives';
import { noop, fromEvent } from 'rxjs';
import { IGX_TIME_PICKER_COMPONENT } from './time-picker.common';
import { AbsoluteScrollStrategy } from '../services/overlay/scroll';
import { AutoPositionStrategy } from '../services/overlay/position';
import { takeUntil } from 'rxjs/operators';
import { IgxButtonDirective } from '../directives/button/button.directive';
import { IgxDateTimeEditorDirective } from '../directives/date-time-editor/date-time-editor.directive';
import { IgxToggleDirective } from '../directives/toggle/toggle.directive';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { isEqual, isDate } from '../core/utils';
import { PickerInteractionMode } from '../date-common/types';
import { IgxTextSelectionDirective } from '../directives/text-selection/text-selection.directive';
import { IgxLabelDirective } from '../directives/label/label.directive';
import { PickerBaseDirective } from '../date-common/picker-base.directive';
import { DateTimeUtil } from '../date-common/util/date-time.util';
import { PickerHeaderOrientation } from '../date-common/types';
import { IgxPickerActionsDirective, IgxPickerClearComponent } from '../date-common/picker-icons.common';
import { TimeFormatPipe, TimeItemPipe } from './time-picker.pipes';
import { IgxSuffixDirective } from '../directives/suffix/suffix.directive';
import { IgxIconComponent } from '../icon/icon.component';
import { IgxPrefixDirective } from '../directives/prefix/prefix.directive';
import * as i0 from "@angular/core";
import * as i1 from "../core/utils";
let NEXT_ID = 0;
export class IgxTimePickerComponent extends PickerBaseDirective {
    /**
     * The minimum value the picker will accept.
     *
     * @remarks
     * If a `string` value is passed in, it must be in ISO format.
     *
     * @example
     * ```html
     * <igx-time-picker [minValue]="18:00:00"></igx-time-picker>
     * ```
     */
    set minValue(value) {
        this._minValue = value;
        const date = this.parseToDate(value);
        if (date) {
            this._dateMinValue = new Date();
            this._dateMinValue.setHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
            this.minDropdownValue = this.setMinMaxDropdownValue('min', this._dateMinValue);
        }
        this.setSelectedValue(this._selectedDate);
        this._onValidatorChange();
    }
    get minValue() {
        return this._minValue;
    }
    /**
     * Gets if the dropdown/dialog is collapsed
     *
     * ```typescript
     * let isCollapsed = this.timePicker.collapsed;
     * ```
     */
    get collapsed() {
        return this.toggleRef?.collapsed;
    }
    /**
     * The maximum value the picker will accept.
     *
     * @remarks
     * If a `string` value is passed in, it must be in ISO format.
     *
     * @example
     * ```html
     * <igx-time-picker [maxValue]="20:30:00"></igx-time-picker>
     * ```
     */
    set maxValue(value) {
        this._maxValue = value;
        const date = this.parseToDate(value);
        if (date) {
            this._dateMaxValue = new Date();
            this._dateMaxValue.setHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
            this.maxDropdownValue = this.setMinMaxDropdownValue('max', this._dateMaxValue);
        }
        this.setSelectedValue(this._selectedDate);
        this._onValidatorChange();
    }
    get maxValue() {
        return this._maxValue;
    }
    /** @hidden */
    get showClearButton() {
        if (this.clearComponents.length) {
            return false;
        }
        if (DateTimeUtil.isValidDate(this.value)) {
            // TODO: Update w/ clear behavior
            return this.value.getHours() !== 0 || this.value.getMinutes() !== 0 || this.value.getSeconds() !== 0;
        }
        return !!this.dateTimeEditor.value;
    }
    /** @hidden */
    get showHoursList() {
        return this.inputFormat.indexOf('h') !== -1 || this.inputFormat.indexOf('H') !== -1;
    }
    /** @hidden */
    get showMinutesList() {
        return this.inputFormat.indexOf('m') !== -1;
    }
    /** @hidden */
    get showSecondsList() {
        return this.inputFormat.indexOf('s') !== -1;
    }
    /** @hidden */
    get showAmPmList() {
        return this.inputFormat.indexOf('t') !== -1 || this.inputFormat.indexOf('a') !== -1;
    }
    /** @hidden */
    get isTwelveHourFormat() {
        return this.inputFormat.indexOf('h') !== -1;
    }
    /** @hidden @internal */
    get isVertical() {
        return this.headerOrientation === PickerHeaderOrientation.Vertical;
    }
    /** @hidden @internal */
    get selectedDate() {
        return this._selectedDate;
    }
    /** @hidden @internal */
    get minDateValue() {
        if (!this._dateMinValue) {
            const minDate = new Date();
            minDate.setHours(0, 0, 0, 0);
            return minDate;
        }
        return this._dateMinValue;
    }
    /** @hidden @internal */
    get maxDateValue() {
        if (!this._dateMaxValue) {
            const maxDate = new Date();
            maxDate.setHours(23, 59, 59, 999);
            return maxDate;
        }
        return this._dateMaxValue;
    }
    get required() {
        if (this._ngControl && this._ngControl.control && this._ngControl.control.validator) {
            // Run the validation with empty object to check if required is enabled.
            const error = this._ngControl.control.validator({});
            return !!(error && error.required);
        }
        return false;
    }
    get dialogOverlaySettings() {
        return Object.assign({}, this._defaultDialogOverlaySettings, this.overlaySettings);
    }
    get dropDownOverlaySettings() {
        return Object.assign({}, this._defaultDropDownOverlaySettings, this.overlaySettings);
    }
    /**
     * The currently selected value / time from the drop-down/dialog
     *
     * @remarks
     * The current value is of type `Date`
     *
     * @example
     * ```typescript
     * const newValue: Date = new Date(2000, 2, 2, 10, 15, 15);
     * this.timePicker.value = newValue;
     * ```
     */
    get value() {
        return this._value;
    }
    /**
     * An accessor that allows you to set a time using the `value` input.
     * ```html
     * public date: Date = new Date(Date.now());
     *  //...
     * <igx-time-picker [value]="date" format="h:mm tt"></igx-time-picker>
     * ```
     */
    set value(value) {
        const oldValue = this._value;
        this._value = value;
        const date = this.parseToDate(value);
        if (date) {
            this._dateValue = new Date();
            this._dateValue.setHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
            this.setSelectedValue(this._dateValue);
        }
        else {
            this._dateValue = null;
            this.setSelectedValue(null);
        }
        if (this.dateTimeEditor) {
            this.dateTimeEditor.value = date;
        }
        this.emitValueChange(oldValue, this._value);
        this._onChangeCallback(this._value);
    }
    /**
     * An accessor that sets the resource strings.
     * By default it uses EN resources.
     */
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    /**
     * An accessor that returns the resource strings.
     */
    get resourceStrings() {
        return this._resourceStrings;
    }
    /**
     * An @Input property that renders OK button with custom text. By default `okButtonLabel` is set to OK.
     * ```html
     * <igx-time-picker okButtonLabel='SET' [value]="date" format="h:mm tt"></igx-time-picker>
     * ```
     */
    set okButtonLabel(value) {
        this._okButtonLabel = value;
    }
    /**
     * An accessor that returns the label of ok button.
     */
    get okButtonLabel() {
        if (this._okButtonLabel === null) {
            return this.resourceStrings.igx_time_picker_ok;
        }
        return this._okButtonLabel;
    }
    /**
     * An @Input property that renders cancel button with custom text.
     * By default `cancelButtonLabel` is set to Cancel.
     * ```html
     * <igx-time-picker cancelButtonLabel='Exit' [value]="date" format="h:mm tt"></igx-time-picker>
     * ```
     */
    set cancelButtonLabel(value) {
        this._cancelButtonLabel = value;
    }
    /**
     * An accessor that returns the label of cancel button.
     */
    get cancelButtonLabel() {
        if (this._cancelButtonLabel === null) {
            return this.resourceStrings.igx_time_picker_cancel;
        }
        return this._cancelButtonLabel;
    }
    /**
     * Delta values used to increment or decrement each editor date part on spin actions and
     * to display time portions in the dropdown/dialog.
     * By default `itemsDelta` is set to `{hour: 1, minute: 1, second: 1}`
     * ```html
     * <igx-time-picker [itemsDelta]="{hour:3, minute:5, second:10}" id="time-picker"></igx-time-picker>
     * ```
     */
    set itemsDelta(value) {
        Object.assign(this._itemsDelta, value);
    }
    get itemsDelta() {
        return this._itemsDelta;
    }
    constructor(element, _localeId, _displayDensityOptions, _inputGroupType, _injector, platform, cdr) {
        super(element, _localeId, _displayDensityOptions, _inputGroupType);
        this._injector = _injector;
        this.platform = platform;
        this.cdr = cdr;
        /**
         * An @Input property that sets the value of the `id` attribute.
         * ```html
         * <igx-time-picker [id]="'igx-time-picker-5'" [displayFormat]="h:mm tt" ></igx-time-picker>
         * ```
         */
        this.id = `igx-time-picker-${NEXT_ID++}`;
        /**
         * The expected user input format and placeholder.
         *
         * @remarks
         * Default is `hh:mm tt`
         *
         * @example
         * ```html
         * <igx-time-picker inputFormat="HH:mm"></igx-time-picker>
         * ```
         */
        this.inputFormat = DateTimeUtil.DEFAULT_TIME_INPUT_FORMAT;
        /**
         * Gets/Sets the interaction mode - dialog or drop down.
         *
         * @example
         * ```html
         * <igx-time-picker mode="dialog"></igx-time-picker>
         * ```
         */
        this.mode = PickerInteractionMode.DropDown;
        /**
         * An @Input property that determines the spin behavior. By default `spinLoop` is set to true.
         * The seconds, minutes and hour spinning will wrap around by default.
         * ```html
         * <igx-time-picker [spinLoop]="false"></igx-time-picker>
         * ```
         */
        this.spinLoop = true;
        /**
         * Sets the orientation of the picker's header.
         *
         * @remarks
         * Available in dialog mode only. Default value is `horizontal`.
         *
         * ```html
         * <igx-time-picker [headerOrientation]="'vertical'"></igx-time-picker>
         * ```
         */
        this.headerOrientation = PickerHeaderOrientation.Horizontal;
        /** @hidden @internal */
        this.readOnly = false;
        /**
         * Emitted after a selection has been done.
         *
         * @example
         * ```html
         * <igx-time-picker (selected)="onSelection($event)"></igx-time-picker>
         * ```
         */
        this.selected = new EventEmitter();
        /**
         * Emitted when the picker's value changes.
         *
         * @remarks
         * Used for `two-way` bindings.
         *
         * @example
         * ```html
         * <igx-time-picker [(value)]="date"></igx-time-picker>
         * ```
         */
        this.valueChange = new EventEmitter();
        /**
         * Emitted when the user types/spins invalid time in the time-picker editor.
         *
         *  @example
         * ```html
         * <igx-time-picker (validationFailed)="onValidationFailed($event)"></igx-time-picker>
         * ```
         */
        this.validationFailed = new EventEmitter();
        /** @hidden */
        this.cleared = false;
        /** @hidden */
        this.isNotEmpty = false;
        /** @hidden @internal */
        this.displayValue = { transform: (date) => this.formatter(date) };
        /** @hidden @internal */
        this.hourItems = [];
        /** @hidden @internal */
        this.minuteItems = [];
        /** @hidden @internal */
        this.secondsItems = [];
        /** @hidden @internal */
        this.ampmItems = [];
        this._resourceStrings = CurrentResourceStrings.TimePickerResStrings;
        this._okButtonLabel = null;
        this._cancelButtonLabel = null;
        this._itemsDelta = { hours: 1, minutes: 1, seconds: 1 };
        this._ngControl = null;
        this._onChangeCallback = noop;
        this._onTouchedCallback = noop;
        this._onValidatorChange = noop;
        this._defaultDialogOverlaySettings = {
            closeOnOutsideClick: true,
            modal: true,
            closeOnEscape: true,
            outlet: this.outlet
        };
        this._defaultDropDownOverlaySettings = {
            target: this.element.nativeElement,
            modal: false,
            closeOnOutsideClick: true,
            scrollStrategy: new AbsoluteScrollStrategy(),
            positionStrategy: new AutoPositionStrategy(),
            outlet: this.outlet
        };
        this.locale = this.locale || this._localeId;
    }
    /** @hidden @internal */
    onKeyDown(event) {
        switch (event.key) {
            case this.platform.KEYMAP.ARROW_UP:
                if (event.altKey && this.isDropdown) {
                    this.close();
                }
                break;
            case this.platform.KEYMAP.ARROW_DOWN:
                if (event.altKey && this.isDropdown) {
                    this.open();
                }
                break;
            case this.platform.KEYMAP.ESCAPE:
                this.cancelButtonClick();
                break;
            case this.platform.KEYMAP.SPACE:
                this.open();
                event.preventDefault();
                break;
        }
    }
    /** @hidden @internal */
    getPartValue(value, type) {
        const inputDateParts = DateTimeUtil.parseDateTimeFormat(this.inputFormat);
        const part = inputDateParts.find(element => element.type === type);
        return DateTimeUtil.getPartValue(value, part, part.format.length);
    }
    /** @hidden @internal */
    toISOString(value) {
        return value.toLocaleTimeString('en-GB', {
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit',
        });
    }
    // #region ControlValueAccessor
    /** @hidden @internal */
    writeValue(value) {
        this._value = value;
        const date = this.parseToDate(value);
        if (date) {
            this._dateValue = new Date();
            this._dateValue.setHours(date.getHours(), date.getMinutes(), date.getSeconds());
            this.setSelectedValue(this._dateValue);
        }
        else {
            this.setSelectedValue(null);
        }
        if (this.dateTimeEditor) {
            this.dateTimeEditor.value = date;
        }
    }
    /** @hidden @internal */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /** @hidden @internal */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /** @hidden @internal */
    registerOnValidatorChange(fn) {
        this._onValidatorChange = fn;
    }
    /** @hidden @internal */
    validate(control) {
        if (!control.value) {
            return null;
        }
        // InvalidDate handling
        if (isDate(control.value) && !DateTimeUtil.isValidDate(control.value)) {
            return { value: true };
        }
        const errors = {};
        const value = DateTimeUtil.isValidDate(control.value) ? control.value : DateTimeUtil.parseIsoDate(control.value);
        Object.assign(errors, DateTimeUtil.validateMinMax(value, this.minValue, this.maxValue, true, false));
        return Object.keys(errors).length > 0 ? errors : null;
    }
    /** @hidden @internal */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    //#endregion
    /** @hidden */
    ngOnInit() {
        this._ngControl = this._injector.get(NgControl, null);
        this.minDropdownValue = this.setMinMaxDropdownValue('min', this.minDateValue);
        this.maxDropdownValue = this.setMinMaxDropdownValue('max', this.maxDateValue);
        this.setSelectedValue(this._dateValue);
        super.ngOnInit();
    }
    /** @hidden */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.subscribeToDateEditorEvents();
        this.subscribeToToggleDirectiveEvents();
        this._defaultDropDownOverlaySettings.excludeFromOutsideClick = [this._inputGroup.element.nativeElement];
        fromEvent(this.inputDirective.nativeElement, 'blur')
            .pipe(takeUntil(this._destroy$))
            .subscribe(() => {
            if (this.collapsed) {
                this.updateValidityOnBlur();
            }
        });
        this.subToIconsClicked(this.clearComponents, () => this.clear());
        this.clearComponents.changes.pipe(takeUntil(this._destroy$))
            .subscribe(() => this.subToIconsClicked(this.clearComponents, () => this.clear()));
        if (this._ngControl) {
            this._statusChanges$ = this._ngControl.statusChanges.subscribe(this.onStatusChanged.bind(this));
            this._inputGroup.isRequired = this.required;
            this.cdr.detectChanges();
        }
    }
    /** @hidden */
    ngOnDestroy() {
        super.ngOnDestroy();
        if (this._statusChanges$) {
            this._statusChanges$.unsubscribe();
        }
    }
    /** @hidden */
    getEditElement() {
        return this.dateTimeEditor.nativeElement;
    }
    /**
     * Opens the picker's dialog UI.
     *
     * @param settings OverlaySettings - the overlay settings to use for positioning the drop down or dialog container according to
     * ```html
     * <igx-time-picker #picker [value]="date"></igx-time-picker>
     * <button (click)="picker.open()">Open Dialog</button>
     * ```
     */
    open(settings) {
        if (this.disabled || !this.toggleRef.collapsed) {
            return;
        }
        this.setSelectedValue(this._dateValue);
        const overlaySettings = Object.assign({}, this.isDropdown
            ? this.dropDownOverlaySettings
            : this.dialogOverlaySettings, settings);
        this.toggleRef.open(overlaySettings);
    }
    /**
     * Closes the dropdown/dialog.
     * ```html
     * <igx-time-picker #timePicker></igx-time-picker>
     * ```
     * ```typescript
     * @ViewChild('timePicker', { read: IgxTimePickerComponent }) picker: IgxTimePickerComponent;
     * picker.close();
     * ```
     */
    close() {
        this.toggleRef.close();
    }
    toggle(settings) {
        if (this.toggleRef.collapsed) {
            this.open(settings);
        }
        else {
            this.close();
        }
    }
    /**
     * Clears the time picker value if it is a `string` or resets the time to `00:00:00` if the value is a Date object.
     *
     * @example
     * ```typescript
     * this.timePicker.clear();
     * ```
     */
    clear() {
        if (this.disabled) {
            return;
        }
        if (!this.toggleRef.collapsed) {
            this.close();
        }
        if (DateTimeUtil.isValidDate(this.value)) {
            const oldValue = new Date(this.value);
            this.value.setHours(0, 0, 0);
            if (this.value.getTime() !== oldValue.getTime()) {
                this.emitValueChange(oldValue, this.value);
                this._dateValue.setHours(0, 0, 0);
                this.dateTimeEditor.value = new Date(this.value);
                this.setSelectedValue(this._dateValue);
            }
        }
        else {
            this.value = null;
        }
    }
    /**
     * Selects time from the igxTimePicker.
     *
     * @example
     * ```typescript
     * this.timePicker.select(date);
     *
     * @param date Date object containing the time to be selected.
     */
    select(date) {
        this.value = date;
    }
    /**
     * Increment a specified `DatePart`.
     *
     * @param datePart The optional DatePart to increment. Defaults to Hour.
     * @param delta The optional delta to increment by. Overrides `itemsDelta`.
     * @example
     * ```typescript
     * this.timePicker.increment(DatePart.Hours);
     * ```
     */
    increment(datePart, delta) {
        this.dateTimeEditor.increment(datePart, delta);
    }
    /**
     * Decrement a specified `DatePart`
     *
     * @param datePart The optional DatePart to decrement. Defaults to Hour.
     * @param delta The optional delta to decrement by. Overrides `itemsDelta`.
     * @example
     * ```typescript
     * this.timePicker.decrement(DatePart.Seconds);
     * ```
     */
    decrement(datePart, delta) {
        this.dateTimeEditor.decrement(datePart, delta);
    }
    /** @hidden @internal */
    cancelButtonClick() {
        this.setSelectedValue(this._dateValue);
        this.dateTimeEditor.value = this.parseToDate(this.value);
        this.close();
    }
    /** @hidden @internal */
    okButtonClick() {
        this.updateValue(this._selectedDate);
        this.close();
    }
    /** @hidden @internal */
    onItemClick(item, dateType) {
        let date = new Date(this._selectedDate);
        switch (dateType) {
            case 'hourList':
                let ampm;
                const selectedHour = parseInt(item, 10);
                let hours = selectedHour;
                if (this.showAmPmList) {
                    ampm = this.getPartValue(date, 'ampm');
                    hours = this.toTwentyFourHourFormat(hours, ampm);
                    const minHours = this.minDropdownValue?.getHours() || 0;
                    const maxHours = this.maxDropdownValue?.getHours() || 24;
                    if (hours < minHours || hours > maxHours) {
                        hours = hours < 12 ? hours + 12 : hours - 12;
                    }
                }
                date.setHours(hours);
                date = this.validateDropdownValue(date);
                if (this.valueInRange(date, this.minDropdownValue, this.maxDropdownValue)) {
                    this.setSelectedValue(date);
                }
                break;
            case 'minuteList': {
                const minutes = parseInt(item, 10);
                date.setMinutes(minutes);
                date = this.validateDropdownValue(date);
                this.setSelectedValue(date);
                break;
            }
            case 'secondsList': {
                const seconds = parseInt(item, 10);
                date.setSeconds(seconds);
                if (this.valueInRange(date, this.minDropdownValue, this.maxDropdownValue)) {
                    this.setSelectedValue(date);
                }
                break;
            }
            case 'ampmList': {
                let hour = this._selectedDate.getHours();
                hour = item === 'AM' ? hour - 12 : hour + 12;
                date.setHours(hour);
                date = this.validateDropdownValue(date, true);
                this.setSelectedValue(date);
                break;
            }
        }
        this.updateEditorValue();
    }
    /** @hidden @internal */
    nextHour(delta) {
        delta = delta > 0 ? 1 : -1;
        const previousDate = new Date(this._selectedDate);
        const minHours = this.minDropdownValue?.getHours();
        const maxHours = this.maxDropdownValue?.getHours();
        const previousHours = previousDate.getHours();
        let hours = previousHours + delta * this.itemsDelta.hours;
        if ((previousHours === maxHours && delta > 0) || (previousHours === minHours && delta < 0)) {
            hours = !this.spinLoop ? previousHours : delta > 0 ? minHours : maxHours;
        }
        this._selectedDate.setHours(hours);
        this._selectedDate = this.validateDropdownValue(this._selectedDate);
        this._selectedDate = new Date(this._selectedDate);
        this.updateEditorValue();
    }
    /** @hidden @internal */
    nextMinute(delta) {
        delta = delta > 0 ? 1 : -1;
        const minHours = this.minDropdownValue.getHours();
        const maxHours = this.maxDropdownValue.getHours();
        const hours = this._selectedDate.getHours();
        let minutes = this._selectedDate.getMinutes();
        const minMinutes = hours === minHours ? this.minDropdownValue.getMinutes() : 0;
        const maxMinutes = hours === maxHours ? this.maxDropdownValue.getMinutes() :
            60 % this.itemsDelta.minutes > 0 ? 60 - (60 % this.itemsDelta.minutes) :
                60 - this.itemsDelta.minutes;
        if ((delta < 0 && minutes === minMinutes) || (delta > 0 && minutes === maxMinutes)) {
            minutes = this.spinLoop && minutes === minMinutes ? maxMinutes : this.spinLoop && minutes === maxMinutes ? minMinutes : minutes;
        }
        else {
            minutes = minutes + delta * this.itemsDelta.minutes;
        }
        this._selectedDate.setMinutes(minutes);
        this._selectedDate = this.validateDropdownValue(this._selectedDate);
        this._selectedDate = new Date(this._selectedDate);
        this.updateEditorValue();
    }
    /** @hidden @internal */
    nextSeconds(delta) {
        delta = delta > 0 ? 1 : -1;
        const minHours = this.minDropdownValue.getHours();
        const maxHours = this.maxDropdownValue.getHours();
        const hours = this._selectedDate.getHours();
        const minutes = this._selectedDate.getMinutes();
        const minMinutes = this.minDropdownValue.getMinutes();
        const maxMinutes = this.maxDropdownValue.getMinutes();
        let seconds = this._selectedDate.getSeconds();
        const minSeconds = (hours === minHours && minutes === minMinutes) ? this.minDropdownValue.getSeconds() : 0;
        const maxSeconds = (hours === maxHours && minutes === maxMinutes) ? this.maxDropdownValue.getSeconds() :
            60 % this.itemsDelta.seconds > 0 ? 60 - (60 % this.itemsDelta.seconds) :
                60 - this.itemsDelta.seconds;
        if ((delta < 0 && seconds === minSeconds) || (delta > 0 && seconds === maxSeconds)) {
            seconds = this.spinLoop && seconds === minSeconds ? maxSeconds : this.spinLoop && seconds === maxSeconds ? minSeconds : seconds;
        }
        else {
            seconds = seconds + delta * this.itemsDelta.seconds;
        }
        this._selectedDate.setSeconds(seconds);
        this._selectedDate = this.validateDropdownValue(this._selectedDate);
        this._selectedDate = new Date(this._selectedDate);
        this.updateEditorValue();
    }
    /** @hidden @internal */
    nextAmPm(delta) {
        const ampm = this.getPartValue(this._selectedDate, 'ampm');
        if (!delta || (ampm === 'AM' && delta > 0) || (ampm === 'PM' && delta < 0)) {
            let hours = this._selectedDate.getHours();
            const sign = hours < 12 ? 1 : -1;
            hours = hours + sign * 12;
            this._selectedDate.setHours(hours);
            this._selectedDate = this.validateDropdownValue(this._selectedDate, true);
            this._selectedDate = new Date(this._selectedDate);
            this.updateEditorValue();
        }
    }
    /** @hidden @internal */
    setSelectedValue(value) {
        this._selectedDate = value ? new Date(value) : null;
        if (!DateTimeUtil.isValidDate(this._selectedDate)) {
            this._selectedDate = new Date(this.minDropdownValue);
            return;
        }
        if (this.minValue && DateTimeUtil.lessThanMinValue(this._selectedDate, this.minDropdownValue, true, false)) {
            this._selectedDate = new Date(this.minDropdownValue);
            return;
        }
        if (this.maxValue && DateTimeUtil.greaterThanMaxValue(this._selectedDate, this.maxDropdownValue, true, false)) {
            this._selectedDate = new Date(this.maxDropdownValue);
            return;
        }
        if (this._selectedDate.getHours() % this.itemsDelta.hours > 0) {
            this._selectedDate.setHours(this._selectedDate.getHours() + this.itemsDelta.hours - this._selectedDate.getHours() % this.itemsDelta.hours, 0, 0);
        }
        if (this._selectedDate.getMinutes() % this.itemsDelta.minutes > 0) {
            this._selectedDate.setHours(this._selectedDate.getHours(), this._selectedDate.getMinutes() + this.itemsDelta.minutes - this._selectedDate.getMinutes() % this.itemsDelta.minutes, 0);
        }
        if (this._selectedDate.getSeconds() % this.itemsDelta.seconds > 0) {
            this._selectedDate.setSeconds(this._selectedDate.getSeconds() + this.itemsDelta.seconds - this._selectedDate.getSeconds() % this.itemsDelta.seconds);
        }
    }
    onStatusChanged() {
        if (this._ngControl && !this._ngControl.disabled && this.isTouchedOrDirty) {
            if (this.hasValidators && this._inputGroup.isFocused) {
                this.inputDirective.valid = this._ngControl.valid ? IgxInputState.VALID : IgxInputState.INVALID;
            }
            else {
                this.inputDirective.valid = this._ngControl.valid ? IgxInputState.INITIAL : IgxInputState.INVALID;
            }
        }
        else {
            // B.P. 18 May 2021: IgxDatePicker does not reset its state upon resetForm #9526
            this.inputDirective.valid = IgxInputState.INITIAL;
        }
        if (this._inputGroup && this._inputGroup.isRequired !== this.required) {
            this._inputGroup.isRequired = this.required;
        }
    }
    get isTouchedOrDirty() {
        return (this._ngControl.control.touched || this._ngControl.control.dirty);
    }
    get hasValidators() {
        return (!!this._ngControl.control.validator || !!this._ngControl.control.asyncValidator);
    }
    setMinMaxDropdownValue(type, time) {
        let delta;
        const sign = type === 'min' ? 1 : -1;
        const hours = time.getHours();
        let minutes = time.getMinutes();
        let seconds = time.getSeconds();
        if (this.showHoursList && hours % this.itemsDelta.hours > 0) {
            delta = type === 'min' ? this.itemsDelta.hours - hours % this.itemsDelta.hours
                : hours % this.itemsDelta.hours;
            minutes = type === 'min' ? 0
                : 60 % this.itemsDelta.minutes > 0 ? 60 - 60 % this.itemsDelta.minutes
                    : 60 - this.itemsDelta.minutes;
            seconds = type === 'min' ? 0
                : 60 % this.itemsDelta.seconds > 0 ? 60 - 60 % this.itemsDelta.seconds
                    : 60 - this.itemsDelta.seconds;
            time.setHours(hours + sign * delta, minutes, seconds);
        }
        else if (this.showMinutesList && minutes % this.itemsDelta.minutes > 0) {
            delta = type === 'min' ? this.itemsDelta.minutes - minutes % this.itemsDelta.minutes
                : minutes % this.itemsDelta.minutes;
            seconds = type === 'min' ? 0
                : 60 % this.itemsDelta.seconds > 0 ? 60 - 60 % this.itemsDelta.seconds
                    : 60 - this.itemsDelta.seconds;
            time.setHours(hours, minutes + sign * delta, seconds);
        }
        else if (this.showSecondsList && seconds % this.itemsDelta.seconds > 0) {
            delta = type === 'min' ? this.itemsDelta.seconds - seconds % this.itemsDelta.seconds
                : seconds % this.itemsDelta.seconds;
            time.setHours(hours, minutes, seconds + sign * delta);
        }
        return time;
    }
    initializeContainer() {
        requestAnimationFrame(() => {
            if (this.hourList) {
                this.hourList.nativeElement.focus();
            }
            else if (this.minuteList) {
                this.minuteList.nativeElement.focus();
            }
            else if (this.secondsList) {
                this.secondsList.nativeElement.focus();
            }
        });
    }
    validateDropdownValue(date, isAmPm = false) {
        if (date > this.maxDropdownValue) {
            if (isAmPm && date.getHours() !== this.maxDropdownValue.getHours()) {
                date.setHours(12);
            }
            else {
                date = new Date(this.maxDropdownValue);
            }
        }
        if (date < this.minDropdownValue) {
            date = new Date(this.minDropdownValue);
        }
        return date;
    }
    emitValueChange(oldValue, newValue) {
        if (!isEqual(oldValue, newValue)) {
            this.valueChange.emit(newValue);
        }
    }
    emitValidationFailedEvent(previousValue) {
        const args = {
            owner: this,
            previousValue,
            currentValue: this.value
        };
        this.validationFailed.emit(args);
    }
    updateValidityOnBlur() {
        this._onTouchedCallback();
        if (this._ngControl) {
            if (!this._ngControl.valid) {
                this.inputDirective.valid = IgxInputState.INVALID;
            }
            else {
                this.inputDirective.valid = IgxInputState.INITIAL;
            }
        }
    }
    valueInRange(value, minValue, maxValue) {
        if (minValue && DateTimeUtil.lessThanMinValue(value, minValue, true, false)) {
            return false;
        }
        if (maxValue && DateTimeUtil.greaterThanMaxValue(value, maxValue, true, false)) {
            return false;
        }
        return true;
    }
    parseToDate(value) {
        return DateTimeUtil.isValidDate(value) ? value : DateTimeUtil.parseIsoDate(value);
    }
    toTwentyFourHourFormat(hour, ampm) {
        if (ampm === 'PM' && hour < 12) {
            hour += 12;
        }
        else if (ampm === 'AM' && hour === 12) {
            hour = 0;
        }
        return hour;
    }
    updateValue(newValue) {
        if (!this.value) {
            this.value = newValue ? new Date(newValue) : newValue;
        }
        else if (isDate(this.value)) {
            const date = new Date(this.value);
            date.setHours(newValue?.getHours() || 0, newValue?.getMinutes() || 0, newValue?.getSeconds() || 0);
            this.value = date;
        }
        else {
            this.value = newValue ? this.toISOString(newValue) : newValue;
        }
    }
    updateEditorValue() {
        const date = this.dateTimeEditor.value ? new Date(this.dateTimeEditor.value) : new Date();
        date.setHours(this._selectedDate.getHours(), this._selectedDate.getMinutes(), this._selectedDate.getSeconds());
        this.dateTimeEditor.value = date;
    }
    subscribeToDateEditorEvents() {
        this.dateTimeEditor.valueChange.pipe(
        // internal date editor directive is only used w/ Date object values:
        takeUntil(this._destroy$)).subscribe((date) => {
            this.updateValue(date);
        });
        this.dateTimeEditor.validationFailed.pipe(takeUntil(this._destroy$)).subscribe((event) => {
            this.emitValidationFailedEvent(event.oldValue);
        });
    }
    subscribeToToggleDirectiveEvents() {
        if (this.toggleRef) {
            if (this._inputGroup) {
                this.toggleRef.element.style.width = this._inputGroup.element.nativeElement.getBoundingClientRect().width + 'px';
            }
            this.toggleRef.opening.pipe(takeUntil(this._destroy$)).subscribe((e) => {
                const args = { owner: this, event: e.event, cancel: false };
                this.opening.emit(args);
                e.cancel = args.cancel;
                if (args.cancel) {
                    return;
                }
                this.initializeContainer();
            });
            this.toggleRef.opened.pipe(takeUntil(this._destroy$)).subscribe(() => {
                this.opened.emit({ owner: this });
            });
            this.toggleRef.closed.pipe(takeUntil(this._destroy$)).subscribe(() => {
                this.closed.emit({ owner: this });
            });
            this.toggleRef.closing.pipe(takeUntil(this._destroy$)).subscribe((e) => {
                const args = { owner: this, event: e.event, cancel: false };
                this.closing.emit(args);
                e.cancel = args.cancel;
                if (args.cancel) {
                    return;
                }
                const value = this.parseToDate(this.value);
                if (this.dateTimeEditor.value?.getTime() !== value?.getTime()) {
                    this.updateValue(this._selectedDate);
                }
                // Do not focus the input if clicking outside in dropdown mode
                const input = this.getEditElement();
                if (input && !(e.event && this.isDropdown)) {
                    input.focus();
                }
                else {
                    this.updateValidityOnBlur();
                }
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxTimePickerComponent, deps: [{ token: i0.ElementRef }, { token: LOCALE_ID }, { token: DisplayDensityToken, optional: true }, { token: IGX_INPUT_GROUP_TYPE, optional: true }, { token: i0.Injector }, { token: i1.PlatformUtil }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxTimePickerComponent, isStandalone: true, selector: "igx-time-picker", inputs: { id: "id", displayFormat: "displayFormat", inputFormat: "inputFormat", mode: "mode", minValue: "minValue", maxValue: "maxValue", spinLoop: "spinLoop", formatter: "formatter", headerOrientation: "headerOrientation", readOnly: "readOnly", value: "value", resourceStrings: "resourceStrings", okButtonLabel: "okButtonLabel", cancelButtonLabel: "cancelButtonLabel", itemsDelta: "itemsDelta" }, outputs: { selected: "selected", valueChange: "valueChange", validationFailed: "validationFailed" }, host: { listeners: { "keydown": "onKeyDown($event)" }, properties: { "attr.id": "this.id" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: IgxTimePickerComponent,
                multi: true
            },
            {
                provide: IGX_TIME_PICKER_COMPONENT,
                useExisting: IgxTimePickerComponent
            },
            {
                provide: NG_VALIDATORS,
                useExisting: IgxTimePickerComponent,
                multi: true
            }
        ], queries: [{ propertyName: "label", first: true, predicate: IgxLabelDirective, descendants: true }, { propertyName: "timePickerActionsDirective", first: true, predicate: IgxPickerActionsDirective, descendants: true }, { propertyName: "clearComponents", predicate: IgxPickerClearComponent }], viewQueries: [{ propertyName: "hourList", first: true, predicate: ["hourList"], descendants: true }, { propertyName: "minuteList", first: true, predicate: ["minuteList"], descendants: true }, { propertyName: "secondsList", first: true, predicate: ["secondsList"], descendants: true }, { propertyName: "ampmList", first: true, predicate: ["ampmList"], descendants: true }, { propertyName: "inputDirective", first: true, predicate: IgxInputDirective, descendants: true, read: IgxInputDirective }, { propertyName: "_inputGroup", first: true, predicate: IgxInputGroupComponent, descendants: true }, { propertyName: "dateTimeEditor", first: true, predicate: IgxDateTimeEditorDirective, descendants: true, static: true }, { propertyName: "toggleRef", first: true, predicate: IgxToggleDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: "<igx-input-group [displayDensity]=\"displayDensity\" [type]=\"type\" [suppressInputAutofocus]=\"this.isDropdown\">\n    <input [displayValuePipe]=\"this.formatter ? displayValue : null\" igxInput [igxDateTimeEditor]=\"this.inputFormat\"\n        type=\"text\" [readonly]=\"!this.isDropdown || this.readOnly\" [minValue]=\"this.minValue\" [maxValue]=\"this.maxValue\"\n        [locale]=\"this.locale\" [spinDelta]=\"this.itemsDelta\" [spinLoop]=\"this.spinLoop\" [placeholder]=\"this.placeholder\"\n        [disabled]=\"this.disabled\" [displayFormat]=\"this.displayFormat\"\n        [igxTextSelection]=\"this.isDropdown && !this.readOnly\" role=\"combobox\" aria-haspopup=\"dialog\"\n        [attr.aria-expanded]=\"!this.toggleDirective.collapsed\" [attr.aria-labelledby]=\"this.label?.id\"\n        (click)=\"!this.isDropdown && this.toggle()\"/>\n\n    <igx-prefix *ngIf=\"!this.toggleComponents.length\" (click)=\"this.toggle()\">\n        <igx-icon [title]=\"this.value ? resourceStrings.igx_time_picker_change_time : resourceStrings.igx_time_picker_choose_time\">access_time</igx-icon>\n    </igx-prefix>\n\n    <ng-container ngProjectAs=\"[igxLabel]\">\n        <ng-content select=\"[igxLabel]\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"igx-prefix\">\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n    </ng-container>\n\n    <igx-suffix *ngIf=\"this.showClearButton\" (click)=\"this.clear(); $event.stopPropagation()\">\n        <igx-icon>clear</igx-icon>\n    </igx-suffix>\n\n    <ng-container ngProjectAs=\"igx-suffix\">\n        <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"igx-hint\">\n        <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\n    </ng-container>\n</igx-input-group>\n\n<ng-template #defaultTimePickerActions>\n    <div *ngIf=\"this.cancelButtonLabel || this.okButtonLabel\" class=\"igx-time-picker__buttons\">\n        <button *ngIf=\"this.cancelButtonLabel\" igxButton=\"flat\" (click)=\"this.cancelButtonClick()\">\n            {{this.cancelButtonLabel}}\n        </button>\n        <button *ngIf=\"this.okButtonLabel\" igxButton=\"flat\" (click)=\"this.okButtonClick()\">\n            {{this.okButtonLabel}}\n        </button>\n    </div>\n</ng-template>\n\n<div #toggleDirective=\"toggle\" igxToggle role=\"dialog\" class=\"igx-time-picker\"\n    [ngClass]=\"{'igx-time-picker--dropdown': this.isDropdown, 'igx-time-picker--vertical': this.isVertical && !this.isDropdown}\">\n    <div *ngIf=\"!this.isDropdown\" class=\"igx-time-picker__header\">\n        <h2 class=\"igx-time-picker__header-hour\">\n            <span>{{ this.selectedDate | timeFormatPipe }}</span>\n        </h2>\n    </div>\n    <div class=\"igx-time-picker__main\">\n        <div class=\"igx-time-picker__body\">\n            <div *ngIf=\"this.showHoursList\" #hourList [igxItemList]=\"'hourList'\">\n                <span [igxTimeItem]=\"hour\" #timeItem=\"timeItem\" aria-label=\"hour\"\n                    [attr.role]=\"timeItem.isSelectedTime ? 'spinbutton' : null\"\n                    [attr.aria-valuenow]=\"timeItem.isSelectedTime ? timeItem.hourValue : null\"\n                    [attr.aria-valuemin]=\"timeItem.isSelectedTime ? timeItem.minValue : null\"\n                    [attr.aria-valuemax]=\"timeItem.isSelectedTime ? timeItem.maxValue : null\"\n                    *ngFor=\"let hour of hourItems | timeItemPipe:'hour':this.selectedDate:this.minDropdownValue:this.maxDropdownValue\">{{ hour }}</span>\n            </div>\n            <div *ngIf=\"this.showMinutesList\" #minuteList [igxItemList]=\"'minuteList'\">\n                <span [igxTimeItem]=\"minute\" #timeItem=\"timeItem\" aria-label=\"minutes\"\n                    [attr.role]=\"timeItem.isSelectedTime ? 'spinbutton' : null\"\n                    [attr.aria-valuenow]=\"timeItem.isSelectedTime ? minute : null\"\n                    [attr.aria-valuemin]=\"timeItem.isSelectedTime ? timeItem.minValue : null\"\n                    [attr.aria-valuemax]=\"timeItem.isSelectedTime ? timeItem.maxValue : null\"\n                    *ngFor=\"let minute of minuteItems | timeItemPipe:'minutes':this.selectedDate:this.minDropdownValue:this.maxDropdownValue\">{{ minute }}</span>\n            </div>\n            <div *ngIf=\"this.showSecondsList\" #secondsList [igxItemList]=\"'secondsList'\">\n                <span [igxTimeItem]=\"seconds\" #timeItem=\"timeItem\" aria-label=\"seconds\"\n                    [attr.role]=\"timeItem.isSelectedTime ? 'spinbutton' : null\"\n                    [attr.aria-valuenow]=\"timeItem.isSelectedTime ? seconds : null\"\n                    [attr.aria-valuemin]=\"timeItem.isSelectedTime ? timeItem.minValue : null\"\n                    [attr.aria-valuemax]=\"timeItem.isSelectedTime ? timeItem.maxValue : null\"\n                    *ngFor=\"let seconds of secondsItems | timeItemPipe:'seconds':this.selectedDate:this.minDropdownValue:this.maxDropdownValue\">{{ seconds }}</span>\n            </div>\n            <div *ngIf=\"this.showAmPmList\" #ampmList [igxItemList]=\"'ampmList'\">\n                <span [igxTimeItem]=\"ampm\" #timeItem=\"timeItem\" aria-label=\"ampm\"\n                    [attr.role]=\"timeItem.isSelectedTime ? 'spinbutton' : null\"\n                    [attr.aria-valuenow]=\"timeItem.isSelectedTime ? ampm : null\"\n                    [attr.aria-valuemin]=\"timeItem.isSelectedTime ? timeItem.minValue : null\"\n                    [attr.aria-valuemax]=\"timeItem.isSelectedTime ? timeItem.maxValue : null\"\n                    *ngFor=\"let ampm of ampmItems | timeItemPipe:'ampm':this.selectedDate:this.minDropdownValue:this.maxDropdownValue\">{{ ampm }}</span>\n            </div>\n        </div>\n        <ng-container\n            *ngTemplateOutlet=\"timePickerActionsDirective ? timePickerActionsDirective.template : defaultTimePickerActions\">\n        </ng-container>\n    </div>\n</div>\n", styles: [":host{display:block}\n"], dependencies: [{ kind: "component", type: IgxInputGroupComponent, selector: "igx-input-group", inputs: ["resourceStrings", "suppressInputAutofocus", "type", "theme"] }, { kind: "directive", type: IgxInputDirective, selector: "[igxInput]", inputs: ["value", "disabled", "required"], exportAs: ["igxInput"] }, { kind: "directive", type: IgxDateTimeEditorDirective, selector: "[igxDateTimeEditor]", inputs: ["locale", "minValue", "maxValue", "spinLoop", "displayFormat", "igxDateTimeEditor", "value", "spinDelta"], outputs: ["valueChange", "validationFailed"], exportAs: ["igxDateTimeEditor"] }, { kind: "directive", type: IgxTextSelectionDirective, selector: "[igxTextSelection]", inputs: ["igxTextSelection"], exportAs: ["igxTextSelection"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: IgxPrefixDirective, selector: "igx-prefix,[igxPrefix],[igxStart]" }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "directive", type: IgxSuffixDirective, selector: "igx-suffix,[igxSuffix],[igxEnd]" }, { kind: "directive", type: IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxButtonColor", "igxButtonBackground", "igxLabel", "disabled"], outputs: ["buttonClick", "buttonSelected"] }, { kind: "directive", type: IgxToggleDirective, selector: "[igxToggle]", inputs: ["id"], outputs: ["opened", "opening", "closed", "closing", "appended"], exportAs: ["toggle"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: IgxItemListDirective, selector: "[igxItemList]", inputs: ["igxItemList"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: IgxTimeItemDirective, selector: "[igxTimeItem]", inputs: ["igxTimeItem"], exportAs: ["timeItem"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "pipe", type: TimeFormatPipe, name: "timeFormatPipe" }, { kind: "pipe", type: TimeItemPipe, name: "timeItemPipe" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxTimePickerComponent, decorators: [{
            type: Component,
            args: [{ providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: IgxTimePickerComponent,
                            multi: true
                        },
                        {
                            provide: IGX_TIME_PICKER_COMPONENT,
                            useExisting: IgxTimePickerComponent
                        },
                        {
                            provide: NG_VALIDATORS,
                            useExisting: IgxTimePickerComponent,
                            multi: true
                        }
                    ], selector: 'igx-time-picker', standalone: true, imports: [IgxInputGroupComponent, IgxInputDirective, IgxDateTimeEditorDirective, IgxTextSelectionDirective, NgIf, IgxPrefixDirective, IgxIconComponent, IgxSuffixDirective, IgxButtonDirective, IgxToggleDirective, NgClass, IgxItemListDirective, NgFor, IgxTimeItemDirective, NgTemplateOutlet, TimeFormatPipe, TimeItemPipe], template: "<igx-input-group [displayDensity]=\"displayDensity\" [type]=\"type\" [suppressInputAutofocus]=\"this.isDropdown\">\n    <input [displayValuePipe]=\"this.formatter ? displayValue : null\" igxInput [igxDateTimeEditor]=\"this.inputFormat\"\n        type=\"text\" [readonly]=\"!this.isDropdown || this.readOnly\" [minValue]=\"this.minValue\" [maxValue]=\"this.maxValue\"\n        [locale]=\"this.locale\" [spinDelta]=\"this.itemsDelta\" [spinLoop]=\"this.spinLoop\" [placeholder]=\"this.placeholder\"\n        [disabled]=\"this.disabled\" [displayFormat]=\"this.displayFormat\"\n        [igxTextSelection]=\"this.isDropdown && !this.readOnly\" role=\"combobox\" aria-haspopup=\"dialog\"\n        [attr.aria-expanded]=\"!this.toggleDirective.collapsed\" [attr.aria-labelledby]=\"this.label?.id\"\n        (click)=\"!this.isDropdown && this.toggle()\"/>\n\n    <igx-prefix *ngIf=\"!this.toggleComponents.length\" (click)=\"this.toggle()\">\n        <igx-icon [title]=\"this.value ? resourceStrings.igx_time_picker_change_time : resourceStrings.igx_time_picker_choose_time\">access_time</igx-icon>\n    </igx-prefix>\n\n    <ng-container ngProjectAs=\"[igxLabel]\">\n        <ng-content select=\"[igxLabel]\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"igx-prefix\">\n        <ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n    </ng-container>\n\n    <igx-suffix *ngIf=\"this.showClearButton\" (click)=\"this.clear(); $event.stopPropagation()\">\n        <igx-icon>clear</igx-icon>\n    </igx-suffix>\n\n    <ng-container ngProjectAs=\"igx-suffix\">\n        <ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n    </ng-container>\n    <ng-container ngProjectAs=\"igx-hint\">\n        <ng-content select=\"igx-hint,[igxHint]\"></ng-content>\n    </ng-container>\n</igx-input-group>\n\n<ng-template #defaultTimePickerActions>\n    <div *ngIf=\"this.cancelButtonLabel || this.okButtonLabel\" class=\"igx-time-picker__buttons\">\n        <button *ngIf=\"this.cancelButtonLabel\" igxButton=\"flat\" (click)=\"this.cancelButtonClick()\">\n            {{this.cancelButtonLabel}}\n        </button>\n        <button *ngIf=\"this.okButtonLabel\" igxButton=\"flat\" (click)=\"this.okButtonClick()\">\n            {{this.okButtonLabel}}\n        </button>\n    </div>\n</ng-template>\n\n<div #toggleDirective=\"toggle\" igxToggle role=\"dialog\" class=\"igx-time-picker\"\n    [ngClass]=\"{'igx-time-picker--dropdown': this.isDropdown, 'igx-time-picker--vertical': this.isVertical && !this.isDropdown}\">\n    <div *ngIf=\"!this.isDropdown\" class=\"igx-time-picker__header\">\n        <h2 class=\"igx-time-picker__header-hour\">\n            <span>{{ this.selectedDate | timeFormatPipe }}</span>\n        </h2>\n    </div>\n    <div class=\"igx-time-picker__main\">\n        <div class=\"igx-time-picker__body\">\n            <div *ngIf=\"this.showHoursList\" #hourList [igxItemList]=\"'hourList'\">\n                <span [igxTimeItem]=\"hour\" #timeItem=\"timeItem\" aria-label=\"hour\"\n                    [attr.role]=\"timeItem.isSelectedTime ? 'spinbutton' : null\"\n                    [attr.aria-valuenow]=\"timeItem.isSelectedTime ? timeItem.hourValue : null\"\n                    [attr.aria-valuemin]=\"timeItem.isSelectedTime ? timeItem.minValue : null\"\n                    [attr.aria-valuemax]=\"timeItem.isSelectedTime ? timeItem.maxValue : null\"\n                    *ngFor=\"let hour of hourItems | timeItemPipe:'hour':this.selectedDate:this.minDropdownValue:this.maxDropdownValue\">{{ hour }}</span>\n            </div>\n            <div *ngIf=\"this.showMinutesList\" #minuteList [igxItemList]=\"'minuteList'\">\n                <span [igxTimeItem]=\"minute\" #timeItem=\"timeItem\" aria-label=\"minutes\"\n                    [attr.role]=\"timeItem.isSelectedTime ? 'spinbutton' : null\"\n                    [attr.aria-valuenow]=\"timeItem.isSelectedTime ? minute : null\"\n                    [attr.aria-valuemin]=\"timeItem.isSelectedTime ? timeItem.minValue : null\"\n                    [attr.aria-valuemax]=\"timeItem.isSelectedTime ? timeItem.maxValue : null\"\n                    *ngFor=\"let minute of minuteItems | timeItemPipe:'minutes':this.selectedDate:this.minDropdownValue:this.maxDropdownValue\">{{ minute }}</span>\n            </div>\n            <div *ngIf=\"this.showSecondsList\" #secondsList [igxItemList]=\"'secondsList'\">\n                <span [igxTimeItem]=\"seconds\" #timeItem=\"timeItem\" aria-label=\"seconds\"\n                    [attr.role]=\"timeItem.isSelectedTime ? 'spinbutton' : null\"\n                    [attr.aria-valuenow]=\"timeItem.isSelectedTime ? seconds : null\"\n                    [attr.aria-valuemin]=\"timeItem.isSelectedTime ? timeItem.minValue : null\"\n                    [attr.aria-valuemax]=\"timeItem.isSelectedTime ? timeItem.maxValue : null\"\n                    *ngFor=\"let seconds of secondsItems | timeItemPipe:'seconds':this.selectedDate:this.minDropdownValue:this.maxDropdownValue\">{{ seconds }}</span>\n            </div>\n            <div *ngIf=\"this.showAmPmList\" #ampmList [igxItemList]=\"'ampmList'\">\n                <span [igxTimeItem]=\"ampm\" #timeItem=\"timeItem\" aria-label=\"ampm\"\n                    [attr.role]=\"timeItem.isSelectedTime ? 'spinbutton' : null\"\n                    [attr.aria-valuenow]=\"timeItem.isSelectedTime ? ampm : null\"\n                    [attr.aria-valuemin]=\"timeItem.isSelectedTime ? timeItem.minValue : null\"\n                    [attr.aria-valuemax]=\"timeItem.isSelectedTime ? timeItem.maxValue : null\"\n                    *ngFor=\"let ampm of ampmItems | timeItemPipe:'ampm':this.selectedDate:this.minDropdownValue:this.maxDropdownValue\">{{ ampm }}</span>\n            </div>\n        </div>\n        <ng-container\n            *ngTemplateOutlet=\"timePickerActionsDirective ? timePickerActionsDirective.template : defaultTimePickerActions\">\n        </ng-container>\n    </div>\n</div>\n", styles: [":host{display:block}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DisplayDensityToken]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [IGX_INPUT_GROUP_TYPE]
                }] }, { type: i0.Injector }, { type: i1.PlatformUtil }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], displayFormat: [{
                type: Input
            }], inputFormat: [{
                type: Input
            }], mode: [{
                type: Input
            }], minValue: [{
                type: Input
            }], maxValue: [{
                type: Input
            }], spinLoop: [{
                type: Input
            }], formatter: [{
                type: Input
            }], headerOrientation: [{
                type: Input
            }], readOnly: [{
                type: Input
            }], selected: [{
                type: Output
            }], valueChange: [{
                type: Output
            }], validationFailed: [{
                type: Output
            }], hourList: [{
                type: ViewChild,
                args: ['hourList']
            }], minuteList: [{
                type: ViewChild,
                args: ['minuteList']
            }], secondsList: [{
                type: ViewChild,
                args: ['secondsList']
            }], ampmList: [{
                type: ViewChild,
                args: ['ampmList']
            }], clearComponents: [{
                type: ContentChildren,
                args: [IgxPickerClearComponent]
            }], label: [{
                type: ContentChild,
                args: [IgxLabelDirective]
            }], timePickerActionsDirective: [{
                type: ContentChild,
                args: [IgxPickerActionsDirective]
            }], inputDirective: [{
                type: ViewChild,
                args: [IgxInputDirective, { read: IgxInputDirective }]
            }], _inputGroup: [{
                type: ViewChild,
                args: [IgxInputGroupComponent]
            }], dateTimeEditor: [{
                type: ViewChild,
                args: [IgxDateTimeEditorDirective, { static: true }]
            }], toggleRef: [{
                type: ViewChild,
                args: [IgxToggleDirective]
            }], value: [{
                type: Input
            }], resourceStrings: [{
                type: Input
            }], okButtonLabel: [{
                type: Input
            }], cancelButtonLabel: [{
                type: Input
            }], itemsDelta: [{
                type: Input
            }], onKeyDown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,