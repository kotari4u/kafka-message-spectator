import { Component, ContentChild, Directive, EventEmitter, Host, HostBinding, Inject, Input, Optional, Output, forwardRef } from '@angular/core';
import { CurrentResourceStrings } from '../core/i18n/resources';
import { DisplayDensityToken, DisplayDensityBase, DisplayDensity } from '../core/density';
import { IgxSelectItemComponent } from '../select/select-item.component';
import { IgxLabelDirective } from '../directives/label/label.directive';
import { FormsModule } from '@angular/forms';
import { IgxSelectComponent } from '../select/select.component';
import { IgxIconComponent } from '../icon/icon.component';
import { IgxRippleDirective } from '../directives/ripple/ripple.directive';
import { IgxButtonDirective } from '../directives/button/button.directive';
import { NgIf, NgFor } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export class IgxPaginatorContentDirective {
    constructor() {
        /**
         * @internal
         * @hidden
         */
        this.cssClass = 'igx-paginator-content';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxPaginatorContentDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.2", type: IgxPaginatorContentDirective, isStandalone: true, selector: "[igxPaginatorContent],igx-paginator-content", host: { properties: { "class.igx-paginator-content": "this.cssClass" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxPaginatorContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxPaginatorContent],igx-paginator-content',
                    standalone: true
                }]
        }], propDecorators: { cssClass: [{
                type: HostBinding,
                args: ['class.igx-paginator-content']
            }] } });
export class IgxPaginatorComponent extends DisplayDensityBase {
    get classCosy() {
        return this.displayDensity === DisplayDensity.cosy;
    }
    get classCompact() {
        return this.displayDensity === DisplayDensity.compact;
    }
    get classComfortable() {
        return this.displayDensity === DisplayDensity.comfortable;
    }
    /**
     * An @Input property, sets current page of the `IgxPaginatorComponent`.
     * The default is 0.
     * ```typescript
     * let page = this.paginator.page;
     * ```
     *
     * @memberof IgxPaginatorComponent
     */
    get page() {
        return this._page;
    }
    set page(value) {
        if (this._page === value || value < 0 || value > this.totalPages) {
            return;
        }
        const cancelEventArgs = { current: this._page, next: value, cancel: false };
        const eventArgs = { previous: this._page, current: value };
        this.paging.emit(cancelEventArgs);
        if (cancelEventArgs.cancel) {
            return;
        }
        this._page = value;
        this.pageChange.emit(this._page);
        this.pagingDone.emit(eventArgs);
    }
    /**
     * An @Input property, sets number of visible items per page in the `IgxPaginatorComponent`.
     * The default is 15.
     * ```typescript
     * let itemsPerPage = this.paginator.perPage;
     * ```
     *
     * @memberof IgxPaginatorComponent
     */
    get perPage() {
        return this._perPage;
    }
    set perPage(value) {
        if (value < 0 || this.perPage === value) {
            return;
        }
        this._perPage = Number(value);
        this.perPageChange.emit(this._perPage);
        this._selectOptions = this.sortUniqueOptions(this.defaultSelectValues, this._perPage);
        this.totalPages = Math.ceil(this.totalRecords / this._perPage);
        if (this.totalPages !== 0 && this.page >= this.totalPages) {
            this.page = this.totalPages - 1;
        }
    }
    /**
     * An @Input property that sets the total records.
     * ```typescript
     * let totalRecords = this.paginator.totalRecords;
     * ```
     *
     * @memberof IgxPaginatorComponent
     */
    get totalRecords() {
        return this._totalRecords;
    }
    set totalRecords(value) {
        this._totalRecords = value;
        this.totalPages = Math.ceil(this.totalRecords / this.perPage);
        if (this.page > this.totalPages) {
            this.page = 0;
        }
        this.cdr.detectChanges();
    }
    /**
     * An @Input property that sets custom options in the select of the paginator
     * ```typescript
     * let options = this.paginator.selectOptions;
     * ```
     *
     * @memberof IgxPaginatorComponent
     */
    get selectOptions() {
        return this._selectOptions;
    }
    set selectOptions(value) {
        this._selectOptions = this.sortUniqueOptions(value, this._perPage);
        this.defaultSelectValues = [...value];
    }
    /**
     * An @Input property that sets custom OverlaySettings.
     * ```html
     * <igx-paginator [overlaySettings] = "customOverlaySettings"></igx-paginator>
     * ```
     */
    get overlaySettings() {
        return this._overlaySettings;
    }
    set overlaySettings(value) {
        this._overlaySettings = Object.assign({}, this._overlaySettings, value);
    }
    /**
     * An accessor that sets the resource strings.
     * By default it uses EN resources.
     */
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    /**
     * An accessor that returns the resource strings.
     */
    get resourceStrings() {
        return this._resourceStrings;
    }
    constructor(_displayDensityOptions, elementRef, cdr) {
        super(_displayDensityOptions);
        this._displayDensityOptions = _displayDensityOptions;
        this.elementRef = elementRef;
        this.cdr = cdr;
        /**
         * Emitted when `perPage` property value of the paginator is changed.
         *
         * @example
         * ```html
         * <igx-paginator (perPageChange)="onPerPageChange($event)"></igx-paginator>
         * ```
         * ```typescript
         * public onPerPageChange(perPage: number) {
         *   this.perPage = perPage;
         * }
         * ```
         */
        this.perPageChange = new EventEmitter();
        /**
         * Emitted after the current page is changed.
         *
         * @example
         * ```html
         * <igx-paginator (pageChange)="onPageChange($event)"></igx-paginator>
         * ```
         * ```typescript
         * public onPageChange(page: number) {
         *   this.currentPage = page;
         * }
         * ```
         */
        this.pageChange = new EventEmitter();
        /**
         * Emitted before paging is performed.
         *
         * @remarks
         * Returns an object consisting of the current and next pages.
         * @example
         * ```html
         * <igx-paginator (paging)="pagingHandler($event)"></igx-paginator>
         * ```
         */
        this.paging = new EventEmitter();
        /**
         * Emitted after paging is performed.
         *
         * @remarks
         * Returns an object consisting of the previous and current pages.
         * @example
         * ```html
         * <igx-paginator (pagingDone)="pagingDone($event)"></igx-paginator>
         * ```
         */
        this.pagingDone = new EventEmitter();
        this._page = 0;
        this._selectOptions = [5, 10, 15, 25, 50, 100, 500];
        this._perPage = 15;
        this._resourceStrings = CurrentResourceStrings.PaginatorResStrings;
        this._overlaySettings = {};
        this.defaultSelectValues = [5, 10, 15, 25, 50, 100, 500];
    }
    /**
     * Returns if the current page is the last page.
     * ```typescript
     * const lastPage = this.paginator.isLastPage;
     * ```
     */
    get isLastPage() {
        return this.page + 1 >= this.totalPages;
    }
    /**
     * Returns if the current page is the first page.
     * ```typescript
     * const lastPage = this.paginator.isFirstPage;
     * ```
     */
    get isFirstPage() {
        return this.page === 0;
    }
    /**
     * Returns if the first pager buttons should be disabled
     */
    get isFirstPageDisabled() {
        return this.isFirstPage;
    }
    /**
     * Returns if the last pager buttons should be disabled
     */
    get isLastPageDisabled() {
        return this.isLastPage;
    }
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * Sets DisplayDensity for the <select> inside the paginator
     *
     * @hidden
     */
    get paginatorSelectDisplayDensity() {
        return DisplayDensity.compact;
    }
    /**
     * Goes to the next page of the `IgxPaginatorComponent`, if the paginator is not already at the last page.
     * ```typescript
     * this.paginator.nextPage();
     * ```
     *
     * @memberof IgxPaginatorComponent
     */
    nextPage() {
        if (!this.isLastPage) {
            this.page += 1;
        }
    }
    /**
     * Goes to the previous page of the `IgxPaginatorComponent`, if the paginator is not already at the first page.
     * ```typescript
     * this.paginator.previousPage();
     * ```
     *
     * @memberof IgxPaginatorComponent
     */
    previousPage() {
        if (!this.isFirstPage) {
            this.page -= 1;
        }
    }
    /**
     * Goes to the desired page index.
     * ```typescript
     * this.paginator.paginate(1);
     * ```
     *
     * @param val
     * @memberof IgxPaginatorComponent
     */
    paginate(val) {
        if (val < 0 || val > this.totalPages - 1) {
            return;
        }
        this.page = val;
    }
    sortUniqueOptions(values, newOption) {
        return Array.from(new Set([...values, newOption])).sort((a, b) => a - b);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxPaginatorComponent, deps: [{ token: DisplayDensityToken, optional: true }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxPaginatorComponent, isStandalone: true, selector: "igx-paginator", inputs: { page: "page", perPage: "perPage", totalRecords: "totalRecords", selectOptions: "selectOptions", overlaySettings: "overlaySettings", resourceStrings: "resourceStrings" }, outputs: { perPageChange: "perPageChange", pageChange: "pageChange", paging: "paging", pagingDone: "pagingDone" }, host: { properties: { "class.igx-paginator--cosy": "this.classCosy", "class.igx-paginator--compact": "this.classCompact", "class.igx-paginator": "this.classComfortable" } }, queries: [{ propertyName: "customContent", first: true, predicate: IgxPaginatorContentDirective, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-content select=\"[igxPaginatorContent],igx-paginator-content\"></ng-content>\n\n<igx-page-size *ngIf=\"!customContent\"></igx-page-size>\n<igx-page-nav *ngIf=\"!customContent\"></igx-page-nav>\n", dependencies: [{ kind: "directive", type: i0.forwardRef(function () { return NgIf; }), selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i0.forwardRef(function () { return IgxPageSizeSelectorComponent; }), selector: "igx-page-size" }, { kind: "component", type: i0.forwardRef(function () { return IgxPageNavigationComponent; }), selector: "igx-page-nav", inputs: ["role"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxPaginatorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-paginator', standalone: true, imports: [NgIf, forwardRef(() => IgxPageSizeSelectorComponent), forwardRef(() => IgxPageNavigationComponent)], template: "<ng-content select=\"[igxPaginatorContent],igx-paginator-content\"></ng-content>\n\n<igx-page-size *ngIf=\"!customContent\"></igx-page-size>\n<igx-page-nav *ngIf=\"!customContent\"></igx-page-nav>\n" }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DisplayDensityToken]
                }] }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { customContent: [{
                type: ContentChild,
                args: [IgxPaginatorContentDirective]
            }], perPageChange: [{
                type: Output
            }], pageChange: [{
                type: Output
            }], paging: [{
                type: Output
            }], pagingDone: [{
                type: Output
            }], classCosy: [{
                type: HostBinding,
                args: ['class.igx-paginator--cosy']
            }], classCompact: [{
                type: HostBinding,
                args: ['class.igx-paginator--compact']
            }], classComfortable: [{
                type: HostBinding,
                args: ['class.igx-paginator']
            }], page: [{
                type: Input
            }], perPage: [{
                type: Input
            }], totalRecords: [{
                type: Input
            }], selectOptions: [{
                type: Input
            }], overlaySettings: [{
                type: Input
            }], resourceStrings: [{
                type: Input
            }] } });
export class IgxPageSizeSelectorComponent {
    constructor(paginator) {
        this.paginator = paginator;
        /**
         * @internal
         * @hidden
         */
        this.cssClass = 'igx-page-size';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxPageSizeSelectorComponent, deps: [{ token: IgxPaginatorComponent, host: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxPageSizeSelectorComponent, isStandalone: true, selector: "igx-page-size", host: { properties: { "class.igx-page-size": "this.cssClass" } }, ngImport: i0, template: "<label class=\"igx-page-size__label\">{{ paginator.resourceStrings.igx_paginator_label }}</label>\n<div class=\"igx-page-size__select\">\n    <igx-select [overlaySettings]=\"paginator.overlaySettings\" [(ngModel)]=\"paginator.perPage\"\n        [displayDensity]=\"paginator.paginatorSelectDisplayDensity\" type=\"border\">\n        <igx-select-item [value]=\"val\" *ngFor=\"let val of paginator.selectOptions\">\n            {{ val }}\n        </igx-select-item>\n    </igx-select>\n</div>\n", dependencies: [{ kind: "component", type: IgxSelectComponent, selector: "igx-select", inputs: ["placeholder", "disabled", "overlaySettings", "value", "type"], outputs: ["opening", "opened", "closing", "closed"] }, { kind: "ngmodule", type: FormsModule }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: IgxSelectItemComponent, selector: "igx-select-item", inputs: ["text"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxPageSizeSelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-page-size', standalone: true, imports: [IgxSelectComponent, FormsModule, IgxLabelDirective, NgFor, IgxSelectItemComponent], template: "<label class=\"igx-page-size__label\">{{ paginator.resourceStrings.igx_paginator_label }}</label>\n<div class=\"igx-page-size__select\">\n    <igx-select [overlaySettings]=\"paginator.overlaySettings\" [(ngModel)]=\"paginator.perPage\"\n        [displayDensity]=\"paginator.paginatorSelectDisplayDensity\" type=\"border\">\n        <igx-select-item [value]=\"val\" *ngFor=\"let val of paginator.selectOptions\">\n            {{ val }}\n        </igx-select-item>\n    </igx-select>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: IgxPaginatorComponent, decorators: [{
                    type: Host
                }] }]; }, propDecorators: { cssClass: [{
                type: HostBinding,
                args: ['class.igx-page-size']
            }] } });
export class IgxPageNavigationComponent {
    constructor(paginator) {
        this.paginator = paginator;
        /**
         * @internal
         * @hidden
         */
        this.cssClass = 'igx-page-nav';
        /**
         * An @Input property that sets the `role` attribute of the element.
         */
        this.role = 'navigation';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxPageNavigationComponent, deps: [{ token: IgxPaginatorComponent, host: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxPageNavigationComponent, isStandalone: true, selector: "igx-page-nav", inputs: { role: "role" }, host: { properties: { "class.igx-page-nav": "this.cssClass", "attr.role": "this.role" } }, ngImport: i0, template: "<button\n    [title]=\"paginator.resourceStrings.igx_paginator_first_page_button_text\"\n    [disabled]=\"paginator.isFirstPageDisabled\"\n    [attr.aria-disabled]=\"paginator.isFirstPageDisabled\"\n    (click)=\"paginator.paginate(0)\"\n    igxButton=\"icon\"\n    igxRipple\n    [igxRippleCentered]=\"true\"\n    type=\"button\"\n>\n    <igx-icon>first_page</igx-icon>\n</button>\n<button\n    [title]=\"paginator.resourceStrings.igx_paginator_previous_page_button_text\"\n    [disabled]=\"paginator.isFirstPageDisabled\"\n    [attr.aria-disabled]=\"paginator.isFirstPageDisabled\"\n    (click)=\"paginator.previousPage()\"\n    igxButton=\"icon\"\n    igxRipple\n    [igxRippleCentered]=\"true\"\n    type=\"button\"\n>\n    <igx-icon>chevron_left</igx-icon>\n</button>\n<div class=\"igx-page-nav__text\" aria-current=\"page\">\n    <span>{{ paginator.page + 1 }}</span>\n    <span\n        >&nbsp;{{\n            paginator.resourceStrings.igx_paginator_pager_text\n        }}&nbsp;</span\n    >\n    <span>{{ paginator.totalPages || 1 }}</span>\n</div>\n<button\n    [title]=\"paginator.resourceStrings.igx_paginator_next_page_button_text\"\n    [disabled]=\"paginator.isLastPageDisabled\"\n    [attr.aria-disabled]=\"paginator.isLastPageDisabled\"\n    (click)=\"paginator.nextPage()\"\n    igxRipple\n    [igxRippleCentered]=\"true\"\n    igxButton=\"icon\"\n    type=\"button\"\n>\n    <igx-icon>chevron_right</igx-icon>\n</button>\n<button\n    [title]=\"paginator.resourceStrings.igx_paginator_last_page_button_text\"\n    [disabled]=\"paginator.isLastPageDisabled\"\n    [attr.aria-disabled]=\"paginator.isLastPageDisabled\"\n    (click)=\"paginator.paginate(paginator.totalPages - 1)\"\n    igxButton=\"icon\"\n    igxRipple\n    [igxRippleCentered]=\"true\"\n    type=\"button\"\n>\n    <igx-icon>last_page</igx-icon>\n</button>\n\n", dependencies: [{ kind: "directive", type: IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxButtonColor", "igxButtonBackground", "igxLabel", "disabled"], outputs: ["buttonClick", "buttonSelected"] }, { kind: "directive", type: IgxRippleDirective, selector: "[igxRipple]", inputs: ["igxRippleTarget", "igxRipple", "igxRippleDuration", "igxRippleCentered", "igxRippleDisabled"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxPageNavigationComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-page-nav', standalone: true, imports: [IgxButtonDirective, IgxRippleDirective, IgxIconComponent], template: "<button\n    [title]=\"paginator.resourceStrings.igx_paginator_first_page_button_text\"\n    [disabled]=\"paginator.isFirstPageDisabled\"\n    [attr.aria-disabled]=\"paginator.isFirstPageDisabled\"\n    (click)=\"paginator.paginate(0)\"\n    igxButton=\"icon\"\n    igxRipple\n    [igxRippleCentered]=\"true\"\n    type=\"button\"\n>\n    <igx-icon>first_page</igx-icon>\n</button>\n<button\n    [title]=\"paginator.resourceStrings.igx_paginator_previous_page_button_text\"\n    [disabled]=\"paginator.isFirstPageDisabled\"\n    [attr.aria-disabled]=\"paginator.isFirstPageDisabled\"\n    (click)=\"paginator.previousPage()\"\n    igxButton=\"icon\"\n    igxRipple\n    [igxRippleCentered]=\"true\"\n    type=\"button\"\n>\n    <igx-icon>chevron_left</igx-icon>\n</button>\n<div class=\"igx-page-nav__text\" aria-current=\"page\">\n    <span>{{ paginator.page + 1 }}</span>\n    <span\n        >&nbsp;{{\n            paginator.resourceStrings.igx_paginator_pager_text\n        }}&nbsp;</span\n    >\n    <span>{{ paginator.totalPages || 1 }}</span>\n</div>\n<button\n    [title]=\"paginator.resourceStrings.igx_paginator_next_page_button_text\"\n    [disabled]=\"paginator.isLastPageDisabled\"\n    [attr.aria-disabled]=\"paginator.isLastPageDisabled\"\n    (click)=\"paginator.nextPage()\"\n    igxRipple\n    [igxRippleCentered]=\"true\"\n    igxButton=\"icon\"\n    type=\"button\"\n>\n    <igx-icon>chevron_right</igx-icon>\n</button>\n<button\n    [title]=\"paginator.resourceStrings.igx_paginator_last_page_button_text\"\n    [disabled]=\"paginator.isLastPageDisabled\"\n    [attr.aria-disabled]=\"paginator.isLastPageDisabled\"\n    (click)=\"paginator.paginate(paginator.totalPages - 1)\"\n    igxButton=\"icon\"\n    igxRipple\n    [igxRippleCentered]=\"true\"\n    type=\"button\"\n>\n    <igx-icon>last_page</igx-icon>\n</button>\n\n" }]
        }], ctorParameters: function () { return [{ type: IgxPaginatorComponent, decorators: [{
                    type: Host
                }] }]; }, propDecorators: { cssClass: [{
                type: HostBinding,
                args: ['class.igx-page-nav']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }, {
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,