import { ContentChild, Directive, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { Direction } from '../carousel/carousel-base';
import { IgxTabHeaderBase, IgxTabContentBase } from './tabs.base';
import * as i0 from "@angular/core";
import * as i1 from "./tabs.base";
export class IgxTabItemDirective {
    /**
     * An @Input property which determines whether an item is selected.
     */
    get selected() {
        return this._selected;
    }
    set selected(value) {
        if (this._selected !== value) {
            this._selected = value;
            this.tabs.selectTab(this, this._selected);
            this.selectedChange.emit(this._selected);
        }
    }
    /** @hidden */
    constructor(tabs) {
        this.tabs = tabs;
        /**
         * Output to enable support for two-way binding on [(selected)]
         */
        this.selectedChange = new EventEmitter();
        /**
         * An @Input property that allows you to enable/disable the item.
         */
        this.disabled = false;
        /** @hidden */
        this.direction = Direction.NONE;
        this._selected = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxTabItemDirective, deps: [{ token: i1.IgxTabsBase }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.2", type: IgxTabItemDirective, inputs: { disabled: "disabled", selected: "selected" }, outputs: { selectedChange: "selectedChange" }, queries: [{ propertyName: "headerComponent", first: true, predicate: IgxTabHeaderBase, descendants: true }, { propertyName: "panelComponent", first: true, predicate: IgxTabContentBase, descendants: true }], viewQueries: [{ propertyName: "headerTemplate", first: true, predicate: ["headerTemplate"], descendants: true, static: true }, { propertyName: "panelTemplate", first: true, predicate: ["panelTemplate"], descendants: true, static: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxTabItemDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.IgxTabsBase }]; }, propDecorators: { headerComponent: [{
                type: ContentChild,
                args: [IgxTabHeaderBase]
            }], panelComponent: [{
                type: ContentChild,
                args: [IgxTabContentBase]
            }], headerTemplate: [{
                type: ViewChild,
                args: ['headerTemplate', { static: true }]
            }], panelTemplate: [{
                type: ViewChild,
                args: ['panelTemplate', { static: true }]
            }], selectedChange: [{
                type: Output
            }], disabled: [{
                type: Input
            }], selected: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWl0ZW0uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL3RhYnMvdGFiLWl0ZW0uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFlLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RyxPQUFPLEVBQUUsU0FBUyxFQUF5QixNQUFNLDJCQUEyQixDQUFDO0FBQzdFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBa0IsaUJBQWlCLEVBQWUsTUFBTSxhQUFhLENBQUM7OztBQUcvRixNQUFNLE9BQWdCLG1CQUFtQjtJQXFDckM7O09BRUc7SUFDSCxJQUNXLFFBQVE7UUFDZixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7SUFDMUIsQ0FBQztJQUVELElBQVcsUUFBUSxDQUFDLEtBQWM7UUFDOUIsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLEtBQUssRUFBRTtZQUMxQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUM1QztJQUNMLENBQUM7SUFFRCxjQUFjO0lBQ2QsWUFBb0IsSUFBaUI7UUFBakIsU0FBSSxHQUFKLElBQUksQ0FBYTtRQXBDckM7O1dBRUc7UUFFSSxtQkFBYyxHQUFHLElBQUksWUFBWSxFQUFXLENBQUM7UUFFcEQ7O1dBRUc7UUFFSSxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBRXhCLGNBQWM7UUFDUCxjQUFTLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQztRQUkxQixjQUFTLEdBQUcsS0FBSyxDQUFDO0lBb0IxQixDQUFDOzhHQXZEaUIsbUJBQW1CO2tHQUFuQixtQkFBbUIsOEtBR3ZCLGdCQUFnQixpRkFJaEIsaUJBQWlCOzsyRkFQYixtQkFBbUI7a0JBRHhDLFNBQVM7a0dBS0MsZUFBZTtzQkFEckIsWUFBWTt1QkFBQyxnQkFBZ0I7Z0JBS3ZCLGNBQWM7c0JBRHBCLFlBQVk7dUJBQUMsaUJBQWlCO2dCQUt4QixjQUFjO3NCQURwQixTQUFTO3VCQUFDLGdCQUFnQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFLdEMsYUFBYTtzQkFEbkIsU0FBUzt1QkFBQyxlQUFlLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFO2dCQU9yQyxjQUFjO3NCQURwQixNQUFNO2dCQU9BLFFBQVE7c0JBRGQsS0FBSztnQkFjSyxRQUFRO3NCQURsQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29udGVudENoaWxkLCBEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgVGVtcGxhdGVSZWYsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRGlyZWN0aW9uLCBJZ3hTbGlkZUNvbXBvbmVudEJhc2UgfSBmcm9tICcuLi9jYXJvdXNlbC9jYXJvdXNlbC1iYXNlJztcbmltcG9ydCB7IElneFRhYkhlYWRlckJhc2UsIElneFRhYkl0ZW1CYXNlLCBJZ3hUYWJDb250ZW50QmFzZSwgSWd4VGFic0Jhc2UgfSBmcm9tICcuL3RhYnMuYmFzZSc7XG5cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIElneFRhYkl0ZW1EaXJlY3RpdmUgaW1wbGVtZW50cyBJZ3hUYWJJdGVtQmFzZSwgSWd4U2xpZGVDb21wb25lbnRCYXNlIHtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQENvbnRlbnRDaGlsZChJZ3hUYWJIZWFkZXJCYXNlKVxuICAgIHB1YmxpYyBoZWFkZXJDb21wb25lbnQ6IElneFRhYkhlYWRlckJhc2U7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIEBDb250ZW50Q2hpbGQoSWd4VGFiQ29udGVudEJhc2UpXG4gICAgcHVibGljIHBhbmVsQ29tcG9uZW50OiBJZ3hUYWJDb250ZW50QmFzZTtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQFZpZXdDaGlsZCgnaGVhZGVyVGVtcGxhdGUnLCB7IHN0YXRpYzogdHJ1ZSB9KVxuICAgIHB1YmxpYyBoZWFkZXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcblxuICAgIC8qKiBAaGlkZGVuICovXG4gICAgQFZpZXdDaGlsZCgncGFuZWxUZW1wbGF0ZScsIHsgc3RhdGljOiB0cnVlIH0pXG4gICAgcHVibGljIHBhbmVsVGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XG5cbiAgICAvKipcbiAgICAgKiBPdXRwdXQgdG8gZW5hYmxlIHN1cHBvcnQgZm9yIHR3by13YXkgYmluZGluZyBvbiBbKHNlbGVjdGVkKV1cbiAgICAgKi9cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgc2VsZWN0ZWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGJvb2xlYW4+KCk7XG5cbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgdGhhdCBhbGxvd3MgeW91IHRvIGVuYWJsZS9kaXNhYmxlIHRoZSBpdGVtLlxuICAgICAqL1xuICAgIEBJbnB1dCgpXG4gICAgcHVibGljIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHB1YmxpYyBkaXJlY3Rpb24gPSBEaXJlY3Rpb24uTk9ORTtcbiAgICAvKiogQGhpZGRlbiAqL1xuICAgIHB1YmxpYyBwcmV2aW91czogYm9vbGVhbjtcblxuICAgIHByaXZhdGUgX3NlbGVjdGVkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBBbiBASW5wdXQgcHJvcGVydHkgd2hpY2ggZGV0ZXJtaW5lcyB3aGV0aGVyIGFuIGl0ZW0gaXMgc2VsZWN0ZWQuXG4gICAgICovXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgZ2V0IHNlbGVjdGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0ZWQ7XG4gICAgfVxuXG4gICAgcHVibGljIHNldCBzZWxlY3RlZCh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5fc2VsZWN0ZWQgIT09IHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy50YWJzLnNlbGVjdFRhYih0aGlzLCB0aGlzLl9zZWxlY3RlZCk7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkQ2hhbmdlLmVtaXQodGhpcy5fc2VsZWN0ZWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gKi9cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRhYnM6IElneFRhYnNCYXNlKSB7XG4gICAgfVxufVxuIl19