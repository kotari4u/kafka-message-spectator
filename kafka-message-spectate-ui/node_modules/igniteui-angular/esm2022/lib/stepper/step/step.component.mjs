import { Component, ContentChild, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, Output, ViewChild } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { Direction, HorizontalAnimationType } from '../../carousel/carousel-base';
import { ToggleAnimationPlayer } from '../../expansion-panel/toggle-animation-component';
import { IgxAngularAnimationService } from '../../services/animation/angular-animation-service';
import { IgxStepperOrientation, IgxStepType, IGX_STEPPER_COMPONENT, IGX_STEP_COMPONENT } from '../stepper.common';
import { IgxStepContentDirective, IgxStepIndicatorDirective } from '../stepper.directive';
import { IgxRippleDirective } from '../../directives/ripple/ripple.directive';
import { NgIf, NgClass, NgTemplateOutlet } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../../core/utils";
import * as i2 from "../stepper.service";
import * as i3 from "../../services/direction/directionality";
let NEXT_ID = 0;
/**
 * The IgxStepComponent is used within the `igx-stepper` element and it holds the content of each step.
 * It also supports custom indicators, title and subtitle.
 *
 * @igxModule IgxStepperModule
 *
 * @igxKeywords step
 *
 * @example
 * ```html
 *  <igx-stepper>
 *  ...
 *    <igx-step [active]="true" [completed]="true">
 *      ...
 *    </igx-step>
 *  ...
 *  </igx-stepper>
 * ```
 */
export class IgxStepComponent extends ToggleAnimationPlayer {
    /**
     * Get/Set whether the step is interactable.
     *
     * ```html
     * <igx-stepper>
     * ...
     *     <igx-step [disabled]="true"></igx-step>
     * ...
     * </igx-stepper>
     * ```
     *
     * ```typescript
     * this.stepper.steps[1].disabled = true;
     * ```
     */
    set disabled(value) {
        this._disabled = value;
        if (this.stepper.linear) {
            this.stepperService.calculateLinearDisabledSteps();
        }
    }
    get disabled() {
        return this._disabled;
    }
    /**
     * Get/Set whether the step is valid.
     *```html
     * <igx-step [isValid]="form.form.valid">
     *      ...
     *      <div igxStepContent>
     *          <form #form="ngForm">
     *              ...
     *          </form>
     *      </div>
     * </igx-step>
     * ```
     */
    get isValid() {
        return this._valid;
    }
    set isValid(value) {
        this._valid = value;
        if (this.stepper.linear && this.index !== undefined) {
            this.stepperService.calculateLinearDisabledSteps();
        }
    }
    /**
     * Get/Set the active state of the step
     *
     * ```html
     * <igx-step [active]="true"></igx-step>
     * ```
     *
     * ```typescript
     * this.stepper.steps[1].active = true;
     * ```
     *
     * @param value: boolean
     */
    set active(value) {
        if (value) {
            this.stepperService.expandThroughApi(this);
        }
        else {
            this.stepperService.collapse(this);
        }
    }
    get active() {
        return this.stepperService.activeStep === this;
    }
    /** @hidden @internal */
    set tabIndex(value) {
        this._tabIndex = value;
    }
    get tabIndex() {
        return this._tabIndex;
    }
    /** @hidden @internal */
    get contentId() {
        return this.content?.id;
    }
    /** @hidden @internal */
    get generalDisabled() {
        return this.disabled || this.linearDisabled;
    }
    /** @hidden @internal */
    get titlePositionTop() {
        if (this.stepper.stepType !== IgxStepType.Full) {
            return 'igx-stepper__step--simple';
        }
        return `igx-stepper__step--${this.titlePosition}`;
    }
    /**
     * Get the step index inside of the stepper.
     *
     * ```typescript
     * const step = this.stepper.steps[1];
     * const stepIndex: number = step.index;
     * ```
     */
    get index() {
        return this._index;
    }
    /** @hidden @internal */
    get indicatorTemplate() {
        if (this.active && this.stepper.activeIndicatorTemplate) {
            return this.stepper.activeIndicatorTemplate;
        }
        if (!this.isValid && this.stepper.invalidIndicatorTemplate) {
            return this.stepper.invalidIndicatorTemplate;
        }
        if (this.completed && this.stepper.completedIndicatorTemplate) {
            return this.stepper.completedIndicatorTemplate;
        }
        if (this.indicator) {
            return this.customIndicatorTemplate;
        }
        return null;
    }
    /** @hidden @internal */
    get direction() {
        return this.stepperService.previousActiveStep
            && this.stepperService.previousActiveStep.index > this.index
            ? Direction.PREV
            : Direction.NEXT;
    }
    /** @hidden @internal */
    get isAccessible() {
        return !this.disabled && !this.linearDisabled;
    }
    /** @hidden @internal */
    get isHorizontal() {
        return this.stepper.orientation === IgxStepperOrientation.Horizontal;
    }
    /** @hidden @internal */
    get isTitleVisible() {
        return this.stepper.stepType !== IgxStepType.Indicator;
    }
    /** @hidden @internal */
    get isIndicatorVisible() {
        return this.stepper.stepType !== IgxStepType.Title;
    }
    /** @hidden @internal */
    get titlePosition() {
        return this.stepper.titlePosition ? this.stepper.titlePosition : this.stepper._defaultTitlePosition;
    }
    /** @hidden @internal */
    get linearDisabled() {
        return this.stepperService.linearDisabledSteps.has(this);
    }
    /** @hidden @internal */
    get collapsing() {
        return this.stepperService.collapsingSteps.has(this);
    }
    /** @hidden @internal */
    get animationSettings() {
        return this.stepper.verticalAnimationSettings;
    }
    /** @hidden @internal */
    get contentClasses() {
        if (this.isHorizontal) {
            return { 'igx-stepper__body-content': true, 'igx-stepper__body-content--active': this.active };
        }
        else {
            return 'igx-stepper__step-content';
        }
    }
    /** @hidden @internal */
    get stepHeaderClasses() {
        return {
            'igx-stepper__step--optional': this.optional,
            'igx-stepper__step-header--current': this.active,
            'igx-stepper__step-header--invalid': !this.isValid
                && this.stepperService.visitedSteps.has(this) && !this.active && this.isAccessible
        };
    }
    /** @hidden @internal */
    get nativeElement() {
        return this.element.nativeElement;
    }
    constructor(stepper, cdr, renderer, platform, stepperService, animationService, element, dir) {
        super(animationService);
        this.stepper = stepper;
        this.cdr = cdr;
        this.renderer = renderer;
        this.platform = platform;
        this.stepperService = stepperService;
        this.element = element;
        this.dir = dir;
        /**
         * Get/Set the `id` of the step component.
         * Default value is `"igx-step-0"`;
         * ```html
         * <igx-step id="my-first-step"></igx-step>
         * ```
         * ```typescript
         * const stepId = this.step.id;
         * ```
         */
        this.id = `igx-step-${NEXT_ID++}`;
        /**
         * Get/Set whether the step is completed.
         *
         * @remarks
         * When set to `true` the following separator is styled `solid`.
         *
         * ```html
         * <igx-stepper>
         * ...
         *     <igx-step [completed]="true"></igx-step>
         * ...
         * </igx-stepper>
         * ```
         *
         * ```typescript
         * this.stepper.steps[1].completed = true;
         * ```
         */
        this.completed = false;
        /**
         * Get/Set whether the step is optional.
         *
         * @remarks
         * Optional steps validity does not affect the default behavior when the stepper is in linear mode i.e.
         * if optional step is invalid the user could still move to the next step.
         *
         * ```html
         * <igx-step [optional]="true"></igx-step>
         * ```
         * ```typescript
         * this.stepper.steps[1].optional = true;
         * ```
         */
        this.optional = false;
        /** @hidden @internal **/
        this.role = 'tab';
        /** @hidden @internal */
        this.cssClass = true;
        /**
         * Emitted when the step's `active` property changes. Can be used for two-way binding.
         *
         * ```html
         * <igx-step [(active)]="this.isActive">
         * </igx-step>
         * ```
         *
         * ```typescript
         * const step: IgxStepComponent = this.stepper.step[0];
         * step.activeChange.subscribe((e: boolean) => console.log("Step active state change to ", e))
         * ```
         */
        this.activeChange = new EventEmitter();
        this._tabIndex = -1;
        this._valid = true;
        this._focused = false;
        this._disabled = false;
    }
    /** @hidden @internal */
    onFocus() {
        this._focused = true;
        this.stepperService.focusedStep = this;
        if (this.stepperService.focusedStep !== this.stepperService.activeStep) {
            this.stepperService.activeStep.tabIndex = -1;
        }
    }
    /** @hidden @internal */
    onBlur() {
        this._focused = false;
        this.stepperService.activeStep.tabIndex = 0;
    }
    /** @hidden @internal */
    handleKeydown(event) {
        if (!this._focused) {
            return;
        }
        const key = event.key;
        if (this.stepper.orientation === IgxStepperOrientation.Horizontal) {
            if (key === this.platform.KEYMAP.ARROW_UP || key === this.platform.KEYMAP.ARROW_DOWN) {
                return;
            }
        }
        if (!(this.platform.isNavigationKey(key) || this.platform.isActivationKey(event))) {
            return;
        }
        event.preventDefault();
        this.handleNavigation(key);
    }
    /** @hidden @internal */
    ngAfterViewInit() {
        this.openAnimationDone.pipe(takeUntil(this.destroy$)).subscribe(() => {
            if (this.stepperService.activeStep === this) {
                this.stepper.activeStepChanged.emit({ owner: this.stepper, index: this.index });
            }
        });
        this.closeAnimationDone.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.stepperService.collapse(this);
            this.cdr.markForCheck();
        });
    }
    /** @hidden @internal */
    onPointerDown(event) {
        event.stopPropagation();
        if (this.isHorizontal) {
            this.changeHorizontalActiveStep();
        }
        else {
            this.changeVerticalActiveStep();
        }
    }
    /** @hidden @internal */
    handleNavigation(key) {
        switch (key) {
            case this.platform.KEYMAP.HOME:
                this.stepper.steps.filter(s => s.isAccessible)[0]?.nativeElement.focus();
                break;
            case this.platform.KEYMAP.END:
                this.stepper.steps.filter(s => s.isAccessible).pop()?.nativeElement.focus();
                break;
            case this.platform.KEYMAP.ARROW_UP:
                this.previousStep?.nativeElement.focus();
                break;
            case this.platform.KEYMAP.ARROW_LEFT:
                if (this.dir.rtl && this.stepper.orientation === IgxStepperOrientation.Horizontal) {
                    this.nextStep?.nativeElement.focus();
                }
                else {
                    this.previousStep?.nativeElement.focus();
                }
                break;
            case this.platform.KEYMAP.ARROW_DOWN:
                this.nextStep?.nativeElement.focus();
                break;
            case this.platform.KEYMAP.ARROW_RIGHT:
                if (this.dir.rtl && this.stepper.orientation === IgxStepperOrientation.Horizontal) {
                    this.previousStep?.nativeElement.focus();
                }
                else {
                    this.nextStep?.nativeElement.focus();
                }
                break;
            case this.platform.KEYMAP.SPACE:
            case this.platform.KEYMAP.ENTER:
                if (this.isHorizontal) {
                    this.changeHorizontalActiveStep();
                }
                else {
                    this.changeVerticalActiveStep();
                }
                break;
            default:
                return;
        }
    }
    /** @hidden @internal */
    changeHorizontalActiveStep() {
        if (this.stepper.animationType === HorizontalAnimationType.none && this.stepperService.activeStep !== this) {
            const argsCanceled = this.stepperService.emitActivatingEvent(this);
            if (argsCanceled) {
                return;
            }
            this.active = true;
            this.stepper.activeStepChanged.emit({ owner: this.stepper, index: this.index });
            return;
        }
        this.stepperService.expand(this);
        if (this.stepper.animationType === HorizontalAnimationType.fade) {
            if (this.stepperService.collapsingSteps.has(this.stepperService.previousActiveStep)) {
                this.stepperService.previousActiveStep.active = false;
            }
        }
    }
    get nextStep() {
        const focusedStep = this.stepperService.focusedStep;
        if (focusedStep) {
            if (focusedStep.index === this.stepper.steps.length - 1) {
                return this.stepper.steps.find(s => s.isAccessible);
            }
            const nextAccessible = this.stepper.steps.find((s, i) => i > focusedStep.index && s.isAccessible);
            return nextAccessible ? nextAccessible : this.stepper.steps.find(s => s.isAccessible);
        }
        return null;
    }
    get previousStep() {
        const focusedStep = this.stepperService.focusedStep;
        if (focusedStep) {
            if (focusedStep.index === 0) {
                return this.stepper.steps.filter(s => s.isAccessible).pop();
            }
            let prevStep;
            for (let i = focusedStep.index - 1; i >= 0; i--) {
                const step = this.stepper.steps[i];
                if (step.isAccessible) {
                    prevStep = step;
                    break;
                }
            }
            return prevStep ? prevStep : this.stepper.steps.filter(s => s.isAccessible).pop();
        }
        return null;
    }
    changeVerticalActiveStep() {
        this.stepperService.expand(this);
        if (!this.animationSettings.closeAnimation) {
            this.stepperService.previousActiveStep.openAnimationPlayer?.finish();
        }
        if (!this.animationSettings.openAnimation) {
            this.stepperService.activeStep.closeAnimationPlayer?.finish();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxStepComponent, deps: [{ token: IGX_STEPPER_COMPONENT }, { token: i0.ChangeDetectorRef }, { token: i0.Renderer2 }, { token: i1.PlatformUtil }, { token: i2.IgxStepperService }, { token: IgxAngularAnimationService }, { token: i0.ElementRef }, { token: i3.IgxDirectionality }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxStepComponent, isStandalone: true, selector: "igx-step", inputs: { id: "id", disabled: "disabled", completed: "completed", isValid: "isValid", optional: "optional", active: "active", tabIndex: "tabIndex" }, outputs: { activeChange: "activeChange" }, host: { listeners: { "focus": "onFocus()", "blur": "onBlur()", "keydown": "handleKeydown($event)" }, properties: { "attr.id": "this.id", "class.igx-stepper__step--completed": "this.completed", "attr.aria-selected": "this.active", "attr.tabindex": "this.tabIndex", "attr.role": "this.role", "attr.aria-controls": "this.contentId", "class.igx-stepper__step": "this.cssClass", "class.igx-stepper__step--disabled": "this.generalDisabled", "class": "this.titlePositionTop" } }, providers: [
            { provide: IGX_STEP_COMPONENT, useExisting: IgxStepComponent }
        ], queries: [{ propertyName: "indicator", first: true, predicate: i0.forwardRef(function () { return IgxStepIndicatorDirective; }), descendants: true }, { propertyName: "content", first: true, predicate: i0.forwardRef(function () { return IgxStepContentDirective; }), descendants: true }], viewQueries: [{ propertyName: "contentTemplate", first: true, predicate: ["contentTemplate"], descendants: true, static: true }, { propertyName: "customIndicatorTemplate", first: true, predicate: ["customIndicator"], descendants: true, static: true }, { propertyName: "contentContainer", first: true, predicate: ["contentContainer"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #defaultTitle>\n    <ng-content *ngIf=\"isTitleVisible\" select='[igxStepTitle]'></ng-content>\n    <ng-content *ngIf=\"isTitleVisible\" select='[igxStepSubTitle]'></ng-content>\n</ng-template>\n\n<ng-template #contentTemplate>\n    <div [ngClass]=\"contentClasses\" #contentContainer>\n        <ng-content *ngIf=\"active || collapsing\" select='[igxStepContent]'></ng-content>\n    </div>\n</ng-template>\n\n<ng-template #defaultIndicator>\n    <span>{{ index + 1 }}</span>\n</ng-template>\n\n<ng-template #customIndicator>\n    <ng-content select='[igxStepIndicator]'></ng-content>\n</ng-template>\n\n<div class=\"igx-stepper__step-header\" igxRipple [ngClass]=\"stepHeaderClasses\" (keydown)=\"handleKeydown($event)\"\n    (click)=\"onPointerDown($event)\">\n\n    <div *ngIf=\"isIndicatorVisible\" class=\"igx-stepper__step-indicator\">\n        <ng-container *ngTemplateOutlet=\"indicatorTemplate ? indicatorTemplate : defaultIndicator\"></ng-container>\n    </div>\n\n    <div class=\"igx-stepper__step-title-wrapper\">\n        <ng-container *ngTemplateOutlet=\"defaultTitle\"></ng-container>\n    </div>\n</div>\n\n<ng-container *ngIf=\"!isHorizontal\">\n    <div class=\"igx-stepper__step-content-wrapper\">\n        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </div>\n</ng-container>\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: IgxRippleDirective, selector: "[igxRipple]", inputs: ["igxRippleTarget", "igxRipple", "igxRippleDuration", "igxRippleCentered", "igxRippleDisabled"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxStepComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-step', providers: [
                        { provide: IGX_STEP_COMPONENT, useExisting: IgxStepComponent }
                    ], standalone: true, imports: [NgIf, NgClass, IgxRippleDirective, NgTemplateOutlet], template: "<ng-template #defaultTitle>\n    <ng-content *ngIf=\"isTitleVisible\" select='[igxStepTitle]'></ng-content>\n    <ng-content *ngIf=\"isTitleVisible\" select='[igxStepSubTitle]'></ng-content>\n</ng-template>\n\n<ng-template #contentTemplate>\n    <div [ngClass]=\"contentClasses\" #contentContainer>\n        <ng-content *ngIf=\"active || collapsing\" select='[igxStepContent]'></ng-content>\n    </div>\n</ng-template>\n\n<ng-template #defaultIndicator>\n    <span>{{ index + 1 }}</span>\n</ng-template>\n\n<ng-template #customIndicator>\n    <ng-content select='[igxStepIndicator]'></ng-content>\n</ng-template>\n\n<div class=\"igx-stepper__step-header\" igxRipple [ngClass]=\"stepHeaderClasses\" (keydown)=\"handleKeydown($event)\"\n    (click)=\"onPointerDown($event)\">\n\n    <div *ngIf=\"isIndicatorVisible\" class=\"igx-stepper__step-indicator\">\n        <ng-container *ngTemplateOutlet=\"indicatorTemplate ? indicatorTemplate : defaultIndicator\"></ng-container>\n    </div>\n\n    <div class=\"igx-stepper__step-title-wrapper\">\n        <ng-container *ngTemplateOutlet=\"defaultTitle\"></ng-container>\n    </div>\n</div>\n\n<ng-container *ngIf=\"!isHorizontal\">\n    <div class=\"igx-stepper__step-content-wrapper\">\n        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n    </div>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_STEPPER_COMPONENT]
                }] }, { type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i1.PlatformUtil }, { type: i2.IgxStepperService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [IgxAngularAnimationService]
                }] }, { type: i0.ElementRef }, { type: i3.IgxDirectionality }]; }, propDecorators: { id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], disabled: [{
                type: Input
            }], completed: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.igx-stepper__step--completed']
            }], isValid: [{
                type: Input
            }], optional: [{
                type: Input
            }], active: [{
                type: HostBinding,
                args: ['attr.aria-selected']
            }, {
                type: Input
            }], tabIndex: [{
                type: HostBinding,
                args: ['attr.tabindex']
            }, {
                type: Input
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], contentId: [{
                type: HostBinding,
                args: ['attr.aria-controls']
            }], cssClass: [{
                type: HostBinding,
                args: ['class.igx-stepper__step']
            }], generalDisabled: [{
                type: HostBinding,
                args: ['class.igx-stepper__step--disabled']
            }], titlePositionTop: [{
                type: HostBinding,
                args: ['class']
            }], activeChange: [{
                type: Output
            }], contentTemplate: [{
                type: ViewChild,
                args: ['contentTemplate', { static: true }]
            }], customIndicatorTemplate: [{
                type: ViewChild,
                args: ['customIndicator', { static: true }]
            }], contentContainer: [{
                type: ViewChild,
                args: ['contentContainer']
            }], indicator: [{
                type: ContentChild,
                args: [forwardRef(() => IgxStepIndicatorDirective)]
            }], content: [{
                type: ContentChild,
                args: [forwardRef(() => IgxStepContentDirective)]
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }], handleKeydown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,