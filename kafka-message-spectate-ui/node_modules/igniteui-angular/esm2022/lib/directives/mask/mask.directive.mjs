import { Directive, EventEmitter, HostListener, Output, Input, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { parseMask } from './mask-parsing.service';
import { noop } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./mask-parsing.service";
import * as i2 from "../../core/utils";
export class IgxMaskDirective {
    /**
     * Sets the input mask.
     * ```html
     * <input [igxMask] = "'00/00/0000'">
     * ```
     */
    get mask() {
        return this._mask || this.defaultMask;
    }
    set mask(val) {
        // B.P. 9th June 2021 #7490
        if (val !== this._mask) {
            const cleanInputValue = this.maskParser.parseValueFromMask(this.inputValue, this.maskOptions);
            this.setPlaceholder(val);
            this._mask = val;
            this.updateInputValue(cleanInputValue);
        }
    }
    /** @hidden */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /** @hidden @internal; */
    get inputValue() {
        return this.nativeElement.value;
    }
    /** @hidden @internal */
    set inputValue(val) {
        this.nativeElement.value = val;
    }
    /** @hidden */
    get maskOptions() {
        const format = this.mask || this.defaultMask;
        const promptChar = this.promptChar && this.promptChar.substring(0, 1);
        return { format, promptChar };
    }
    /** @hidden */
    get selectionStart() {
        // Edge(classic) and FF don't select text on drop
        return this.nativeElement.selectionStart === this.nativeElement.selectionEnd && this._hasDropAction ?
            this.nativeElement.selectionEnd - this._droppedData.length :
            this.nativeElement.selectionStart;
    }
    /** @hidden */
    get selectionEnd() {
        return this.nativeElement.selectionEnd;
    }
    /** @hidden */
    get start() {
        return this._start;
    }
    /** @hidden */
    get end() {
        return this._end;
    }
    constructor(elementRef, maskParser, renderer, platform) {
        this.elementRef = elementRef;
        this.maskParser = maskParser;
        this.renderer = renderer;
        this.platform = platform;
        /**
         * Sets the character representing a fillable spot in the input mask.
         * Default value is "'_'".
         * ```html
         * <input [promptChar] = "'/'">
         * ```
         */
        this.promptChar = '_';
        /**
         * Emits an event each time the value changes.
         * Provides `rawValue: string` and `formattedValue: string` as event arguments.
         * ```html
         * <input (valueChanged) = "valueChanged(rawValue: string, formattedValue: string)">
         * ```
         */
        this.valueChanged = new EventEmitter();
        this._end = 0;
        this._start = 0;
        this._oldText = '';
        this._dataValue = '';
        this._focused = false;
        this.defaultMask = 'CCCCCCCCCC';
        this._onTouchedCallback = noop;
        this._onChangeCallback = noop;
    }
    /** @hidden */
    onKeyDown(event) {
        const key = event.key;
        if (!key) {
            return;
        }
        if ((event.ctrlKey && (key === this.platform.KEYMAP.Z || key === this.platform.KEYMAP.Y))) {
            event.preventDefault();
        }
        this._key = key;
        this._start = this.selectionStart;
        this._end = this.selectionEnd;
    }
    /** @hidden @internal */
    onCompositionStart() {
        if (!this._composing) {
            this._compositionStartIndex = this._start;
            this._composing = true;
        }
    }
    /** @hidden @internal */
    onCompositionEnd() {
        this._start = this._compositionStartIndex;
        const end = this.selectionEnd;
        const valueToParse = this.inputValue.substring(this._start, end);
        this.updateInput(valueToParse);
        this._end = this.selectionEnd;
        this._compositionValue = this.inputValue;
    }
    /** @hidden @internal */
    onInputChanged(event) {
        /**
         * '!this._focused' is a fix for #8165
         * On page load IE triggers input events before focus events and
         * it does so for every single input on the page.
         * The mask needs to be prevented from doing anything while this is happening because
         * the end user will be unable to blur the input.
         * https://stackoverflow.com/questions/21406138/input-event-triggered-on-internet-explorer-when-placeholder-changed
         */
        if (this._composing) {
            if (this.inputValue.length < this._oldText.length) {
                // software keyboard input delete
                this._key = this.platform.KEYMAP.BACKSPACE;
            }
            return;
        }
        // After the compositionend event Chromium triggers input events of type 'deleteContentBackward' and
        // we need to adjust the start and end indexes to include mask literals
        if (event.inputType === 'deleteContentBackward' && this._key !== this.platform.KEYMAP.BACKSPACE) {
            const isInputComplete = this._compositionStartIndex === 0 && this._end === this.mask.length;
            let numberOfMaskLiterals = 0;
            const literalPos = parseMask(this.maskOptions.format).literals.keys();
            for (const index of literalPos) {
                if (index >= this._compositionStartIndex && index <= this._end) {
                    numberOfMaskLiterals++;
                }
            }
            this.inputValue = isInputComplete ?
                this.inputValue.substring(0, this.selectionEnd - numberOfMaskLiterals) + this.inputValue.substring(this.selectionEnd)
                : this._compositionValue?.substring(0, this._compositionStartIndex) || this.inputValue;
            if (this._compositionValue) {
                this._start = this.selectionStart;
                this._end = this.selectionEnd;
                this.nativeElement.selectionStart = isInputComplete ? this._start - numberOfMaskLiterals : this._compositionStartIndex;
                this.nativeElement.selectionEnd = this._end - numberOfMaskLiterals;
                this.nativeElement.selectionEnd = this._end;
                this._start = this.selectionStart;
                this._end = this.selectionEnd;
            }
        }
        if (this._hasDropAction) {
            this._start = this.selectionStart;
        }
        let valueToParse = '';
        switch (this._key) {
            case this.platform.KEYMAP.DELETE:
                this._end = this._start === this._end ? ++this._end : this._end;
                break;
            case this.platform.KEYMAP.BACKSPACE:
                this._start = this.selectionStart;
                break;
            default:
                valueToParse = this.inputValue.substring(this._start, this.selectionEnd);
                break;
        }
        this.updateInput(valueToParse);
    }
    /** @hidden */
    onPaste() {
        this._oldText = this.inputValue;
        this._start = this.selectionStart;
    }
    /** @hidden */
    onFocus() {
        if (this.nativeElement.readOnly) {
            return;
        }
        this._focused = true;
        this.showMask(this.inputValue);
    }
    /** @hidden */
    onBlur(value) {
        this._focused = false;
        this.showDisplayValue(value);
        this._onTouchedCallback();
    }
    /** @hidden */
    onDragEnter() {
        if (!this._focused && !this._dataValue) {
            this.showMask(this._dataValue);
        }
    }
    /** @hidden */
    onDragLeave() {
        if (!this._focused) {
            this.showDisplayValue(this.inputValue);
        }
    }
    /** @hidden */
    onDrop(event) {
        this._hasDropAction = true;
        this._droppedData = event.dataTransfer.getData('text');
    }
    /** @hidden */
    ngOnInit() {
        this.setPlaceholder(this.maskOptions.format);
    }
    /**
     * TODO: Remove after date/time picker integration refactor
     *
     * @hidden
     */
    ngAfterViewChecked() {
        if (this._composing) {
            return;
        }
        this._oldText = this.inputValue;
    }
    /** @hidden */
    writeValue(value) {
        if (this.promptChar && this.promptChar.length > 1) {
            this.maskOptions.promptChar = this.promptChar.substring(0, 1);
        }
        this.inputValue = value ? this.maskParser.applyMask(value, this.maskOptions) : '';
        if (this.displayValuePipe) {
            this.inputValue = this.displayValuePipe.transform(this.inputValue);
        }
        this._dataValue = this.includeLiterals ? this.inputValue : value;
        this.valueChanged.emit({ rawValue: value, formattedValue: this.inputValue });
    }
    /** @hidden */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /** @hidden */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /** @hidden */
    showMask(value) {
        if (this.focusedValuePipe) {
            // TODO(D.P.): focusedValuePipe should be deprecated or force-checked to match mask format
            this.inputValue = this.focusedValuePipe.transform(value);
        }
        else {
            this.inputValue = this.maskParser.applyMask(value, this.maskOptions);
        }
        this._oldText = this.inputValue;
    }
    /** @hidden */
    setSelectionRange(start, end = start) {
        this.nativeElement.setSelectionRange(start, end);
    }
    /** @hidden */
    afterInput() {
        this._oldText = this.inputValue;
        this._hasDropAction = false;
        this._start = 0;
        this._end = 0;
        this._key = null;
        this._composing = false;
    }
    /** @hidden */
    setPlaceholder(value) {
        const placeholder = this.nativeElement.placeholder;
        if (!placeholder || placeholder === this.mask) {
            this.renderer.setAttribute(this.nativeElement, 'placeholder', parseMask(value ?? '').mask || this.defaultMask);
        }
    }
    updateInputValue(value) {
        if (this._focused) {
            this.showMask(value);
        }
        else if (!this.displayValuePipe) {
            this.inputValue = this.inputValue ? this.maskParser.applyMask(value, this.maskOptions) : '';
        }
    }
    updateInput(valueToParse) {
        const replacedData = this.maskParser.replaceInMask(this._oldText, valueToParse, this.maskOptions, this._start, this._end);
        this.inputValue = replacedData.value;
        if (this._key === this.platform.KEYMAP.BACKSPACE) {
            replacedData.end = this._start;
        }
        this.setSelectionRange(replacedData.end);
        const rawVal = this.maskParser.parseValueFromMask(this.inputValue, this.maskOptions);
        this._dataValue = this.includeLiterals ? this.inputValue : rawVal;
        this._onChangeCallback(this._dataValue);
        this.valueChanged.emit({ rawValue: rawVal, formattedValue: this.inputValue });
        this.afterInput();
    }
    showDisplayValue(value) {
        if (this.displayValuePipe) {
            this.inputValue = this.displayValuePipe.transform(value);
        }
        else if (value === this.maskParser.applyMask(null, this.maskOptions)) {
            this.inputValue = '';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxMaskDirective, deps: [{ token: i0.ElementRef }, { token: i1.MaskParsingService }, { token: i0.Renderer2 }, { token: i2.PlatformUtil }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.2", type: IgxMaskDirective, isStandalone: true, selector: "[igxMask]", inputs: { mask: ["igxMask", "mask"], promptChar: "promptChar", includeLiterals: "includeLiterals", displayValuePipe: "displayValuePipe", focusedValuePipe: "focusedValuePipe" }, outputs: { valueChanged: "valueChanged" }, host: { listeners: { "keydown": "onKeyDown($event)", "compositionstart": "onCompositionStart()", "compositionend": "onCompositionEnd()", "input": "onInputChanged($event)", "paste": "onPaste()", "focus": "onFocus()", "blur": "onBlur($event.target.value)", "dragenter": "onDragEnter()", "dragleave": "onDragLeave()", "drop": "onDrop($event)" } }, providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }], exportAs: ["igxMask"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxMaskDirective, decorators: [{
            type: Directive,
            args: [{
                    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: IgxMaskDirective, multi: true }],
                    selector: '[igxMask]',
                    exportAs: 'igxMask',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.MaskParsingService }, { type: i0.Renderer2 }, { type: i2.PlatformUtil }]; }, propDecorators: { mask: [{
                type: Input,
                args: ['igxMask']
            }], promptChar: [{
                type: Input
            }], includeLiterals: [{
                type: Input
            }], displayValuePipe: [{
                type: Input
            }], focusedValuePipe: [{
                type: Input
            }], valueChanged: [{
                type: Output
            }], onKeyDown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], onCompositionStart: [{
                type: HostListener,
                args: ['compositionstart']
            }], onCompositionEnd: [{
                type: HostListener,
                args: ['compositionend']
            }], onInputChanged: [{
                type: HostListener,
                args: ['input', ['$event']]
            }], onPaste: [{
                type: HostListener,
                args: ['paste']
            }], onFocus: [{
                type: HostListener,
                args: ['focus']
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event.target.value']]
            }], onDragEnter: [{
                type: HostListener,
                args: ['dragenter']
            }], onDragLeave: [{
                type: HostListener,
                args: ['dragleave']
            }], onDrop: [{
                type: HostListener,
                args: ['drop', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,