import { Component, EventEmitter, HostBinding, Input, Output, ViewChild, HostListener, Self, Optional } from '@angular/core';
import { Validators } from '@angular/forms';
import { IgxRippleDirective } from '../directives/ripple/ripple.directive';
import { mkenum } from '../core/utils';
import { EDITOR_PROVIDER } from '../core/edit-provider';
import { noop, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export const SwitchLabelPosition = mkenum({
    BEFORE: 'before',
    AFTER: 'after'
});
let nextId = 0;
/**
 *
 * The Switch component is a binary choice selection component.
 *
 * @igxModule IgxSwitchModule
 *
 * @igxTheme igx-switch-theme, igx-tooltip-theme
 *
 * @igxKeywords switch, states, tooltip
 *
 * @igxGroup Data Entry & Display
 *
 * @remarks
 *
 * The Ignite UI Switch lets the user toggle between on/off or true/false states.
 *
 * @example
 * ```html
 * <igx-switch [checked]="true">
 *   Simple switch
 * </igx-switch>
 * ```
 */
export class IgxSwitchComponent {
    /**
     * Returns reference to the `nativeElement` of the igx-switch.
     *
     * @example
     * ```typescript
     * let nativeElement = this.switch.nativeElement;
     * ```
     */
    get nativeElement() {
        return this.nativeCheckbox.nativeElement;
    }
    /**
     * Sets/gets whether switch is required.
     * If not set, `required` will have value `false`.
     *
     * @example
     * ```html
     * <igx-switch required></igx-switch>
     * ```
     */
    get required() {
        return this._required || this.nativeElement.hasAttribute('required');
    }
    set required(value) {
        this._required = (value === '') || value;
    }
    /**
     * Sets/gets whether the switch is on or off.
     * Default value is 'false'.
     *
     * @example
     * ```html
     *  <igx-switch [checked]="true"></igx-switch>
     * ```
     */
    set checked(value) {
        if (this._checked !== value) {
            this._checked = value;
            this._onChangeCallback(this.checked);
        }
    }
    get checked() {
        return this._checked;
    }
    /**
     * Sets/gets the `disabled` attribute.
     * Default value is `false`.
     *
     * @example
     * ```html
     * <igx-switch disabled><igx-switch>
     * ```
     */
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        this._disabled = (value === '') || value;
    }
    /**
     * Sets/gets whether the switch component is invalid.
     * Default value is `false`.
     *
     * @example
     * ```html
     * <igx-switch invalid></igx-switch>
     * ```
     * ```typescript
     * let isInvalid = this.switch.invalid;
     * ```
     */
    get invalid() {
        return this._invalid || false;
    }
    set invalid(value) {
        this._invalid = !!value;
    }
    constructor(cdr, renderer, ngControl) {
        this.cdr = cdr;
        this.renderer = renderer;
        this.ngControl = ngControl;
        /**
         * @hidden
         * @internal
         */
        this.destroy$ = new Subject();
        /**
         * Sets/gets the `id` of the switch component.
         * If not set, the `id` of the first switch component will be `"igx-switch-0"`.
         *
         * @example
         * ```html
         * <igx-switch id="my-first-switch"></igx-switch>
         * ```
         */
        this.id = `igx-switch-${nextId++}`;
        /**
         * Sets/gets the id of the `label` element of the switch component.
         * If not set, the label of the first switch component will have value `"igx-switch-0-label"`.
         *
         * @example
         * ```html
         * <igx-switch labelId="Label1"></igx-switch>
         * ```
         */
        this.labelId = `${this.id}-label`;
        /**
         * Sets/gets the value of the `tabindex` attribute.
         *
         * @example
         * ```html
         * <igx-switch [tabindex]="1"></igx-switch>
         * ```
         */
        this.tabindex = null;
        /**
         * Sets/gets the position of the `label` in the switch component.
         * If not set, `labelPosition` will have value `"after"`.
         *
         * @example
         * ```html
         * <igx-switch labelPosition="before"></igx-switch>
         * ```
         */
        this.labelPosition = 'after';
        /**
         * Enables/Disables the ripple effect
         * If not set, `disableRipple` will have value `false`.
         *
         * @example
         * ```html
         * <igx-switch [disableRipple]="true"></igx-switch>
         * ```
         */
        this.disableRipple = false;
        /**
         * Sets/gets the `aria-labelledBy` attribute.
         * If not set, the  value of `aria-labelledBy` will be equal to the value of `labelId` attribute.
         *
         * @example
         * ```html
         * <igx-switch aria-labelledby = "Label1"></igx-switch>
         * ```
         */
        this.ariaLabelledBy = this.labelId;
        /**
         * Sets/gets the value of the `aria-label` attribute.
         *
         * @example
         * ```html
         * <igx-switch aria-label = "Label1"></igx-switch>
         * ```
         */
        this.ariaLabel = null;
        /**
         * An event that is emitted after the switch state is changed.
         * Provides references to the `IgxSwitchComponent` and the `checked` property as event arguments.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.change = new EventEmitter();
        /**
         * Returns the class of the switch component.
         *
         * @example
         * ```typescript
         * let switchClass = this.switch.cssClass;
         * ```
         */
        this.cssClass = 'igx-switch';
        /**
         * Sets/gets whether the switch component is on focus.
         * Default value is `false`.
         *
         * @example
         * ```typescript
         * this.switch.focused = true;
         * ```
         */
        this.focused = false;
        /**
         * @hidden
         * @internal
         */
        this.inputId = `${this.id}-input`;
        /**
         * @hidden
         * @internal
         */
        this._checked = false;
        /**
         * @hidden
         * @internal
         */
        this._required = false;
        /**
         * @hidden
         * @internal
         */
        this._disabled = false;
        /**
         * @hidden
         * @internal
         */
        this._invalid = false;
        /**
         * @hidden
         * @internal
         */
        this._onTouchedCallback = noop;
        /**
         * @hidden
         * @internal
         */
        this._onChangeCallback = noop;
        if (this.ngControl !== null) {
            this.ngControl.valueAccessor = this;
        }
    }
    /**
     * @hidden
     * @internal
    */
    ngAfterViewInit() {
        if (this.ngControl) {
            this.ngControl.statusChanges.pipe(takeUntil(this.destroy$)).subscribe(this.updateValidityState.bind(this));
            if (this.ngControl.control.validator || this.ngControl.control.asyncValidator) {
                this._required = this.ngControl?.control?.hasValidator(Validators.required);
                this.cdr.detectChanges();
            }
        }
    }
    /**
     * @hidden
     * @internal
     */
    onKeyUp(event) {
        event.stopPropagation();
        this.focused = true;
    }
    /**
     * @hidden
     * @internal
     */
    _onSwitchClick() {
        if (this.disabled) {
            return;
        }
        this.nativeCheckbox.nativeElement.focus();
        this.checked = !this.checked;
        this.updateValidityState();
        // K.D. March 23, 2021 Emitting on click and not on the setter because otherwise every component
        // bound on change would have to perform self checks for weather the value has changed because
        // of the initial set on initialization
        this.change.emit({ checked: this.checked, switch: this });
    }
    /**
     * @hidden
     * @internal
     */
    _onSwitchChange(event) {
        event.stopPropagation();
    }
    /**
     * @hidden
     * @internal
     */
    onBlur() {
        this.focused = false;
        this._onTouchedCallback();
        this.updateValidityState();
    }
    /**
     * @hidden
     * @internal
     */
    writeValue(value) {
        this._checked = value;
    }
    /**
     * @hidden
     * @internal
     */
    getEditElement() {
        return this.nativeCheckbox.nativeElement;
    }
    /**
     * @hidden
     * @internal
     */
    get labelClass() {
        switch (this.labelPosition) {
            case SwitchLabelPosition.BEFORE:
                return `${this.cssClass}__label--before`;
            case SwitchLabelPosition.AFTER:
            default:
                return `${this.cssClass}__label`;
        }
    }
    /**
     * @hidden
     * @internal
     */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /**
     * @hidden
     * @internal
     */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /**
     * @hidden
     * @internal
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @hidden
     * @internal
     */
    updateValidityState() {
        if (this.ngControl) {
            if (!this.disabled && (this.ngControl.control.touched || this.ngControl.control.dirty)) {
                // the control is not disabled and is touched or dirty
                this._invalid = this.ngControl.invalid;
            }
            else {
                //  if the control is untouched, pristine, or disabled, its state is initial. This is when the user did not interact
                //  with the switch or when the form/control is reset
                this._invalid = false;
            }
        }
        else {
            this.checkNativeValidity();
        }
    }
    /**
     * A function to assign a native validity property of a swicth.
     * This should be used when there's no ngControl
     *
     * @hidden
     * @internal
     */
    checkNativeValidity() {
        if (!this.disabled && this._required && !this.checked) {
            this._invalid = true;
        }
        else {
            this._invalid = false;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxSwitchComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.Renderer2 }, { token: i1.NgControl, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxSwitchComponent, isStandalone: true, selector: "igx-switch", inputs: { id: "id", labelId: "labelId", value: "value", name: "name", tabindex: "tabindex", labelPosition: "labelPosition", disableRipple: "disableRipple", required: "required", ariaLabelledBy: ["aria-labelledby", "ariaLabelledBy"], ariaLabel: ["aria-label", "ariaLabel"], checked: "checked", disabled: "disabled", invalid: "invalid" }, outputs: { change: "change" }, host: { listeners: { "keyup": "onKeyUp($event)", "click": "_onSwitchClick()", "blur": "onBlur()" }, properties: { "attr.id": "this.id", "class.igx-switch": "this.cssClass", "class.igx-switch--checked": "this.checked", "class.igx-switch--disabled": "this.disabled", "class.igx-switch--invalid": "this.invalid", "class.igx-switch--focused": "this.focused" } }, providers: [{
                provide: EDITOR_PROVIDER,
                useExisting: IgxSwitchComponent,
                multi: true
            }], viewQueries: [{ propertyName: "nativeCheckbox", first: true, predicate: ["checkbox"], descendants: true, static: true }, { propertyName: "nativeLabel", first: true, predicate: ["label"], descendants: true, static: true }, { propertyName: "placeholderLabel", first: true, predicate: ["placeholderLabel"], descendants: true, static: true }], ngImport: i0, template: "<input #checkbox class=\"igx-switch__input\" type=\"checkbox\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [value]=\"value\"\n    [tabindex]=\"tabindex\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    [attr.aria-required]=\"required\"\n    [attr.aria-invalid]=\"invalid\"\n    [attr.aria-checked]=\"checked\"\n    [attr.aria-labelledby]=\"ariaLabel ? null : ariaLabelledBy\"\n    [attr.aria-label]=\"ariaLabel\"\n    (change)=\"_onSwitchChange($event)\"\n    (blur)=\"onBlur()\" />\n\n<span #label class =\"igx-switch__composite\"\n    igxRipple\n    igxRippleTarget=\".igx-switch__ripple\"\n    [igxRippleDisabled]=\"disableRipple\"\n    [igxRippleCentered]=\"true\"\n    [igxRippleDuration]=\"300\">\n    <div class=\"igx-switch__composite-thumb\">\n        <div class=\"igx-switch__ripple\"></div>\n    </div>\n</span>\n\n<span #placeholderLabel\n    [class]=\"labelClass\"\n    [id]=\"labelId\">\n    <ng-content></ng-content>\n</span>\n", dependencies: [{ kind: "directive", type: IgxRippleDirective, selector: "[igxRipple]", inputs: ["igxRippleTarget", "igxRipple", "igxRippleDuration", "igxRippleCentered", "igxRippleDisabled"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxSwitchComponent, decorators: [{
            type: Component,
            args: [{ providers: [{
                            provide: EDITOR_PROVIDER,
                            useExisting: IgxSwitchComponent,
                            multi: true
                        }], selector: 'igx-switch', standalone: true, imports: [IgxRippleDirective], template: "<input #checkbox class=\"igx-switch__input\" type=\"checkbox\"\n    [id]=\"inputId\"\n    [name]=\"name\"\n    [value]=\"value\"\n    [tabindex]=\"tabindex\"\n    [disabled]=\"disabled\"\n    [checked]=\"checked\"\n    [required]=\"required\"\n    [attr.aria-required]=\"required\"\n    [attr.aria-invalid]=\"invalid\"\n    [attr.aria-checked]=\"checked\"\n    [attr.aria-labelledby]=\"ariaLabel ? null : ariaLabelledBy\"\n    [attr.aria-label]=\"ariaLabel\"\n    (change)=\"_onSwitchChange($event)\"\n    (blur)=\"onBlur()\" />\n\n<span #label class =\"igx-switch__composite\"\n    igxRipple\n    igxRippleTarget=\".igx-switch__ripple\"\n    [igxRippleDisabled]=\"disableRipple\"\n    [igxRippleCentered]=\"true\"\n    [igxRippleDuration]=\"300\">\n    <div class=\"igx-switch__composite-thumb\">\n        <div class=\"igx-switch__ripple\"></div>\n    </div>\n</span>\n\n<span #placeholderLabel\n    [class]=\"labelClass\"\n    [id]=\"labelId\">\n    <ng-content></ng-content>\n</span>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.Renderer2 }, { type: i1.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }] }]; }, propDecorators: { nativeCheckbox: [{
                type: ViewChild,
                args: ['checkbox', { static: true }]
            }], nativeLabel: [{
                type: ViewChild,
                args: ['label', { static: true }]
            }], placeholderLabel: [{
                type: ViewChild,
                args: ['placeholderLabel', { static: true }]
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], labelId: [{
                type: Input
            }], value: [{
                type: Input
            }], name: [{
                type: Input
            }], tabindex: [{
                type: Input
            }], labelPosition: [{
                type: Input
            }], disableRipple: [{
                type: Input
            }], required: [{
                type: Input
            }], ariaLabelledBy: [{
                type: Input,
                args: ['aria-labelledby']
            }], ariaLabel: [{
                type: Input,
                args: ['aria-label']
            }], change: [{
                type: Output
            }], cssClass: [{
                type: HostBinding,
                args: ['class.igx-switch']
            }], checked: [{
                type: HostBinding,
                args: ['class.igx-switch--checked']
            }, {
                type: Input
            }], disabled: [{
                type: HostBinding,
                args: ['class.igx-switch--disabled']
            }, {
                type: Input
            }], invalid: [{
                type: HostBinding,
                args: ['class.igx-switch--invalid']
            }, {
                type: Input
            }], focused: [{
                type: HostBinding,
                args: ['class.igx-switch--focused']
            }], onKeyUp: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }], _onSwitchClick: [{
                type: HostListener,
                args: ['click']
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }] } });
//# sourceMappingURL=data:application/json;base64,