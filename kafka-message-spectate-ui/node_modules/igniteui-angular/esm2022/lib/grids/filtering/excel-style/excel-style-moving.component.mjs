import { Component, HostBinding } from '@angular/core';
import { IgxIconComponent } from '../../../icon/icon.component';
import { IgxButtonDirective } from '../../../directives/button/button.directive';
import { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';
import { NgIf } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "./base-filtering.component";
/**
 * A component used for presenting Excel style column moving UI.
 */
export class IgxExcelStyleMovingComponent {
    constructor(esf) {
        this.esf = esf;
        /**
         * @hidden @internal
         */
        this.defaultClass = true;
    }
    get visibleColumns() {
        return this.esf.grid.visibleColumns.filter(col => !col.columnGroup);
    }
    /**
     * @hidden @internal
     */
    get canNotMoveLeft() {
        return this.esf.column.visibleIndex === 0 ||
            (this.esf.grid.unpinnedColumns.indexOf(this.esf.column) === 0 && this.esf.column.disablePinning) ||
            (this.esf.column.level !== 0 && !this.findColumn(0, this.visibleColumns));
    }
    /**
     * @hidden @internal
     */
    get canNotMoveRight() {
        return this.esf.column.visibleIndex === this.visibleColumns.length - 1 ||
            (this.esf.column.level !== 0 && !this.findColumn(1, this.visibleColumns));
    }
    /**
     * @hidden @internal
     */
    onMoveButtonClicked(moveDirection) {
        let targetColumn;
        if (this.esf.column.pinned) {
            if (this.esf.column.isLastPinned && moveDirection === 1 && this.esf.grid.isPinningToStart) {
                targetColumn = this.esf.grid.unpinnedColumns[0];
                moveDirection = 0;
            }
            else if (this.esf.column.isFirstPinned && moveDirection === 0 && !this.esf.grid.isPinningToStart) {
                targetColumn = this.esf.grid.unpinnedColumns[this.esf.grid.unpinnedColumns.length - 1];
                moveDirection = 1;
            }
            else {
                targetColumn = this.findColumn(moveDirection, this.esf.grid.pinnedColumns);
            }
        }
        else if (this.esf.grid.unpinnedColumns.indexOf(this.esf.column) === 0 && moveDirection === 0 &&
            this.esf.grid.isPinningToStart) {
            targetColumn = this.esf.grid.pinnedColumns[this.esf.grid.pinnedColumns.length - 1];
            if (targetColumn.parent) {
                targetColumn = targetColumn.topLevelParent;
            }
            moveDirection = 1;
        }
        else if (this.esf.grid.unpinnedColumns.indexOf(this.esf.column) === this.esf.grid.unpinnedColumns.length - 1 &&
            moveDirection === 1 && !this.esf.grid.isPinningToStart) {
            targetColumn = this.esf.grid.pinnedColumns[0];
            moveDirection = 0;
        }
        else {
            targetColumn = this.findColumn(moveDirection, this.esf.grid.unpinnedColumns);
        }
        this.esf.grid.moveColumn(this.esf.column, targetColumn, moveDirection);
    }
    findColumn(moveDirection, columns) {
        let index = columns.indexOf(this.esf.column);
        if (moveDirection === 0) {
            while (index > 0) {
                index--;
                if (columns[index].level === this.esf.column.level && columns[index].parent === this.esf.column.parent) {
                    return columns[index];
                }
            }
            return columns[0];
        }
        else {
            while (index < columns.length - 1) {
                index++;
                if (columns[index].level === this.esf.column.level && columns[index].parent === this.esf.column.parent) {
                    return columns[index];
                }
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxExcelStyleMovingComponent, deps: [{ token: i1.BaseFilteringComponent }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxExcelStyleMovingComponent, isStandalone: true, selector: "igx-excel-style-moving", host: { properties: { "class.igx-excel-filter__move": "this.defaultClass" } }, ngImport: i0, template: "<ng-container *ngIf=\"esf.column\">\n<header>\n    {{ esf.grid.resourceStrings.igx_grid_excel_filter_moving_header }}\n</header>\n<igx-buttongroup [multiSelection]=\"false\">\n    <button [displayDensity]=\"esf.grid.displayDensity\"\n        igxButton\n        [disabled]=\"canNotMoveLeft\"\n        (click)=\"onMoveButtonClicked(0)\">\n        <igx-icon>arrow_back</igx-icon>\n        <span>\n            {{ esf.grid.displayDensity==='compact'?\n            esf.grid.resourceStrings.igx_grid_excel_filter_moving_left_short:\n            esf.grid.resourceStrings.igx_grid_excel_filter_moving_left }}\n        </span>\n    </button>\n    <button [displayDensity]=\"esf.grid.displayDensity\"\n        igxButton\n        [disabled]=\"canNotMoveRight\"\n        (click)=\"onMoveButtonClicked(1)\">\n        <span>\n            {{ esf.grid.displayDensity==='compact'?\n            esf.grid.resourceStrings.igx_grid_excel_filter_moving_right_short:\n            esf.grid.resourceStrings.igx_grid_excel_filter_moving_right }}\n        </span>\n        <igx-icon>arrow_forwards</igx-icon>\n    </button>\n</igx-buttongroup>\n</ng-container>\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IgxButtonGroupComponent, selector: "igx-buttongroup", inputs: ["id", "itemContentCssClass", "multiSelection", "values", "disabled", "alignment"], outputs: ["selected", "deselected"] }, { kind: "directive", type: IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxButtonColor", "igxButtonBackground", "igxLabel", "disabled"], outputs: ["buttonClick", "buttonSelected"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxExcelStyleMovingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-excel-style-moving', standalone: true, imports: [NgIf, IgxButtonGroupComponent, IgxButtonDirective, IgxIconComponent], template: "<ng-container *ngIf=\"esf.column\">\n<header>\n    {{ esf.grid.resourceStrings.igx_grid_excel_filter_moving_header }}\n</header>\n<igx-buttongroup [multiSelection]=\"false\">\n    <button [displayDensity]=\"esf.grid.displayDensity\"\n        igxButton\n        [disabled]=\"canNotMoveLeft\"\n        (click)=\"onMoveButtonClicked(0)\">\n        <igx-icon>arrow_back</igx-icon>\n        <span>\n            {{ esf.grid.displayDensity==='compact'?\n            esf.grid.resourceStrings.igx_grid_excel_filter_moving_left_short:\n            esf.grid.resourceStrings.igx_grid_excel_filter_moving_left }}\n        </span>\n    </button>\n    <button [displayDensity]=\"esf.grid.displayDensity\"\n        igxButton\n        [disabled]=\"canNotMoveRight\"\n        (click)=\"onMoveButtonClicked(1)\">\n        <span>\n            {{ esf.grid.displayDensity==='compact'?\n            esf.grid.resourceStrings.igx_grid_excel_filter_moving_right_short:\n            esf.grid.resourceStrings.igx_grid_excel_filter_moving_right }}\n        </span>\n        <igx-icon>arrow_forwards</igx-icon>\n    </button>\n</igx-buttongroup>\n</ng-container>\n" }]
        }], ctorParameters: function () { return [{ type: i1.BaseFilteringComponent }]; }, propDecorators: { defaultClass: [{
                type: HostBinding,
                args: ['class.igx-excel-filter__move']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZWwtc3R5bGUtbW92aW5nLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkcy9maWx0ZXJpbmcvZXhjZWwtc3R5bGUvZXhjZWwtc3R5bGUtbW92aW5nLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkcy9maWx0ZXJpbmcvZXhjZWwtc3R5bGUvZXhjZWwtc3R5bGUtbW92aW5nLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3ZELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDZDQUE2QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQ3JGLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7O0FBRXZDOztHQUVHO0FBT0gsTUFBTSxPQUFPLDRCQUE0QjtJQU9yQyxZQUFtQixHQUEyQjtRQUEzQixRQUFHLEdBQUgsR0FBRyxDQUF3QjtRQU45Qzs7V0FFRztRQUVJLGlCQUFZLEdBQUcsSUFBSSxDQUFDO0lBRXVCLENBQUM7SUFFbkQsSUFBWSxjQUFjO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsY0FBYztRQUNyQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxD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LENBQUM7Z0JBQ1IsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTtvQkFDcEcsT0FBTyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3pCO2FBQ0o7U0FDSjtJQUNMLENBQUM7OEdBaEZRLDRCQUE0QjtrR0FBNUIsNEJBQTRCLGlLQ2pCekMsZ25DQTZCQSw0Q0RkYyxJQUFJLDZGQUFFLHVCQUF1Qiw2TEFBRSxrQkFBa0Isd01BQUUsZ0JBQWdCOzsyRkFFcEUsNEJBQTRCO2tCQU54QyxTQUFTOytCQUNJLHdCQUF3QixjQUV0QixJQUFJLFdBQ1AsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLENBQUM7NkdBT3ZFLFlBQVk7c0JBRGxCLFdBQVc7dUJBQUMsOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29sdW1uVHlwZSB9IGZyb20gJy4uLy4uL2NvbW1vbi9ncmlkLmludGVyZmFjZSc7XG5pbXBvcnQgeyBCYXNlRmlsdGVyaW5nQ29tcG9uZW50IH0gZnJvbSAnLi9iYXNlLWZpbHRlcmluZy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4SWNvbkNvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL2ljb24vaWNvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4QnV0dG9uRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vLi4vZGlyZWN0aXZlcy9idXR0b24vYnV0dG9uLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hCdXR0b25Hcm91cENvbXBvbmVudCB9IGZyb20gJy4uLy4uLy4uL2J1dHRvbkdyb3VwL2J1dHRvbkdyb3VwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOZ0lmIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuLyoqXG4gKiBBIGNvbXBvbmVudCB1c2VkIGZvciBwcmVzZW50aW5nIEV4Y2VsIHN0eWxlIGNvbHVtbiBtb3ZpbmcgVUkuXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaWd4LWV4Y2VsLXN0eWxlLW1vdmluZycsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2V4Y2VsLXN0eWxlLW1vdmluZy5jb21wb25lbnQuaHRtbCcsXG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBpbXBvcnRzOiBbTmdJZiwgSWd4QnV0dG9uR3JvdXBDb21wb25lbnQsIElneEJ1dHRvbkRpcmVjdGl2ZSwgSWd4SWNvbkNvbXBvbmVudF1cbn0pXG5leHBvcnQgY2xhc3MgSWd4RXhjZWxTdHlsZU1vdmluZ0NvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1leGNlbC1maWx0ZXJfX21vdmUnKVxuICAgIHB1YmxpYyBkZWZhdWx0Q2xhc3MgPSB0cnVlO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIGVzZjogQmFzZUZpbHRlcmluZ0NvbXBvbmVudCkgeyB9XG5cbiAgICBwcml2YXRlIGdldCB2aXNpYmxlQ29sdW1ucygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXNmLmdyaWQudmlzaWJsZUNvbHVtbnMuZmlsdGVyKGNvbCA9PiAhY29sLmNvbHVtbkdyb3VwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBnZXQgY2FuTm90TW92ZUxlZnQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVzZi5jb2x1bW4udmlzaWJsZUluZGV4ID09PSAwIHx8XG4gICAgICAgICAgICAodGhpcy5lc2YuZ3JpZC51bnBpbm5lZENvbHVtbnMuaW5kZXhPZih0aGlzLmVzZi5jb2x1bW4pID09PSAwICYmIHRoaXMuZXNmLmNvbHVtbi5kaXNhYmxlUGlubmluZykgfHxcbiAgICAgICAgICAgICh0aGlzLmVzZi5jb2x1bW4ubGV2ZWwgIT09IDAgJiYgIXRoaXMuZmluZENvbHVtbigwLCB0aGlzLnZpc2libGVDb2x1bW5zKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlbiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0IGNhbk5vdE1vdmVSaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXNmLmNvbHVtbi52aXNpYmxlSW5kZXggPT09IHRoaXMudmlzaWJsZUNvbHVtbnMubGVuZ3RoIC0gMSB8fFxuICAgICAgICAgICAgKHRoaXMuZXNmLmNvbHVtbi5sZXZlbCAhPT0gMCAmJiAhdGhpcy5maW5kQ29sdW1uKDEsIHRoaXMudmlzaWJsZUNvbHVtbnMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAaGlkZGVuIEBpbnRlcm5hbFxuICAgICAqL1xuICAgIHB1YmxpYyBvbk1vdmVCdXR0b25DbGlja2VkKG1vdmVEaXJlY3Rpb24pIHtcbiAgICAgICAgbGV0IHRhcmdldENvbHVtbjtcbiAgICAgICAgaWYgKHRoaXMuZXNmLmNvbHVtbi5waW5uZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVzZi5jb2x1bW4uaXNMYXN0UGlubmVkICYmIG1vdmVEaXJlY3Rpb24gPT09IDEgJiYgdGhpcy5lc2YuZ3JpZC5pc1Bpbm5pbmdUb1N0YXJ0KSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0Q29sdW1uID0gdGhpcy5lc2YuZ3JpZC51bnBpbm5lZENvbHVtbnNbMF07XG4gICAgICAgICAgICAgICAgbW92ZURpcmVjdGlvbiA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZXNmLmNvbHVtbi5pc0ZpcnN0UGlubmVkICYmIG1vdmVEaXJlY3Rpb24gPT09IDAgJiYgIXRoaXMuZXNmLmdyaWQuaXNQaW5uaW5nVG9TdGFydCkge1xuICAgICAgICAgICAgICAgIHRhcmdldENvbHVtbiA9IHRoaXMuZXNmLmdyaWQudW5waW5uZWRDb2x1bW5zW3RoaXMuZXNmLmdyaWQudW5waW5uZWRDb2x1bW5zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIG1vdmVEaXJlY3Rpb24gPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXRDb2x1bW4gPSB0aGlzLmZpbmRDb2x1bW4obW92ZURpcmVjdGlvbiwgdGhpcy5lc2YuZ3JpZC5waW5uZWRDb2x1bW5zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmVzZi5ncmlkLnVucGlubmVkQ29sdW1ucy5pbmRleE9mKHRoaXMuZXNmLmNvbHVtbikgPT09IDAgJiYgbW92ZURpcmVjdGlvbiA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVzZi5ncmlkLmlzUGlubmluZ1RvU3RhcnQpIHtcbiAgICAgICAgICAgIHRhcmdldENvbHVtbiA9IHRoaXMuZXNmLmdyaWQucGlubmVkQ29sdW1uc1t0aGlzLmVzZi5ncmlkLnBpbm5lZENvbHVtbnMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICBpZiAodGFyZ2V0Q29sdW1uLnBhcmVudCkge1xuICAgICAgICAgICAgICAgIHRhcmdldENvbHVtbiA9IHRhcmdldENvbHVtbi50b3BMZXZlbFBhcmVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1vdmVEaXJlY3Rpb24gPSAxO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZXNmLmdyaWQudW5waW5uZWRDb2x1bW5zLmluZGV4T2YodGhpcy5lc2YuY29sdW1uKSA9PT0gdGhpcy5lc2YuZ3JpZC51bnBpbm5lZENvbHVtbnMubGVuZ3RoIC0gMSAmJlxuICAgICAgICAgICAgbW92ZURpcmVjdGlvbiA9PT0gMSAmJiAhdGhpcy5lc2YuZ3JpZC5pc1Bpbm5pbmdUb1N0YXJ0KSB7XG4gICAgICAgICAgICB0YXJnZXRDb2x1bW4gPSB0aGlzLmVzZi5ncmlkLnBpbm5lZENvbHVtbnNbMF07XG4gICAgICAgICAgICBtb3ZlRGlyZWN0aW9uID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldENvbHVtbiA9IHRoaXMuZmluZENvbHVtbihtb3ZlRGlyZWN0aW9uLCB0aGlzLmVzZi5ncmlkLnVucGlubmVkQ29sdW1ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lc2YuZ3JpZC5tb3ZlQ29sdW1uKHRoaXMuZXNmLmNvbHVtbiwgdGFyZ2V0Q29sdW1uLCBtb3ZlRGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbmRDb2x1bW4obW92ZURpcmVjdGlvbjogbnVtYmVyLCBjb2x1bW5zOiBDb2x1bW5UeXBlW10pIHtcbiAgICAgICAgbGV0IGluZGV4ID0gY29sdW1ucy5pbmRleE9mKHRoaXMuZXNmLmNvbHVtbik7XG4gICAgICAgIGlmIChtb3ZlRGlyZWN0aW9uID09PSAwKSB7XG4gICAgICAgICAgICB3aGlsZSAoaW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uc1tpbmRleF0ubGV2ZWwgPT09IHRoaXMuZXNmLmNvbHVtbi5sZXZlbCAmJiBjb2x1bW5zW2luZGV4XS5wYXJlbnQgPT09IHRoaXMuZXNmLmNvbHVtbi5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb2x1bW5zWzBdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hpbGUgKGluZGV4IDwgY29sdW1ucy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgaW5kZXgrKztcbiAgICAgICAgICAgICAgICBpZiAoY29sdW1uc1tpbmRleF0ubGV2ZWwgPT09IHRoaXMuZXNmLmNvbHVtbi5sZXZlbCAmJiBjb2x1bW5zW2luZGV4XS5wYXJlbnQgPT09IHRoaXMuZXNmLmNvbHVtbi5wYXJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbHVtbnNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJlc2YuY29sdW1uXCI+XG48aGVhZGVyPlxuICAgIHt7IGVzZi5ncmlkLnJlc291cmNlU3RyaW5ncy5pZ3hfZ3JpZF9leGNlbF9maWx0ZXJfbW92aW5nX2hlYWRlciB9fVxuPC9oZWFkZXI+XG48aWd4LWJ1dHRvbmdyb3VwIFttdWx0aVNlbGVjdGlvbl09XCJmYWxzZVwiPlxuICAgIDxidXR0b24gW2Rpc3BsYXlEZW5zaXR5XT1cImVzZi5ncmlkLmRpc3BsYXlEZW5zaXR5XCJcbiAgICAgICAgaWd4QnV0dG9uXG4gICAgICAgIFtkaXNhYmxlZF09XCJjYW5Ob3RNb3ZlTGVmdFwiXG4gICAgICAgIChjbGljayk9XCJvbk1vdmVCdXR0b25DbGlja2VkKDApXCI+XG4gICAgICAgIDxpZ3gtaWNvbj5hcnJvd19iYWNrPC9pZ3gtaWNvbj5cbiAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICB7eyBlc2YuZ3JpZC5kaXNwbGF5RGVuc2l0eT09PSdjb21wYWN0Jz9cbiAgICAgICAgICAgIGVzZi5ncmlkLnJlc291cmNlU3RyaW5ncy5pZ3hfZ3JpZF9leGNlbF9maWx0ZXJfbW92aW5nX2xlZnRfc2hvcnQ6XG4gICAgICAgICAgICBlc2YuZ3JpZC5yZXNvdXJjZVN0cmluZ3MuaWd4X2dyaWRfZXhjZWxfZmlsdGVyX21vdmluZ19sZWZ0IH19XG4gICAgICAgIDwvc3Bhbj5cbiAgICA8L2J1dHRvbj5cbiAgICA8YnV0dG9uIFtkaXNwbGF5RGVuc2l0eV09XCJlc2YuZ3JpZC5kaXNwbGF5RGVuc2l0eVwiXG4gICAgICAgIGlneEJ1dHRvblxuICAgICAgICBbZGlzYWJsZWRdPVwiY2FuTm90TW92ZVJpZ2h0XCJcbiAgICAgICAgKGNsaWNrKT1cIm9uTW92ZUJ1dHRvbkNsaWNrZWQoMSlcIj5cbiAgICAgICAgPHNwYW4+XG4gICAgICAgICAgICB7eyBlc2YuZ3JpZC5kaXNwbGF5RGVuc2l0eT09PSdjb21wYWN0Jz9cbiAgICAgICAgICAgIGVzZi5ncmlkLnJlc291cmNlU3RyaW5ncy5pZ3hfZ3JpZF9leGNlbF9maWx0ZXJfbW92aW5nX3JpZ2h0X3Nob3J0OlxuICAgICAgICAgICAgZXNmLmdyaWQucmVzb3VyY2VTdHJpbmdzLmlneF9ncmlkX2V4Y2VsX2ZpbHRlcl9tb3ZpbmdfcmlnaHQgfX1cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8aWd4LWljb24+YXJyb3dfZm9yd2FyZHM8L2lneC1pY29uPlxuICAgIDwvYnV0dG9uPlxuPC9pZ3gtYnV0dG9uZ3JvdXA+XG48L25nLWNvbnRhaW5lcj5cbiJdfQ==