import { CurrentResourceStrings } from '../../core/i18n/resources';
import { GridColumnDataType } from '../../data-operations/data-util';
import { PivotUtil } from './pivot-util';
// Equals to pretty much this configuration:
// {
//     member: () => 'All Periods',
//     enabled: true,
//     fieldName: 'AllPeriods',
//     childLevel: {
//         fieldName: 'Years',
//         member: (rec) => {
//             const recordValue = rec['Date'];
//             return recordValue ? (new Date(recordValue)).getFullYear().toString() : rec['Years'];
//         },
//         enabled: true,
//         childLevel: {
//                 member: (rec) => {
//                     const recordValue = rec['Date'];
//                     return recordValue ? new Date(recordValue).toLocaleString('default', { month: 'long' }) : rec['Months'];
//                 },
//                 enabled: true,
//                 fieldName: 'Months',
//                 childLevel: {
//                         member: 'Date',
//                         fieldName:'Date',
//                         enabled: true
//                     }
//             }
//     }
// },
export class IgxPivotDateDimension {
    /**
     * Gets/Sets the resource strings.
     *
     * @remarks
     * By default it uses EN resources.
     */
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    get resourceStrings() {
        return this._resourceStrings;
    }
    /**
     * Gets/Sets the base dimension that is used by this class to determine the other dimensions and their values.
     * Having base dimension set is required in order for the Date Dimensions to show.
     */
    get baseDimension() {
        return this._baseDimension;
    }
    set baseDimension(value) {
        this._baseDimension = value;
        this.initialize(this.baseDimension, this.options);
    }
    /**
     * Gets/Sets the options for the predefined date dimensions whether to show quarter, years and etc.
     */
    get options() {
        return this._options;
    }
    set options(value) {
        this._options = value;
        if (this.baseDimension) {
            this.initialize(this.baseDimension, this.options);
        }
    }
    /**
     * @deprecated since version 15.1.x. Please use the new name `baseDimension` for future versions.
     *
     * Gets the base dimension that is used by this class to determine the other dimensions and their values.
     * Having base dimension set is required in order for the Date Dimensions to show.
     */
    get inBaseDimension() {
        return this._baseDimension;
    }
    /**
     * @deprecated since version 15.1.x. Please use the new name `options` for future versions.
     *
     * Gets the options for the predefined date dimensions whether to show quarter, years and etc.
     */
    get inOptions() {
        return this._options;
    }
    /**
     * Creates additional pivot date dimensions based on a provided dimension describing date data:
     *
     * @param inDateDimension Base dimension that is used by this class to determine the other dimensions and their values.
     * @param inOptions Options for the predefined date dimensions whether to show quarter, years and etc.
     * @example
     * ```typescript
     * // Displays only years as parent dimension to the base dimension provided.
     * new IgxPivotDateDimension({ memberName: 'Date', enabled: true }, { total: false, months: false });
     * ```
     */
    constructor(inBaseDimension, inOptions = {}) {
        /** Enables/Disables a particular dimension from pivot structure. */
        this.enabled = true;
        /** Default options. */
        this.defaultOptions = {
            total: true,
            years: true,
            months: true,
            fullDate: true
        };
        /** @hidden @internal */
        this.memberName = 'AllPeriods';
        this._resourceStrings = CurrentResourceStrings.GridResStrings;
        this._options = {};
        this._monthIntl = new Intl.DateTimeFormat('default', { month: 'long' });
        /** @hidden @internal */
        this.memberFunction = (_data) => this.resourceStrings.igx_grid_pivot_date_dimension_total;
        this._baseDimension = inBaseDimension;
        this._options = inOptions;
        if (this.baseDimension && this.options) {
            this.initialize(this.baseDimension, this.options);
        }
    }
    initialize(inBaseDimension, inOptions) {
        const options = { ...this.defaultOptions, ...inOptions };
        this.dataType = GridColumnDataType.Date;
        inBaseDimension.dataType = GridColumnDataType.Date;
        const baseDimension = options.fullDate ? inBaseDimension : null;
        const monthDimensionDef = {
            memberName: 'Months',
            memberFunction: (rec) => {
                const recordValue = PivotUtil.extractValueFromDimension(inBaseDimension, rec);
                return recordValue ? this._monthIntl.format(new Date(recordValue)) : rec['Months'];
            },
            enabled: true,
            childLevel: baseDimension
        };
        const monthDimension = options.months ? monthDimensionDef : baseDimension;
        const quarterDimensionDef = {
            memberName: 'Quarters',
            memberFunction: (rec) => {
                const recordValue = PivotUtil.extractValueFromDimension(inBaseDimension, rec);
                return recordValue ? `Q` + Math.ceil((new Date(recordValue).getMonth() + 1) / 3) : rec['Quarters'];
            },
            enabled: true,
            childLevel: monthDimension
        };
        const quarterDimension = options.quarters ? quarterDimensionDef : monthDimension;
        const yearsDimensionDef = {
            memberName: 'Years',
            memberFunction: (rec) => {
                const recordValue = PivotUtil.extractValueFromDimension(inBaseDimension, rec);
                return recordValue ? (new Date(recordValue)).getFullYear().toString() : rec['Years'];
            },
            enabled: true,
            childLevel: quarterDimension
        };
        const yearsDimension = options.years ? yearsDimensionDef : quarterDimension;
        this.childLevel = yearsDimension;
        if (!options.total) {
            this.memberName = yearsDimension.memberName;
            this.memberFunction = yearsDimension.memberFunction;
            this.childLevel = yearsDimension.childLevel;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,