import { useAnimation } from "@angular/animations";
import { Component, EventEmitter, HostBinding, Input, Output } from "@angular/core";
import { first } from "rxjs/operators";
import { fadeIn, fadeOut } from "../../animations/fade";
import { SortingDirection } from "../../data-operations/sorting-strategy";
import { IgxDropDirective, IgxDragDirective, IgxDragHandleDirective } from "../../directives/drag-drop/drag-drop.directive";
import { IgxDropDownComponent } from "../../drop-down/drop-down.component";
import { AbsoluteScrollStrategy, AutoPositionStrategy, VerticalAlignment } from "../../services/public_api";
import { PivotDimensionType } from "./pivot-grid.interface";
import { PivotUtil } from './pivot-util';
import { IgxFilterPivotItemsPipe } from "./pivot-grid.pipes";
import { IgxDropDownItemComponent } from "../../drop-down/drop-down-item.component";
import { IgxDropDownItemNavigationDirective } from "../../drop-down/drop-down-navigation.directive";
import { IgxExpansionPanelBodyComponent } from "../../expansion-panel/expansion-panel-body.component";
import { IgxChipComponent } from "../../chips/chip.component";
import { IgxExpansionPanelTitleDirective } from "../../expansion-panel/expansion-panel.directives";
import { IgxExpansionPanelHeaderComponent } from "../../expansion-panel/expansion-panel-header.component";
import { IgxExpansionPanelComponent } from "../../expansion-panel/expansion-panel.component";
import { IgxAccordionComponent } from "../../accordion/accordion.component";
import { IgxCheckboxComponent } from "../../checkbox/checkbox.component";
import { IgxListItemComponent } from "../../list/list-item.component";
import { NgFor, NgIf } from "@angular/common";
import { IgxListComponent } from "../../list/list.component";
import { IgxInputDirective } from "../../directives/input/input.directive";
import { IgxPrefixDirective } from "../../directives/prefix/prefix.directive";
import { IgxIconComponent } from "../../icon/icon.component";
import { IgxInputGroupComponent } from "../../input-group/input-group.component";
import * as i0 from "@angular/core";
/**
 * Pivot Data Selector provides means to configure the pivot state of the Pivot Grid via a vertical panel UI
 *
 * @igxModule IgxPivotGridModule
 * @igxGroup Grids & Lists
 * @igxKeywords data selector, pivot, grid
 * @igxTheme pivot-data-selector-theme
 * @remarks
 * The Ignite UI Data Selector has a searchable list with the grid data columns,
 * there are also four expandable areas underneath for filters, rows, columns, and values
 * is used for grouping and aggregating simple flat data into a pivot table.
 * @example
 * ```html
 * <igx-pivot-grid #grid1 [data]="data" [pivotConfiguration]="configuration">
 * </igx-pivot-grid>
 * <igx-pivot-data-selector [grid]="grid1"></igx-pivot-data-selector>
 * ```
 */
export class IgxPivotDataSelectorComponent {
    /** @hidden @internal */
    get dims() {
        return this._grid?.allDimensions || [];
    }
    /** @hidden @internal */
    get values() {
        return this._grid?.pivotConfiguration.values || [];
    }
    constructor(renderer, cdr) {
        this.renderer = renderer;
        this.cdr = cdr;
        /**
         * Gets/sets whether the columns panel is expanded
         * Get
         * ```typescript
         *  const columnsPanelState: boolean = this.dataSelector.columnsExpanded;
         * ```
         * Set
         * ```html
         * <igx-pivot-data-selector [grid]="grid1" [columnsExpanded]="columnsPanelState"></igx-pivot-data-selector>
         * ```
         *
         * Two-way data binding:
         * ```html
         * <igx-pivot-data-selector [grid]="grid1" [(columnsExpanded)]="columnsPanelState"></igx-pivot-data-selector>
         * ```
         */
        this.columnsExpanded = true;
        /**
         * @hidden
         */
        this.columnsExpandedChange = new EventEmitter();
        /**
         * Gets/sets whether the rows panel is expanded
         * Get
         * ```typescript
         *  const rowsPanelState: boolean = this.dataSelector.rowsExpanded;
         * ```
         * Set
         * ```html
         * <igx-pivot-data-selector [grid]="grid1" [rowsExpanded]="rowsPanelState"></igx-pivot-data-selector>
         * ```
         *
         * Two-way data binding:
         * ```html
         * <igx-pivot-data-selector [grid]="grid1" [(rowsExpanded)]="rowsPanelState"></igx-pivot-data-selector>
         * ```
         */
        this.rowsExpanded = true;
        /**
         * @hidden
         */
        this.rowsExpandedChange = new EventEmitter();
        /**
         * Gets/sets whether the filters panel is expanded
         * Get
         * ```typescript
         *  const filtersPanelState: boolean = this.dataSelector.filtersExpanded;
         * ```
         * Set
         * ```html
         * <igx-pivot-data-selector [grid]="grid1" [filtersExpanded]="filtersPanelState"></igx-pivot-data-selector>
         * ```
         *
         * Two-way data binding:
         * ```html
         * <igx-pivot-data-selector [grid]="grid1" [(filtersExpanded)]="filtersPanelState"></igx-pivot-data-selector>
         * ```
         */
        this.filtersExpanded = true;
        /**
         * @hidden
         */
        this.filtersExpandedChange = new EventEmitter();
        /**
         * Gets/sets whether the values panel is expanded
         * Get
         * ```typescript
         *  const valuesPanelState: boolean = this.dataSelector.valuesExpanded;
         * ```
         * Set
         * ```html
         * <igx-pivot-data-selector [grid]="grid1" [valuesExpanded]="valuesPanelState"></igx-pivot-data-selector>
         * ```
         *
         * Two-way data binding:
         * ```html
         * <igx-pivot-data-selector [grid]="grid1" [(valuesExpanded)]="valuesPanelState"></igx-pivot-data-selector>
         * ```
         */
        this.valuesExpanded = true;
        /**
         * @hidden
         */
        this.valuesExpandedChange = new EventEmitter();
        this._dropDelta = 0;
        /** @hidden @internal **/
        this.cssClass = "igx-pivot-data-selector";
        this._subMenuPositionSettings = {
            verticalStartPoint: VerticalAlignment.Bottom,
            closeAnimation: undefined,
        };
        this._subMenuOverlaySettings = {
            closeOnOutsideClick: true,
            modal: false,
            positionStrategy: new AutoPositionStrategy(this._subMenuPositionSettings),
            scrollStrategy: new AbsoluteScrollStrategy(),
        };
        this.animationSettings = {
            closeAnimation: useAnimation(fadeOut, {
                params: {
                    duration: "0ms",
                },
            }),
            openAnimation: useAnimation(fadeIn, {
                params: {
                    duration: "0ms",
                },
            }),
        };
        /** @hidden @internal */
        this.aggregateList = [];
        /**
         * @hidden @internal
         */
        this._panels = [
            {
                name: "Filters",
                i18n: 'igx_grid_pivot_selector_filters',
                type: PivotDimensionType.Filter,
                dataKey: "filterDimensions",
                icon: "filter_list",
                itemKey: "memberName",
                sortable: false,
                dragChannels: ["Filters", "Columns", "Rows"]
            },
            {
                name: "Columns",
                i18n: 'igx_grid_pivot_selector_columns',
                type: PivotDimensionType.Column,
                dataKey: "columnDimensions",
                icon: "view_column",
                itemKey: "memberName",
                sortable: true,
                dragChannels: ["Filters", "Columns", "Rows"]
            },
            {
                name: "Rows",
                i18n: 'igx_grid_pivot_selector_rows',
                type: PivotDimensionType.Row,
                dataKey: "rowDimensions",
                icon: "table_rows",
                itemKey: "memberName",
                sortable: true,
                dragChannels: ["Filters", "Columns", "Rows"]
            },
            {
                name: "Values",
                i18n: 'igx_grid_pivot_selector_values',
                type: null,
                dataKey: "values",
                icon: "functions",
                itemKey: "member",
                displayKey: 'displayName',
                sortable: false,
                dragChannels: ["Values"]
            },
        ];
    }
    /**
     * @hidden @internal
     */
    get displayDensity() {
        return this.grid?.displayDensity;
    }
    /**
     * An @Input property that sets the grid.
     */
    set grid(value) {
        this._grid = value;
    }
    /**
     * Returns the grid.
     */
    get grid() {
        return this._grid;
    }
    /**
     * @hidden
     * @internal
     */
    onItemSort(_, dimension, dimensionType) {
        if (!this._panels.find((panel) => panel.type === dimensionType).sortable)
            return;
        const startDirection = dimension.sortDirection || SortingDirection.None;
        const direction = startDirection + 1 > SortingDirection.Desc ?
            SortingDirection.None : startDirection + 1;
        this.grid.sortDimension(dimension, direction);
    }
    /**
     * @hidden
     * @internal
     */
    onFilteringIconPointerDown(event) {
        event.stopPropagation();
        event.preventDefault();
    }
    /**
     * @hidden
     * @internal
     */
    onFilteringIconClick(event, dimension) {
        event.stopPropagation();
        event.preventDefault();
        let dim = dimension;
        let col;
        while (dim) {
            col = this.grid.dimensionDataColumns.find((x) => x.field === dim.memberName);
            if (col) {
                break;
            }
            else {
                dim = dim.childLevel;
            }
        }
        this.grid.filteringService.toggleFilterDropdown(event.target, col);
    }
    /**
     * @hidden
     * @internal
     */
    getDimensionState(dimensionType) {
        switch (dimensionType) {
            case PivotDimensionType.Row:
                return this.grid.rowDimensions;
            case PivotDimensionType.Column:
                return this.grid.columnDimensions;
            case PivotDimensionType.Filter:
                return this.grid.filterDimensions;
            default:
                return null;
        }
    }
    /**
     * @hidden
     * @internal
     */
    moveValueItem(itemId) {
        const aggregation = this.grid.pivotConfiguration.values;
        const valueIndex = aggregation.findIndex((x) => x.member === itemId) !== -1
            ? aggregation?.findIndex((x) => x.member === itemId)
            : aggregation.length;
        const newValueIndex = valueIndex + this._dropDelta < 0 ? 0 : valueIndex + this._dropDelta;
        const aggregationItem = aggregation.find((x) => x.member === itemId || x.displayName === itemId);
        if (aggregationItem) {
            this.grid.moveValue(aggregationItem, newValueIndex);
            this.grid.valuesChange.emit({
                values: this.grid.pivotConfiguration.values,
            });
        }
    }
    /**
     * @hidden
     * @internal
     */
    onItemDropped(event, dimensionType) {
        if (!this.dropAllowed) {
            return;
        }
        const dimension = this.grid.getDimensionsByType(dimensionType);
        const dimensionState = this.getDimensionState(dimensionType);
        const itemId = event.drag.element.nativeElement.id;
        const targetId = event.owner.element.nativeElement.id;
        const dimensionItem = dimension?.find((x) => x.memberName === itemId);
        const itemIndex = dimension?.findIndex((x) => x?.memberName === itemId) !== -1
            ? dimension?.findIndex((x) => x.memberName === itemId)
            : dimension?.length;
        const dimensions = this.grid.allDimensions.filter((x) => x && x.memberName === itemId);
        const reorder = dimensionState?.findIndex((item) => item.memberName === itemId) !==
            -1;
        let targetIndex = targetId !== ""
            ? dimension?.findIndex((x) => x.memberName === targetId)
            : dimension?.length;
        if (!dimension) {
            this.moveValueItem(itemId);
        }
        if (reorder) {
            targetIndex =
                itemIndex + this._dropDelta < 0
                    ? 0
                    : itemIndex + this._dropDelta;
        }
        if (dimensionItem) {
            this.grid.moveDimension(dimensionItem, dimensionType, targetIndex);
        }
        else {
            const newDim = dimensions.find((x) => x.memberName === itemId);
            this.grid.moveDimension(newDim, dimensionType, targetIndex);
        }
        this.grid.dimensionsChange.emit({
            dimensions: dimension,
            dimensionCollectionType: dimensionType,
        });
    }
    /**
     * @hidden
     * @internal
     */
    updateDropDown(value, dropdown) {
        this.value = value;
        dropdown.width = "200px";
        this.aggregateList = PivotUtil.getAggregateList(value, this.grid);
        this.cdr.detectChanges();
        dropdown.open(this._subMenuOverlaySettings);
    }
    /**
     * @hidden
     * @internal
     */
    onSummaryClick(event, value, dropdown) {
        this._subMenuOverlaySettings.target =
            event.currentTarget;
        if (dropdown.collapsed) {
            this.updateDropDown(value, dropdown);
        }
        else {
            // close for previous chip
            dropdown.close();
            dropdown.closed.pipe(first()).subscribe(() => {
                this.updateDropDown(value, dropdown);
            });
        }
    }
    /**
     * @hidden
     * @internal
     */
    onAggregationChange(event) {
        if (!this.isSelected(event.newSelection.value)) {
            this.value.aggregate = event.newSelection.value;
            this.grid.pipeTrigger++;
            this.grid.cdr.markForCheck();
        }
    }
    /**
     * @hidden
     * @internal
     */
    isSelected(val) {
        return this.value.aggregate.key === val.key;
    }
    /**
     * @hidden
     * @internal
     */
    ghostCreated(event, value) {
        const { width: itemWidth } = event.owner.element.nativeElement.getBoundingClientRect();
        this.ghostWidth = itemWidth;
        this.ghostText = value;
        this.renderer.setStyle(event.owner.element.nativeElement, "position", "absolute");
        this.renderer.setStyle(event.owner.element.nativeElement, "visibility", "hidden");
    }
    /**
     * @hidden
     * @internal
     */
    toggleItem(item) {
        if (item) {
            this.grid.toggleValue(item);
        }
        if (item) {
            this.grid.toggleDimension(item);
        }
    }
    /**
     * @hidden
     * @internal
     */
    onPanelEntry(event, panel) {
        this.dropAllowed = event.dragData.gridID === this.grid.id && event.dragData.selectorChannels?.some((channel) => channel === panel);
    }
    /**
     * @hidden
     * @internal
     */
    onItemDragMove(event) {
        const clientRect = event.owner.element.nativeElement.getBoundingClientRect();
        this._dropDelta = Math.round((event.nextPageY - event.startY) / clientRect.height);
    }
    /**
     * @hidden
     * @internal
     */
    onItemDragEnd(event) {
        this.renderer.setStyle(event.owner.element.nativeElement, "position", "static");
        this.renderer.setStyle(event.owner.element.nativeElement, "visibility", "visible");
    }
    /**
     * @hidden
     * @internal
     */
    onItemDragOver(event) {
        if (this.dropAllowed) {
            this.renderer.addClass(event.owner.element.nativeElement, "igx-drag--push");
        }
    }
    /**
     * @hidden
     * @internal
     */
    onItemDragLeave(event) {
        if (this.dropAllowed) {
            this.renderer.removeClass(event.owner.element.nativeElement, "igx-drag--push");
        }
    }
    /**
     * @hidden
     * @internal
     */
    getPanelCollapsed(panelType) {
        switch (panelType) {
            case PivotDimensionType.Column:
                return !this.columnsExpanded;
            case PivotDimensionType.Filter:
                return !this.filtersExpanded;
            case PivotDimensionType.Row:
                return !this.rowsExpanded;
            default:
                return !this.valuesExpanded;
        }
    }
    /**
     * @hidden
     * @internal
     */
    onCollapseChange(value, panelType) {
        switch (panelType) {
            case PivotDimensionType.Column:
                this.columnsExpanded = !value;
                this.columnsExpandedChange.emit(this.columnsExpanded);
                break;
            case PivotDimensionType.Filter:
                this.filtersExpanded = !value;
                this.filtersExpandedChange.emit(this.filtersExpanded);
                break;
            case PivotDimensionType.Row:
                this.rowsExpanded = !value;
                this.rowsExpandedChange.emit(this.rowsExpanded);
                break;
            default:
                this.valuesExpanded = !value;
                this.valuesExpandedChange.emit(this.valuesExpanded);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxPivotDataSelectorComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxPivotDataSelectorComponent, isStandalone: true, selector: "igx-pivot-data-selector", inputs: { columnsExpanded: "columnsExpanded", rowsExpanded: "rowsExpanded", filtersExpanded: "filtersExpanded", valuesExpanded: "valuesExpanded", grid: "grid" }, outputs: { columnsExpandedChange: "columnsExpandedChange", rowsExpandedChange: "rowsExpandedChange", filtersExpandedChange: "filtersExpandedChange", valuesExpandedChange: "valuesExpandedChange" }, host: { properties: { "class.igx-pivot-data-selector": "this.cssClass" } }, ngImport: i0, template: "<div class=\"igx-pivot-data-selector__filter\">\n    <igx-input-group type=\"box\" [displayDensity]=\"displayDensity\">\n        <igx-icon igxPrefix>search</igx-icon>\n        <input\n            #input\n            igxInput\n            tabindex=\"0\"\n            placeholder=\"Search\"\n            autocomplete=\"off\"\n        />\n    </igx-input-group>\n    <igx-list [displayDensity]=\"displayDensity\">\n        <igx-list-item\n            *ngFor=\"\n                let item of dims\n                    | filterPivotItems: input.value:grid?.pipeTrigger\n            \"\n            [id]=\"item.memberName\"\n        >\n            <igx-checkbox\n                [aria-labelledby]=\"item.memberName\"\n                [disableRipple]=\"true\"\n                [checked]=\"item.enabled\"\n                (click)=\"toggleItem(item)\"\n            ></igx-checkbox>\n            <span>{{ item.memberName }}</span>\n        </igx-list-item>\n        <igx-list-item\n            *ngFor=\"\n                let item of values\n                    | filterPivotItems: input.value:grid?.pipeTrigger\n            \"\n            [id]=\"item.member\"\n        >\n            <igx-checkbox\n                [aria-labelledby]=\"item.member\"\n                [disableRipple]=\"true\"\n                [checked]=\"item.enabled\"\n                (click)=\"toggleItem(item)\"\n            ></igx-checkbox>\n            <span>{{ item.displayName || item.member }}</span>\n        </igx-list-item>\n    </igx-list>\n</div>\n\n<igx-accordion>\n    <igx-expansion-panel\n        *ngFor=\"let panel of _panels\"\n        [animationSettings]=\"animationSettings\"\n        [collapsed]=\"getPanelCollapsed(panel.type)\"\n        (collapsedChange)=\"onCollapseChange($event, panel.type)\"\n    >\n        <igx-expansion-panel-header\n            iconPosition=\"left\"\n            [disabled]=\"false\"\n            igxDrop\n            (enter)=\"onPanelEntry($event, panel.name)\"\n            (dropped)=\"onItemDropped($event, panel.type)\"\n        >\n            <igx-expansion-panel-title class=\"igx-pivot-data-selector__header\">\n                <h6 class=\"igx-pivot-data-selector__header-title\">\n                    {{ grid?.resourceStrings[panel.i18n] }}\n                </h6>\n                <div class=\"igx-pivot-data-selector__header-extra\">\n                    <igx-icon>{{ panel.icon }}</igx-icon>\n                    <igx-chip>{{ this.grid ? this.grid[panel.dataKey].length : 0 }}</igx-chip>\n                </div>\n            </igx-expansion-panel-title>\n        </igx-expansion-panel-header>\n        <igx-expansion-panel-body\n            igxDrop\n            (enter)=\"onPanelEntry($event, panel.name)\"\n            (dropped)=\"onItemDropped($event, panel.type)\"\n        >\n            <igx-list\n                *ngIf=\"this.grid && this.grid[panel.dataKey].length > 0\"\n                [displayDensity]=\"displayDensity\"\n            >\n                <igx-list-item\n                    igxDrop\n                    [igxDrag]=\"{ gridID: grid.id, selectorChannels: panel.dragChannels }\"\n                    [ghostTemplate]=\"itemGhost\"\n                    (ghostCreate)=\"ghostCreated($event, item[panel.itemKey])\"\n                    (over)=\"onItemDragOver($event)\"\n                    (leave)=\"onItemDragLeave($event)\"\n                    (dragMove)=\"onItemDragMove($event)\"\n                    (dragEnd)=\"onItemDragEnd($event)\"\n                    (dropped)=\"onItemDropped($event, panel.type)\"\n                    *ngFor=\"\n                        let item of this.grid[panel.dataKey];\n                        let index\n                    \"\n                    [id]=\"item[panel.itemKey]\"\n                >\n                    <div class=\"igx-pivot-data-selector__item\">\n                        <div\n                            class=\"igx-pivot-data-selector__item-start\"\n                            (click)=\"onItemSort($event, item, panel.type)\"\n                            [class.igx-pivot-data-selector__action-sort]=\"\n                                panel.sortable\n                            \"\n                        >\n                            <div class=\"igx-pivot-data-selector__item-text\">\n                                <span *ngIf=\"panel.type === null\">{{\n                                    item.aggregate.key\n                                }}</span>\n                                <span *ngIf=\"panel.type === null\">(</span>\n                                <span>{{ item[panel.displayKey] || item[panel.itemKey] }}</span>\n                                <span *ngIf=\"panel.type === null\">)</span>\n                            </div>\n                            <igx-icon\n                                class=\"igx-pivot-data-selector__action-sort\"\n                                *ngIf=\"panel.sortable && item.sortDirection\"\n                            >\n                                {{\n                                    item.sortDirection < 2\n                                        ? \"arrow_upward\"\n                                        : \"arrow_downward\"\n                                }}\n                            </igx-icon>\n                        </div>\n                        <div class=\"igx-pivot-data-selector__item-end\">\n                            <igx-icon\n                                class=\"igx-pivot-data-selector__action-filter\"\n                                *ngIf=\"panel.type !== null\"\n                                (pointerdown)=\"\n                                    onFilteringIconPointerDown($event)\n                                \"\n                                (click)=\"onFilteringIconClick($event, item)\"\n                                >filter_list\n                            </igx-icon>\n                            <igx-icon\n                                class=\"igx-pivot-data-selector__action-summary\"\n                                *ngIf=\"panel.type === null\"\n                                (click)=\"onSummaryClick($event, item, dropdown)\"\n                                [igxDropDownItemNavigation]=\"dropdown\"\n                            >\n                                functions\n                            </igx-icon>\n                            <igx-icon\n                                igxDragHandle\n                                class=\"igx-pivot-data-selector__action-move\"\n                                *ngIf=\"panel.dragChannels.length > 0\"\n                                >drag_handle</igx-icon\n                            >\n                        </div>\n                    </div>\n                </igx-list-item>\n            </igx-list>\n            <div\n                class=\"igx-pivot-data-selector__empty\"\n                *ngIf=\"this.grid && this.grid[panel.dataKey].length === 0\"\n            >\n                {{ grid?.resourceStrings.igx_grid_pivot_selector_panel_empty }}\n            </div>\n        </igx-expansion-panel-body>\n    </igx-expansion-panel>\n</igx-accordion>\n\n<igx-drop-down #dropdown (selectionChanging)=\"onAggregationChange($event)\">\n    <igx-drop-down-item\n        *ngFor=\"let item of aggregateList\"\n        [selected]=\"isSelected(item)\"\n        [value]=\"item\"\n    >\n        {{ item.label }}\n    </igx-drop-down-item>\n</igx-drop-down>\n\n<ng-template #itemGhost>\n    <div\n        class=\"igx-pivot-data-selector__item-ghost\"\n        [style.width.px]=\"ghostWidth\"\n        [class.igx-pivot-data-selector__item-ghost--no-drop]=\"!dropAllowed\"\n    >\n        <div class=\"igx-pivot-data-selector__item-ghost-text\">\n            <igx-icon>unfold_more</igx-icon>\n            <span>{{ ghostText }}</span>\n        </div>\n        <igx-icon>drag_handle</igx-icon>\n    </div>\n</ng-template>\n", dependencies: [{ kind: "component", type: IgxInputGroupComponent, selector: "igx-input-group", inputs: ["resourceStrings", "suppressInputAutofocus", "type", "theme"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "active", "name"] }, { kind: "directive", type: IgxPrefixDirective, selector: "igx-prefix,[igxPrefix],[igxStart]" }, { kind: "directive", type: IgxInputDirective, selector: "[igxInput]", inputs: ["value", "disabled", "required"], exportAs: ["igxInput"] }, { kind: "component", type: IgxListComponent, selector: "igx-list", inputs: ["panEndTriggeringThreshold", "id", "allowLeftPanning", "allowRightPanning", "isLoading", "resourceStrings"], outputs: ["leftPan", "rightPan", "startPan", "endPan", "resetPan", "panStateChange", "itemClicked"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: IgxListItemComponent, selector: "igx-list-item", inputs: ["isHeader", "hidden", "index"] }, { kind: "component", type: IgxCheckboxComponent, selector: "igx-checkbox", inputs: ["id", "labelId", "value", "name", "tabindex", "labelPosition", "disableRipple", "required", "aria-labelledby", "aria-label", "indeterminate", "checked", "disabled", "invalid", "readonly", "disableTransitions"], outputs: ["change"] }, { kind: "component", type: IgxAccordionComponent, selector: "igx-accordion", inputs: ["id", "animationSettings", "singleBranchExpand"], outputs: ["panelExpanding", "panelExpanded", "panelCollapsing", "panelCollapsed"] }, { kind: "component", type: IgxExpansionPanelComponent, selector: "igx-expansion-panel", inputs: ["animationSettings", "id", "collapsed"], outputs: ["collapsedChange", "contentCollapsing", "contentCollapsed", "contentExpanding", "contentExpanded"] }, { kind: "component", type: IgxExpansionPanelHeaderComponent, selector: "igx-expansion-panel-header", inputs: ["lv", "role", "iconPosition", "disabled"], outputs: ["interaction"] }, { kind: "directive", type: IgxDropDirective, selector: "[igxDrop]", inputs: ["igxDrop", "dropChannel", "dropStrategy"], outputs: ["enter", "over", "leave", "dropped"], exportAs: ["drop"] }, { kind: "directive", type: IgxExpansionPanelTitleDirective, selector: "igx-expansion-panel-title" }, { kind: "component", type: IgxChipComponent, selector: "igx-chip", inputs: ["variant", "id", "tabIndex", "data", "draggable", "animateOnRelease", "hideBaseOnDrag", "removable", "removeIcon", "selectable", "selectIcon", "class", "disabled", "selected", "color", "resourceStrings"], outputs: ["selectedChange", "moveStart", "moveEnd", "remove", "chipClick", "selectedChanging", "selectedChanged", "keyDown", "dragEnter", "dragLeave", "dragOver", "dragDrop"] }, { kind: "component", type: IgxExpansionPanelBodyComponent, selector: "igx-expansion-panel-body", inputs: ["role", "label", "labelledBy"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: IgxDragDirective, selector: "[igxDrag]", inputs: ["igxDrag", "dragTolerance", "dragDirection", "dragChannel", "ghost", "ghostClass", "ghostTemplate", "ghostHost", "scrollContainer", "ghostOffsetX", "ghostOffsetY"], outputs: ["dragStart", "dragMove", "dragEnd", "dragClick", "ghostCreate", "ghostDestroy", "transitioned"], exportAs: ["drag"] }, { kind: "directive", type: IgxDropDownItemNavigationDirective, selector: "[igxDropDownItemNavigation]", inputs: ["igxDropDownItemNavigation"] }, { kind: "directive", type: IgxDragHandleDirective, selector: "[igxDragHandle]" }, { kind: "component", type: IgxDropDownComponent, selector: "igx-drop-down", inputs: ["allowItemsFocus", "labelledBy"], outputs: ["opening", "opened", "closing", "closed"] }, { kind: "component", type: IgxDropDownItemComponent, selector: "igx-drop-down-item" }, { kind: "pipe", type: IgxFilterPivotItemsPipe, name: "filterPivotItems" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxPivotDataSelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: "igx-pivot-data-selector", standalone: true, imports: [IgxInputGroupComponent, IgxIconComponent, IgxPrefixDirective, IgxInputDirective, IgxListComponent, NgFor, IgxListItemComponent, IgxCheckboxComponent, IgxAccordionComponent, IgxExpansionPanelComponent, IgxExpansionPanelHeaderComponent, IgxDropDirective, IgxExpansionPanelTitleDirective, IgxChipComponent, IgxExpansionPanelBodyComponent, NgIf, IgxDragDirective, IgxDropDownItemNavigationDirective, IgxDragHandleDirective, IgxDropDownComponent, IgxDropDownItemComponent, IgxFilterPivotItemsPipe], template: "<div class=\"igx-pivot-data-selector__filter\">\n    <igx-input-group type=\"box\" [displayDensity]=\"displayDensity\">\n        <igx-icon igxPrefix>search</igx-icon>\n        <input\n            #input\n            igxInput\n            tabindex=\"0\"\n            placeholder=\"Search\"\n            autocomplete=\"off\"\n        />\n    </igx-input-group>\n    <igx-list [displayDensity]=\"displayDensity\">\n        <igx-list-item\n            *ngFor=\"\n                let item of dims\n                    | filterPivotItems: input.value:grid?.pipeTrigger\n            \"\n            [id]=\"item.memberName\"\n        >\n            <igx-checkbox\n                [aria-labelledby]=\"item.memberName\"\n                [disableRipple]=\"true\"\n                [checked]=\"item.enabled\"\n                (click)=\"toggleItem(item)\"\n            ></igx-checkbox>\n            <span>{{ item.memberName }}</span>\n        </igx-list-item>\n        <igx-list-item\n            *ngFor=\"\n                let item of values\n                    | filterPivotItems: input.value:grid?.pipeTrigger\n            \"\n            [id]=\"item.member\"\n        >\n            <igx-checkbox\n                [aria-labelledby]=\"item.member\"\n                [disableRipple]=\"true\"\n                [checked]=\"item.enabled\"\n                (click)=\"toggleItem(item)\"\n            ></igx-checkbox>\n            <span>{{ item.displayName || item.member }}</span>\n        </igx-list-item>\n    </igx-list>\n</div>\n\n<igx-accordion>\n    <igx-expansion-panel\n        *ngFor=\"let panel of _panels\"\n        [animationSettings]=\"animationSettings\"\n        [collapsed]=\"getPanelCollapsed(panel.type)\"\n        (collapsedChange)=\"onCollapseChange($event, panel.type)\"\n    >\n        <igx-expansion-panel-header\n            iconPosition=\"left\"\n            [disabled]=\"false\"\n            igxDrop\n            (enter)=\"onPanelEntry($event, panel.name)\"\n            (dropped)=\"onItemDropped($event, panel.type)\"\n        >\n            <igx-expansion-panel-title class=\"igx-pivot-data-selector__header\">\n                <h6 class=\"igx-pivot-data-selector__header-title\">\n                    {{ grid?.resourceStrings[panel.i18n] }}\n                </h6>\n                <div class=\"igx-pivot-data-selector__header-extra\">\n                    <igx-icon>{{ panel.icon }}</igx-icon>\n                    <igx-chip>{{ this.grid ? this.grid[panel.dataKey].length : 0 }}</igx-chip>\n                </div>\n            </igx-expansion-panel-title>\n        </igx-expansion-panel-header>\n        <igx-expansion-panel-body\n            igxDrop\n            (enter)=\"onPanelEntry($event, panel.name)\"\n            (dropped)=\"onItemDropped($event, panel.type)\"\n        >\n            <igx-list\n                *ngIf=\"this.grid && this.grid[panel.dataKey].length > 0\"\n                [displayDensity]=\"displayDensity\"\n            >\n                <igx-list-item\n                    igxDrop\n                    [igxDrag]=\"{ gridID: grid.id, selectorChannels: panel.dragChannels }\"\n                    [ghostTemplate]=\"itemGhost\"\n                    (ghostCreate)=\"ghostCreated($event, item[panel.itemKey])\"\n                    (over)=\"onItemDragOver($event)\"\n                    (leave)=\"onItemDragLeave($event)\"\n                    (dragMove)=\"onItemDragMove($event)\"\n                    (dragEnd)=\"onItemDragEnd($event)\"\n                    (dropped)=\"onItemDropped($event, panel.type)\"\n                    *ngFor=\"\n                        let item of this.grid[panel.dataKey];\n                        let index\n                    \"\n                    [id]=\"item[panel.itemKey]\"\n                >\n                    <div class=\"igx-pivot-data-selector__item\">\n                        <div\n                            class=\"igx-pivot-data-selector__item-start\"\n                            (click)=\"onItemSort($event, item, panel.type)\"\n                            [class.igx-pivot-data-selector__action-sort]=\"\n                                panel.sortable\n                            \"\n                        >\n                            <div class=\"igx-pivot-data-selector__item-text\">\n                                <span *ngIf=\"panel.type === null\">{{\n                                    item.aggregate.key\n                                }}</span>\n                                <span *ngIf=\"panel.type === null\">(</span>\n                                <span>{{ item[panel.displayKey] || item[panel.itemKey] }}</span>\n                                <span *ngIf=\"panel.type === null\">)</span>\n                            </div>\n                            <igx-icon\n                                class=\"igx-pivot-data-selector__action-sort\"\n                                *ngIf=\"panel.sortable && item.sortDirection\"\n                            >\n                                {{\n                                    item.sortDirection < 2\n                                        ? \"arrow_upward\"\n                                        : \"arrow_downward\"\n                                }}\n                            </igx-icon>\n                        </div>\n                        <div class=\"igx-pivot-data-selector__item-end\">\n                            <igx-icon\n                                class=\"igx-pivot-data-selector__action-filter\"\n                                *ngIf=\"panel.type !== null\"\n                                (pointerdown)=\"\n                                    onFilteringIconPointerDown($event)\n                                \"\n                                (click)=\"onFilteringIconClick($event, item)\"\n                                >filter_list\n                            </igx-icon>\n                            <igx-icon\n                                class=\"igx-pivot-data-selector__action-summary\"\n                                *ngIf=\"panel.type === null\"\n                                (click)=\"onSummaryClick($event, item, dropdown)\"\n                                [igxDropDownItemNavigation]=\"dropdown\"\n                            >\n                                functions\n                            </igx-icon>\n                            <igx-icon\n                                igxDragHandle\n                                class=\"igx-pivot-data-selector__action-move\"\n                                *ngIf=\"panel.dragChannels.length > 0\"\n                                >drag_handle</igx-icon\n                            >\n                        </div>\n                    </div>\n                </igx-list-item>\n            </igx-list>\n            <div\n                class=\"igx-pivot-data-selector__empty\"\n                *ngIf=\"this.grid && this.grid[panel.dataKey].length === 0\"\n            >\n                {{ grid?.resourceStrings.igx_grid_pivot_selector_panel_empty }}\n            </div>\n        </igx-expansion-panel-body>\n    </igx-expansion-panel>\n</igx-accordion>\n\n<igx-drop-down #dropdown (selectionChanging)=\"onAggregationChange($event)\">\n    <igx-drop-down-item\n        *ngFor=\"let item of aggregateList\"\n        [selected]=\"isSelected(item)\"\n        [value]=\"item\"\n    >\n        {{ item.label }}\n    </igx-drop-down-item>\n</igx-drop-down>\n\n<ng-template #itemGhost>\n    <div\n        class=\"igx-pivot-data-selector__item-ghost\"\n        [style.width.px]=\"ghostWidth\"\n        [class.igx-pivot-data-selector__item-ghost--no-drop]=\"!dropAllowed\"\n    >\n        <div class=\"igx-pivot-data-selector__item-ghost-text\">\n            <igx-icon>unfold_more</igx-icon>\n            <span>{{ ghostText }}</span>\n        </div>\n        <igx-icon>drag_handle</igx-icon>\n    </div>\n</ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { columnsExpanded: [{
                type: Input
            }], columnsExpandedChange: [{
                type: Output
            }], rowsExpanded: [{
                type: Input
            }], rowsExpandedChange: [{
                type: Output
            }], filtersExpanded: [{
                type: Input
            }], filtersExpandedChange: [{
                type: Output
            }], valuesExpanded: [{
                type: Input
            }], valuesExpandedChange: [{
                type: Output
            }], cssClass: [{
                type: HostBinding,
                args: ["class.igx-pivot-data-selector"]
            }], grid: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,