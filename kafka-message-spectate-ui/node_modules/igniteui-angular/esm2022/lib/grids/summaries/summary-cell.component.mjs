import { Component, Input, HostBinding, HostListener, ChangeDetectionStrategy } from '@angular/core';
import { GridColumnDataType } from '../../data-operations/data-util';
import { formatCurrency, formatDate, formatNumber, formatPercent, getLocaleCurrencyCode, getLocaleCurrencySymbol, NgIf, NgTemplateOutlet, NgFor } from '@angular/common';
import * as i0 from "@angular/core";
export class IgxSummaryCellComponent {
    constructor(element) {
        this.element = element;
        this.firstCellIndentation = 0;
        this.hasSummary = false;
    }
    get visibleColumnIndex() {
        return this.column.visibleIndex;
    }
    get attrCellID() {
        return `${this.grid.id}_${this.rowIndex}_${this.visibleColumnIndex}`;
    }
    activate() {
        const currNode = this.grid.navigation.activeNode;
        if (currNode && this.rowIndex === currNode.row && this.visibleColumnIndex === currNode.column) {
            return;
        }
        this.grid.navigation.setActiveNode({ row: this.rowIndex, column: this.visibleColumnIndex }, 'summaryCell');
        this.grid.cdr.detectChanges();
    }
    get selectionNode() {
        return {
            row: this.rowIndex,
            column: this.column.columnLayoutChild ? this.column.parent.visibleIndex : this.visibleColumnIndex,
            isSummaryRow: true
        };
    }
    get width() {
        return this.column.getCellWidth();
    }
    get nativeElement() {
        return this.element.nativeElement;
    }
    get columnDatatype() {
        return this.column.dataType;
    }
    get itemHeight() {
        return this.column.grid.defaultSummaryHeight;
    }
    /**
     * @hidden
     */
    get grid() {
        return this.column.grid;
    }
    /**
     * @hidden @internal
     */
    get currencyCode() {
        return this.column.pipeArgs.currencyCode ?
            this.column.pipeArgs.currencyCode : getLocaleCurrencyCode(this.grid.locale);
    }
    /**
     * @hidden @internal
     */
    get currencySymbol() {
        return this.column.pipeArgs.display ?
            this.column.pipeArgs.display : getLocaleCurrencySymbol(this.grid.locale);
    }
    translateSummary(summary) {
        return this.grid.resourceStrings[`igx_grid_summary_${summary.key}`] || summary.label;
    }
    /**
     * @hidden @internal
     */
    formatSummaryResult(summary) {
        if (summary.summaryResult === undefined || summary.summaryResult === null || summary.summaryResult === '') {
            return '';
        }
        if (this.summaryFormatter) {
            return this.summaryFormatter(summary, this.column.summaries);
        }
        const args = this.column.pipeArgs;
        const locale = this.grid.locale;
        if (summary.key === 'count') {
            return formatNumber(summary.summaryResult, locale);
        }
        if (summary.defaultFormatting) {
            switch (this.column.dataType) {
                case GridColumnDataType.Number:
                    return formatNumber(summary.summaryResult, locale, args.digitsInfo);
                case GridColumnDataType.Date:
                case GridColumnDataType.DateTime:
                case GridColumnDataType.Time:
                    return formatDate(summary.summaryResult, args.format, locale, args.timezone);
                case GridColumnDataType.Currency:
                    return formatCurrency(summary.summaryResult, locale, this.currencySymbol, this.currencyCode, args.digitsInfo);
                case GridColumnDataType.Percent:
                    return formatPercent(summary.summaryResult, locale, args.digitsInfo);
            }
        }
        return summary.summaryResult;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxSummaryCellComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.2", type: IgxSummaryCellComponent, isStandalone: true, selector: "igx-grid-summary-cell", inputs: { summaryResults: "summaryResults", column: "column", firstCellIndentation: "firstCellIndentation", hasSummary: "hasSummary", density: "density", summaryFormatter: "summaryFormatter", summaryTemplate: "summaryTemplate", active: "active", rowIndex: "rowIndex" }, host: { listeners: { "pointerdown": "activate()" }, properties: { "class.igx-grid-summary--active": "this.active", "attr.data-rowIndex": "this.rowIndex", "attr.data-visibleIndex": "this.visibleColumnIndex", "attr.id": "this.attrCellID" } }, ngImport: i0, template: "<ng-container *ngIf=\"hasSummary\">\n    <ng-container *ngTemplateOutlet=\"summaryTemplate ? summaryTemplate : defaultSummary; context: { $implicit: summaryResults }\">\n    </ng-container>\n</ng-container>\n    <ng-template #defaultSummary>\n        <ng-container *ngFor=\"let summary of summaryResults\" >\n            <div class=\"igx-grid-summary__item\" [style.height.px]=\"itemHeight\">\n\n                <span class=\"igx-grid-summary__label\" [title]=\"summary.label\">{{ translateSummary(summary) }}</span>\n                <span class=\"igx-grid-summary__result\" [title]=\"formatSummaryResult(summary)\">\n                    {{\n                        formatSummaryResult(summary)\n                    }}\n                </span>\n            </div>\n        </ng-container>\n    </ng-template>\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxSummaryCellComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'igx-grid-summary-cell', standalone: true, imports: [NgIf, NgTemplateOutlet, NgFor], template: "<ng-container *ngIf=\"hasSummary\">\n    <ng-container *ngTemplateOutlet=\"summaryTemplate ? summaryTemplate : defaultSummary; context: { $implicit: summaryResults }\">\n    </ng-container>\n</ng-container>\n    <ng-template #defaultSummary>\n        <ng-container *ngFor=\"let summary of summaryResults\" >\n            <div class=\"igx-grid-summary__item\" [style.height.px]=\"itemHeight\">\n\n                <span class=\"igx-grid-summary__label\" [title]=\"summary.label\">{{ translateSummary(summary) }}</span>\n                <span class=\"igx-grid-summary__result\" [title]=\"formatSummaryResult(summary)\">\n                    {{\n                        formatSummaryResult(summary)\n                    }}\n                </span>\n            </div>\n        </ng-container>\n    </ng-template>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { summaryResults: [{
                type: Input
            }], column: [{
                type: Input
            }], firstCellIndentation: [{
                type: Input
            }], hasSummary: [{
                type: Input
            }], density: [{
                type: Input
            }], summaryFormatter: [{
                type: Input
            }], summaryTemplate: [{
                type: Input
            }], active: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.igx-grid-summary--active']
            }], rowIndex: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-rowIndex']
            }], visibleColumnIndex: [{
                type: HostBinding,
                args: ['attr.data-visibleIndex']
            }], attrCellID: [{
                type: HostBinding,
                args: ['attr.id']
            }], activate: [{
                type: HostListener,
                args: ['pointerdown']
            }] } });
//# sourceMappingURL=data:application/json;base64,