import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { GridPagingMode } from '../common/enums';
import { PivotUtil } from '../pivot-grid/pivot-util';
import * as i0 from "@angular/core";
import * as i1 from "../../core/utils";
export class IgxGridSelectionService {
    /**
     * Returns the current selected ranges in the grid from both
     * keyboard and pointer interactions
     */
    get ranges() {
        // The last action was keyboard + shift selection -> add it
        this.addKeyboardRange();
        const ranges = Array.from(this._ranges).map(range => JSON.parse(range));
        // No ranges but we have a focused cell -> add it
        if (!ranges.length && this.activeElement && this.grid.isCellSelectable) {
            ranges.push(this.generateRange(this.activeElement));
        }
        return ranges;
    }
    get primaryButton() {
        return this.pointerState.primaryButton;
    }
    set primaryButton(value) {
        this.pointerState.primaryButton = value;
    }
    constructor(zone, platform) {
        this.zone = zone;
        this.platform = platform;
        this.dragMode = false;
        this.keyboardState = {};
        this.pointerState = {};
        this.columnsState = {};
        this.selection = new Map();
        this.temp = new Map();
        this.rowSelection = new Set();
        this.indeterminateRows = new Set();
        this.columnSelection = new Set();
        /**
         * @hidden @internal
         */
        this.selectedRowsChange = new Subject();
        /**
         * Toggled when a pointerdown event is triggered inside the grid body (cells).
         * When `false` the drag select behavior is disabled.
         */
        this.pointerEventInGridBody = false;
        this._ranges = new Set();
        this.pointerOriginHandler = (event) => {
            this.pointerEventInGridBody = false;
            document.body.removeEventListener('pointerup', this.pointerOriginHandler);
            const targetTagName = event.target.tagName.toLowerCase();
            if (targetTagName !== 'igx-grid-cell' && targetTagName !== 'igx-tree-grid-cell') {
                this.pointerUp(this._lastSelectedNode, this.grid.rangeSelected, true);
            }
        };
        this.initPointerState();
        this.initKeyboardState();
        this.initColumnsState();
    }
    /**
     * Resets the keyboard state
     */
    initKeyboardState() {
        this.keyboardState.node = null;
        this.keyboardState.shift = false;
        this.keyboardState.range = null;
        this.keyboardState.active = false;
    }
    /**
     * Resets the pointer state
     */
    initPointerState() {
        this.pointerState.node = null;
        this.pointerState.ctrl = false;
        this.pointerState.shift = false;
        this.pointerState.range = null;
        this.pointerState.primaryButton = true;
    }
    /**
     * Resets the columns state
     */
    initColumnsState() {
        this.columnsState.field = null;
        this.columnsState.range = [];
    }
    /**
     * Adds a single node.
     * Single clicks | Ctrl + single clicks on cells is the usual case.
     */
    add(node, addToRange = true) {
        if (this.selection.has(node.row)) {
            this.selection.get(node.row).add(node.column);
        }
        else {
            this.selection.set(node.row, new Set()).get(node.row).add(node.column);
        }
        if (addToRange) {
            this._ranges.add(JSON.stringify(this.generateRange(node)));
        }
    }
    /**
     * Adds the active keyboard range selection (if any) to the `ranges` meta.
     */
    addKeyboardRange() {
        if (this.keyboardState.range) {
            this._ranges.add(JSON.stringify(this.keyboardState.range));
        }
    }
    remove(node) {
        if (this.selection.has(node.row)) {
            this.selection.get(node.row).delete(node.column);
        }
        if (this.isActiveNode(node)) {
            this.activeElement = null;
        }
        this._ranges.delete(JSON.stringify(this.generateRange(node)));
    }
    isInMap(node) {
        return (this.selection.has(node.row) && this.selection.get(node.row).has(node.column)) ||
            (this.temp.has(node.row) && this.temp.get(node.row).has(node.column));
    }
    selected(node) {
        return (this.isActiveNode(node) && this.grid.isCellSelectable) || this.isInMap(node);
    }
    isActiveNode(node) {
        if (this.activeElement) {
            const isActive = this.activeElement.column === node.column && this.activeElement.row === node.row;
            if (this.grid.hasColumnLayouts) {
                const layout = this.activeElement.layout;
                return isActive && this.isActiveLayout(layout, node.layout);
            }
            return isActive;
        }
        return false;
    }
    isActiveLayout(current, target) {
        return current.columnVisibleIndex === target.columnVisibleIndex;
    }
    addRangeMeta(node, state) {
        this._ranges.add(JSON.stringify(this.generateRange(node, state)));
    }
    removeRangeMeta(node, state) {
        this._ranges.delete(JSON.stringify(this.generateRange(node, state)));
    }
    /**
     * Generates a new selection range from the given `node`.
     * If `state` is passed instead it will generate the range based on the passed `node`
     * and the start node of the `state`.
     */
    generateRange(node, state) {
        this._lastSelectedNode = node;
        if (!state) {
            return {
                rowStart: node.row,
                rowEnd: node.row,
                columnStart: node.column,
                columnEnd: node.column
            };
        }
        const { row, column } = state.node;
        const rowStart = Math.min(node.row, row);
        const rowEnd = Math.max(node.row, row);
        const columnStart = Math.min(node.column, column);
        const columnEnd = Math.max(node.column, column);
        return { rowStart, rowEnd, columnStart, columnEnd };
    }
    /**
     *
     */
    keyboardStateOnKeydown(node, shift, shiftTab) {
        this.keyboardState.active = true;
        this.initPointerState();
        this.keyboardState.shift = shift && !shiftTab;
        if (!this.grid.navigation.isDataRow(node.row)) {
            return;
        }
        // Kb navigation with shift and no previous node.
        // Clear the current selection init the start node.
        if (this.keyboardState.shift && !this.keyboardState.node) {
            this.clear();
            this.keyboardState.node = Object.assign({}, node);
        }
    }
    keyboardStateOnFocus(node, emitter, dom) {
        const kbState = this.keyboardState;
        // Focus triggered by keyboard navigation
        if (kbState.active) {
            if (this.platform.isChromium) {
                this._moveSelectionChrome(dom);
            }
            // Start generating a range if shift is hold
            if (kbState.shift) {
                this.dragSelect(node, kbState);
                kbState.range = this.generateRange(node, kbState);
                emitter.emit(this.generateRange(node, kbState));
                return;
            }
            this.initKeyboardState();
            this.clear();
            this.add(node);
        }
    }
    pointerDown(node, shift, ctrl) {
        this.addKeyboardRange();
        this.initKeyboardState();
        this.pointerState.ctrl = ctrl;
        this.pointerState.shift = shift;
        this.pointerEventInGridBody = true;
        document.body.addEventListener('pointerup', this.pointerOriginHandler);
        // No ctrl key pressed - no multiple selection
        if (!ctrl) {
            this.clear();
        }
        if (shift) {
            // No previously 'clicked' node. Use the last active node.
            if (!this.pointerState.node) {
                this.pointerState.node = this.activeElement || node;
            }
            this.pointerDownShiftKey(node);
            this.clearTextSelection();
            return;
        }
        this.removeRangeMeta(node);
        this.pointerState.node = node;
    }
    pointerDownShiftKey(node) {
        this.clear();
        this.selectRange(node, this.pointerState);
    }
    mergeMap(target, source) {
        const iterator = source.entries();
        let pair = iterator.next();
        let key;
        let value;
        while (!pair.done) {
            [key, value] = pair.value;
            if (target.has(key)) {
                const newValue = target.get(key);
                value.forEach(record => newValue.add(record));
                target.set(key, newValue);
            }
            else {
                target.set(key, value);
            }
            pair = iterator.next();
        }
    }
    pointerEnter(node, event) {
        // https://www.w3.org/TR/pointerevents/#the-button-property
        this.dragMode = (event.buttons === 1 && (event.button === -1 || event.button === 0)) && this.pointerEventInGridBody;
        if (!this.dragMode) {
            return false;
        }
        this.clearTextSelection();
        // If the users triggers a drag-like event by first clicking outside the grid cells
        // and then enters in the grid body we may not have a initial pointer starting node.
        // Assume the first pointerenter node is where we start.
        if (!this.pointerState.node) {
            this.pointerState.node = node;
        }
        if (this.pointerState.ctrl) {
            this.selectRange(node, this.pointerState, this.temp);
        }
        else {
            this.dragSelect(node, this.pointerState);
        }
        return true;
    }
    pointerUp(node, emitter, firedOutsideGrid) {
        if (this.dragMode || firedOutsideGrid) {
            this.restoreTextSelection();
            this.addRangeMeta(node, this.pointerState);
            this.mergeMap(this.selection, this.temp);
            this.zone.runTask(() => emitter.emit(this.generateRange(node, this.pointerState)));
            this.temp.clear();
            this.dragMode = false;
            return true;
        }
        if (this.pointerState.shift) {
            this.clearTextSelection();
            this.restoreTextSelection();
            this.addRangeMeta(node, this.pointerState);
            emitter.emit(this.generateRange(node, this.pointerState));
            return true;
        }
        if (this.pointerEventInGridBody && this.isActiveNode(node)) {
            this.add(node);
        }
        return false;
    }
    selectRange(node, state, collection = this.selection) {
        if (collection === this.temp) {
            collection.clear();
        }
        const { rowStart, rowEnd, columnStart, columnEnd } = this.generateRange(node, state);
        for (let i = rowStart; i <= rowEnd; i++) {
            for (let j = columnStart; j <= columnEnd; j++) {
                if (collection.has(i)) {
                    collection.get(i).add(j);
                }
                else {
                    collection.set(i, new Set()).get(i).add(j);
                }
            }
        }
    }
    dragSelect(node, state) {
        if (!this.pointerState.ctrl) {
            this.selection.clear();
        }
        this.selectRange(node, state);
    }
    clear(clearAcriveEl = false) {
        if (clearAcriveEl) {
            this.activeElement = null;
        }
        this.selection.clear();
        this.temp.clear();
        this._ranges.clear();
    }
    clearTextSelection() {
        const selection = window.getSelection();
        if (selection.rangeCount) {
            this._selectionRange = selection.getRangeAt(0);
            this._selectionRange.collapse(true);
            selection.removeAllRanges();
        }
    }
    restoreTextSelection() {
        const selection = window.getSelection();
        if (!selection.rangeCount) {
            selection.addRange(this._selectionRange || document.createRange());
        }
    }
    getSelectedRowsData() {
        if (this.grid.isPivot) {
            return this.grid.dataView.filter(r => {
                const keys = r.dimensions.map(d => PivotUtil.getRecordKey(r, d));
                return keys.some(k => this.isPivotRowSelected(k));
            });
        }
        if (this.rowSelection.size && this.grid.totalItemCount || this.grid.pagingMode === GridPagingMode.Remote) {
            if (!this.grid.primaryKey) {
                return Array.from(this.rowSelection);
            }
            const selection = [];
            this.rowSelection.forEach(rID => {
                const rData = this.grid.gridAPI.get_all_data(true).find(row => this.getRecordKey(row) === rID);
                const partialRowData = {};
                partialRowData[this.grid.primaryKey] = rID;
                selection.push(rData ? rData : partialRowData);
            });
            return selection;
        }
        return this.rowSelection.size ? this.grid.gridAPI.get_all_data(true).filter(row => this.rowSelection.has(this.getRecordKey(row))) : [];
    }
    /** Returns array of the selected row id's. */
    getSelectedRows() {
        return this.rowSelection.size ? Array.from(this.rowSelection.keys()) : [];
    }
    /** Returns array of the rows in indeterminate state. */
    getIndeterminateRows() {
        return this.indeterminateRows.size ? Array.from(this.indeterminateRows.keys()) : [];
    }
    /** Clears row selection, if filtering is applied clears only selected rows from filtered data. */
    clearRowSelection(event) {
        const selectedRows = this.getSelectedRowsData();
        const removedRec = this.isFilteringApplied() ?
            this.allData.filter(row => this.isRowSelected(this.getRecordKey(row))) : selectedRows;
        const newSelection = this.isFilteringApplied() ? selectedRows.filter(x => !removedRec.includes(x)) : [];
        this.emitRowSelectionEvent(newSelection, [], removedRec, event, selectedRows);
    }
    /** Select all rows, if filtering is applied select only from filtered data. */
    selectAllRows(event) {
        const addedRows = this.allData.filter((row) => !this.isRowSelected(this.getRecordKey(row)));
        const selectedRows = this.getSelectedRowsData();
        const newSelection = this.rowSelection.size ? selectedRows.concat(addedRows) : addedRows;
        this.indeterminateRows.clear();
        this.emitRowSelectionEvent(newSelection, addedRows, [], event, selectedRows);
    }
    /** Select the specified row and emit event. */
    selectRowById(rowID, clearPrevSelection, event) {
        if (!(this.grid.isRowSelectable || this.grid.isPivot) || this.isRowDeleted(rowID)) {
            return;
        }
        clearPrevSelection = !this.grid.isMultiRowSelectionEnabled || clearPrevSelection;
        if (this.grid.isPivot) {
            this.selectPivotRowById(rowID, clearPrevSelection, event);
            return;
        }
        const selectedRows = this.getSelectedRowsData();
        const newSelection = clearPrevSelection ? [this.getRowDataById(rowID)] : this.rowSelection.has(rowID) ?
            selectedRows : [...selectedRows, this.getRowDataById(rowID)];
        const removed = clearPrevSelection ? selectedRows : [];
        this.emitRowSelectionEvent(newSelection, [this.getRowDataById(rowID)], removed, event, selectedRows);
    }
    selectPivotRowById(rowID, clearPrevSelection, event) {
        const selectedRows = this.getSelectedRows();
        const newSelection = clearPrevSelection ? [rowID] : this.rowSelection.has(rowID) ? selectedRows : [...selectedRows, rowID];
        const added = this.getPivotRowsByIds([rowID]);
        const removed = this.getPivotRowsByIds(clearPrevSelection ? selectedRows : []);
        this.emitRowSelectionEventPivotGrid(selectedRows, newSelection, added, removed, event);
    }
    /** Deselect the specified row and emit event. */
    deselectRow(rowID, event) {
        if (!this.isRowSelected(rowID)) {
            return;
        }
        if (this.grid.isPivot) {
            this.deselectPivotRowByID(rowID, event);
            return;
        }
        const selectedRows = this.getSelectedRowsData();
        const newSelection = selectedRows.filter(r => this.getRecordKey(r) !== rowID);
        if (this.rowSelection.size && this.rowSelection.has(rowID)) {
            this.emitRowSelectionEvent(newSelection, [], [this.getRowDataById(rowID)], event, selectedRows);
        }
    }
    deselectPivotRowByID(rowID, event) {
        if (this.rowSelection.size && this.rowSelection.has(rowID)) {
            const currSelection = this.getSelectedRows();
            const newSelection = currSelection.filter(r => r !== rowID);
            const removed = this.getPivotRowsByIds([rowID]);
            this.emitRowSelectionEventPivotGrid(currSelection, newSelection, [], removed, event);
        }
    }
    emitRowSelectionEventPivotGrid(currSelection, newSelection, added, removed, event) {
        if (this.areEqualCollections(currSelection, newSelection)) {
            return;
        }
        const currSelectedRows = this.getSelectedRowsData();
        const args = {
            owner: this.grid,
            oldSelection: currSelectedRows,
            newSelection: this.getPivotRowsByIds(newSelection),
            added,
            removed,
            event,
            cancel: false,
            allRowsSelected: this.areAllRowSelected(newSelection)
        };
        this.grid.rowSelectionChanging.emit(args);
        if (args.cancel) {
            this.clearHeaderCBState();
            return;
        }
        this.selectRowsWithNoEvent(newSelection, true);
    }
    /** Select the specified rows and emit event. */
    selectRows(keys, clearPrevSelection, event) {
        if (!this.grid.isMultiRowSelectionEnabled) {
            return;
        }
        let rowsToSelect = keys.filter(x => !this.isRowDeleted(x) && !this.rowSelection.has(x));
        if (!rowsToSelect.length && !clearPrevSelection) {
            // no valid/additional rows to select and no clear
            return;
        }
        const selectedRows = this.getSelectedRowsData();
        rowsToSelect = this.grid.primaryKey ? rowsToSelect.map(r => this.getRowDataById(r)) : rowsToSelect;
        const newSelection = clearPrevSelection ? rowsToSelect : [...selectedRows, ...rowsToSelect];
        const keysAsSet = new Set(rowsToSelect);
        const removed = clearPrevSelection ? selectedRows.filter(x => !keysAsSet.has(x)) : [];
        this.emitRowSelectionEvent(newSelection, rowsToSelect, removed, event, selectedRows);
    }
    deselectRows(keys, event) {
        if (!this.rowSelection.size) {
            return;
        }
        let rowsToDeselect = keys.filter(x => this.rowSelection.has(x));
        if (!rowsToDeselect.length) {
            return;
        }
        const selectedRows = this.getSelectedRowsData();
        rowsToDeselect = this.grid.primaryKey ? rowsToDeselect.map(r => this.getRowDataById(r)) : rowsToDeselect;
        const keysAsSet = new Set(rowsToDeselect);
        const newSelection = selectedRows.filter(r => !keysAsSet.has(r));
        this.emitRowSelectionEvent(newSelection, [], rowsToDeselect, event, selectedRows);
    }
    /** Select specified rows. No event is emitted. */
    selectRowsWithNoEvent(rowIDs, clearPrevSelection) {
        if (clearPrevSelection) {
            this.rowSelection.clear();
        }
        rowIDs.forEach(rowID => this.rowSelection.add(rowID));
        this.clearHeaderCBState();
        this.selectedRowsChange.next();
    }
    /** Deselect specified rows. No event is emitted. */
    deselectRowsWithNoEvent(rowIDs) {
        this.clearHeaderCBState();
        rowIDs.forEach(rowID => this.rowSelection.delete(rowID));
        this.selectedRowsChange.next();
    }
    isRowSelected(rowID) {
        return this.rowSelection.size > 0 && this.rowSelection.has(rowID);
    }
    isPivotRowSelected(rowID) {
        let contains = false;
        this.rowSelection.forEach(x => {
            const correctRowId = rowID.replace(x, '');
            if (rowID.includes(x) && (correctRowId === '' || correctRowId.startsWith('_'))) {
                contains = true;
                return;
            }
        });
        return this.rowSelection.size > 0 && contains;
    }
    isRowInIndeterminateState(rowID) {
        return this.indeterminateRows.size > 0 && this.indeterminateRows.has(rowID);
    }
    /** Select range from last selected row to the current specified row. */
    selectMultipleRows(rowID, rowData, event) {
        this.clearHeaderCBState();
        if (!this.rowSelection.size || this.isRowDeleted(rowID)) {
            this.selectRowById(rowID);
            return;
        }
        const gridData = this.allData;
        const lastRowID = this.getSelectedRows()[this.rowSelection.size - 1];
        const currIndex = gridData.indexOf(this.getRowDataById(lastRowID));
        const newIndex = gridData.indexOf(rowData);
        const rows = gridData.slice(Math.min(currIndex, newIndex), Math.max(currIndex, newIndex) + 1);
        const currSelection = this.getSelectedRowsData();
        const added = rows.filter(r => !this.isRowSelected(this.getRecordKey(r)));
        const newSelection = currSelection.concat(added);
        this.emitRowSelectionEvent(newSelection, added, [], event, currSelection);
    }
    areAllRowSelected(newSelection) {
        if (!this.grid.data && !newSelection) {
            return false;
        }
        if (this.allRowsSelected !== undefined && !newSelection) {
            return this.allRowsSelected;
        }
        const selectedData = newSelection ? newSelection : [...this.rowSelection];
        const allData = this.getRowIDs(this.allData);
        const unSelectedRows = allData.filter(row => !selectedData.includes(row));
        return this.allRowsSelected = this.allData.length > 0 && unSelectedRows.length === 0;
    }
    hasSomeRowSelected() {
        const filteredData = this.isFilteringApplied() ?
            this.getRowIDs(this.grid.filteredData).some(rID => this.isRowSelected(rID)) : true;
        return this.rowSelection.size > 0 && filteredData && !this.areAllRowSelected();
    }
    get filteredSelectedRowIds() {
        return this.isFilteringApplied() ?
            this.getRowIDs(this.allData).filter(rowID => this.isRowSelected(rowID)) :
            this.getSelectedRows().filter(rowID => !this.isRowDeleted(rowID));
    }
    emitRowSelectionEvent(newSelection, added, removed, event, currSelection) {
        currSelection = currSelection ?? this.getSelectedRowsData();
        if (this.areEqualCollections(currSelection, newSelection)) {
            return;
        }
        const args = {
            owner: this.grid,
            oldSelection: currSelection,
            newSelection,
            added, removed,
            event, cancel: false,
            allRowsSelected: this.areAllRowSelected(newSelection.map(r => this.getRecordKey(r)))
        };
        this.grid.rowSelectionChanging.emit(args);
        if (args.cancel) {
            this.clearHeaderCBState();
            return;
        }
        this.selectRowsWithNoEvent(args.newSelection.map(r => this.getRecordKey(r)), true);
    }
    getPivotRowsByIds(ids) {
        return this.grid.dataView.filter(r => {
            const keys = r.dimensions.map(d => PivotUtil.getRecordKey(r, d));
            return new Set(ids.concat(keys)).size < ids.length + keys.length;
        });
    }
    getRowDataById(rowID) {
        if (!this.grid.primaryKey) {
            return rowID;
        }
        const rowIndex = this.getRowIDs(this.grid.gridAPI.get_all_data(true)).indexOf(rowID);
        return rowIndex < 0 ? rowID : this.grid.gridAPI.get_all_data(true)[rowIndex];
    }
    clearHeaderCBState() {
        this.allRowsSelected = undefined;
    }
    getRowIDs(data) {
        return this.grid.primaryKey && data.length ? data.map(rec => rec[this.grid.primaryKey]) : data;
    }
    getRecordKey(record) {
        return this.grid.primaryKey ? record[this.grid.primaryKey] : record;
    }
    /** Clear rowSelection and update checkbox state */
    clearAllSelectedRows() {
        this.rowSelection.clear();
        this.indeterminateRows.clear();
        this.clearHeaderCBState();
        this.selectedRowsChange.next();
    }
    /** Returns all data in the grid, with applied filtering and sorting and without deleted rows. */
    get allData() {
        let allData;
        if (this.isFilteringApplied() || this.grid.sortingExpressions.length) {
            allData = this.grid.pinnedRecordsCount ? this.grid._filteredSortedUnpinnedData : this.grid.filteredSortedData;
        }
        else {
            allData = this.grid.gridAPI.get_all_data(true);
        }
        return allData.filter(rData => !this.isRowDeleted(this.grid.gridAPI.get_row_id(rData)));
    }
    /** Returns array of the selected columns fields. */
    getSelectedColumns() {
        return this.columnSelection.size ? Array.from(this.columnSelection.keys()) : [];
    }
    isColumnSelected(field) {
        return this.columnSelection.size > 0 && this.columnSelection.has(field);
    }
    /** Select the specified column and emit event. */
    selectColumn(field, clearPrevSelection, selectColumnsRange, event) {
        const stateColumn = this.columnsState.field ? this.grid.getColumnByName(this.columnsState.field) : null;
        if (!event || !stateColumn || stateColumn.visibleIndex < 0 || !selectColumnsRange) {
            this.columnsState.field = field;
            this.columnsState.range = [];
            const newSelection = clearPrevSelection ? [field] : this.getSelectedColumns().indexOf(field) !== -1 ?
                this.getSelectedColumns() : [...this.getSelectedColumns(), field];
            const removed = clearPrevSelection ? this.getSelectedColumns().filter(colField => colField !== field) : [];
            const added = this.isColumnSelected(field) ? [] : [field];
            this.emitColumnSelectionEvent(newSelection, added, removed, event);
        }
        else if (selectColumnsRange) {
            this.selectColumnsRange(field, event);
        }
    }
    /** Select specified columns. And emit event. */
    selectColumns(fields, clearPrevSelection, selectColumnsRange, event) {
        const columns = fields.map(f => this.grid.getColumnByName(f)).sort((a, b) => a.visibleIndex - b.visibleIndex);
        const stateColumn = this.columnsState.field ? this.grid.getColumnByName(this.columnsState.field) : null;
        if (!stateColumn || stateColumn.visibleIndex < 0 || !selectColumnsRange) {
            this.columnsState.field = columns[0] ? columns[0].field : null;
            this.columnsState.range = [];
            const added = fields.filter(colField => !this.isColumnSelected(colField));
            const removed = clearPrevSelection ? this.getSelectedColumns().filter(colField => fields.indexOf(colField) === -1) : [];
            const newSelection = clearPrevSelection ? fields : this.getSelectedColumns().concat(added);
            this.emitColumnSelectionEvent(newSelection, added, removed, event);
        }
        else {
            const filedStart = stateColumn.visibleIndex >
                columns[columns.length - 1].visibleIndex ? columns[0].field : columns[columns.length - 1].field;
            this.selectColumnsRange(filedStart, event);
        }
    }
    /** Select range from last clicked column to the current specified column. */
    selectColumnsRange(field, event) {
        const currIndex = this.grid.getColumnByName(this.columnsState.field).visibleIndex;
        const newIndex = this.grid.columnToVisibleIndex(field);
        const columnsFields = this.grid.visibleColumns
            .filter(c => !c.columnGroup)
            .sort((a, b) => a.visibleIndex - b.visibleIndex)
            .slice(Math.min(currIndex, newIndex), Math.max(currIndex, newIndex) + 1)
            .filter(col => col.selectable).map(col => col.field);
        const removed = [];
        const oldAdded = [];
        const added = columnsFields.filter(colField => !this.isColumnSelected(colField));
        this.columnsState.range.forEach(f => {
            if (columnsFields.indexOf(f) === -1) {
                removed.push(f);
            }
            else {
                oldAdded.push(f);
            }
        });
        this.columnsState.range = columnsFields.filter(colField => !this.isColumnSelected(colField) || oldAdded.indexOf(colField) > -1);
        const newSelection = this.getSelectedColumns().concat(added).filter(c => removed.indexOf(c) === -1);
        this.emitColumnSelectionEvent(newSelection, added, removed, event);
    }
    /** Select specified columns. No event is emitted. */
    selectColumnsWithNoEvent(fields, clearPrevSelection) {
        if (clearPrevSelection) {
            this.columnSelection.clear();
        }
        fields.forEach(field => {
            this.columnSelection.add(field);
        });
    }
    /** Deselect the specified column and emit event. */
    deselectColumn(field, event) {
        this.initColumnsState();
        const newSelection = this.getSelectedColumns().filter(c => c !== field);
        this.emitColumnSelectionEvent(newSelection, [], [field], event);
    }
    /** Deselect specified columns. No event is emitted. */
    deselectColumnsWithNoEvent(fields) {
        fields.forEach(field => this.columnSelection.delete(field));
    }
    /** Deselect specified columns. And emit event. */
    deselectColumns(fields, event) {
        const removed = this.getSelectedColumns().filter(colField => fields.indexOf(colField) > -1);
        const newSelection = this.getSelectedColumns().filter(colField => fields.indexOf(colField) === -1);
        this.emitColumnSelectionEvent(newSelection, [], removed, event);
    }
    emitColumnSelectionEvent(newSelection, added, removed, event) {
        const currSelection = this.getSelectedColumns();
        if (this.areEqualCollections(currSelection, newSelection)) {
            return;
        }
        const args = {
            oldSelection: currSelection, newSelection,
            added, removed, event, cancel: false
        };
        this.grid.columnSelectionChanging.emit(args);
        if (args.cancel) {
            return;
        }
        this.selectColumnsWithNoEvent(args.newSelection, true);
    }
    /** Clear columnSelection */
    clearAllSelectedColumns() {
        this.columnSelection.clear();
    }
    areEqualCollections(first, second) {
        return first.length === second.length && new Set(first.concat(second)).size === first.length;
    }
    /**
     * (╯°□°）╯︵ ┻━┻
     * Chrome and Chromium don't care about the active
     * range after keyboard navigation, thus this.
     */
    _moveSelectionChrome(node) {
        const selection = window.getSelection();
        selection.removeAllRanges();
        const range = new Range();
        range.selectNode(node);
        range.collapse(true);
        selection.addRange(range);
    }
    isFilteringApplied() {
        return !FilteringExpressionsTree.empty(this.grid.filteringExpressionsTree) ||
            !FilteringExpressionsTree.empty(this.grid.advancedFilteringExpressionsTree);
    }
    isRowDeleted(rowID) {
        return this.grid.gridAPI.row_deleted_transaction(rowID);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGridSelectionService, deps: [{ token: i0.NgZone }, { token: i1.PlatformUtil }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGridSelectionService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.2", ngImport: i0, type: IgxGridSelectionService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i1.PlatformUtil }]; } });
//# sourceMappingURL=data:application/json;base64,