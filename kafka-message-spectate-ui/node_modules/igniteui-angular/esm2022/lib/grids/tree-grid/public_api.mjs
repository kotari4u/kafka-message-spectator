import { IGX_GRID_COMMON_DIRECTIVES, IGX_GRID_VALIDATION_DIRECTIVES } from '../public_api';
import { IgxTreeGridComponent } from './tree-grid.component';
import { IgxTreeGridGroupByAreaComponent } from '../grouping/tree-grid-group-by-area.component';
import { IgxTreeGridGroupingPipe } from './tree-grid.grouping.pipe';
export * from './tree-grid.component';
export * from './tree-grid.interfaces';
export * from './tree-grid.filtering.strategy';
export * from './tree-grid.grouping.pipe';
export * from '../grouping/tree-grid-group-by-area.component';
export * from './tree-grid.grouping.pipe';
/* Imports that cannot be resolved from IGX_GRID_COMMON_DIRECTIVES spread
    NOTE: Do not remove! Issue: https://github.com/IgniteUI/igniteui-angular/issues/13310
*/
/* eslint-disable @typescript-eslint/no-unused-vars */
import { IgxRowEditTextDirective, IgxRowAddTextDirective, IgxRowEditActionsDirective, IgxRowEditTabStopDirective } from "../public_api";
import { IGX_PAGINATOR_DIRECTIVES } from '../../paginator/public_api';
/* NOTE: Tree grid directives collection for ease-of-use import in standalone components scenario */
export const IGX_TREE_GRID_DIRECTIVES = [
    IgxTreeGridComponent,
    IgxTreeGridGroupByAreaComponent,
    IgxTreeGridGroupingPipe,
    IgxRowAddTextDirective,
    IgxRowEditActionsDirective,
    IgxRowEditTextDirective,
    IgxRowEditTabStopDirective,
    ...IGX_GRID_COMMON_DIRECTIVES,
    ...IGX_GRID_VALIDATION_DIRECTIVES,
    ...IGX_PAGINATOR_DIRECTIVES
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVibGljX2FwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9ncmlkcy90cmVlLWdyaWQvcHVibGljX2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsOEJBQThCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDaEcsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFcEUsY0FBYyx1QkFBdUIsQ0FBQztBQUN0QyxjQUFjLHdCQUF3QixDQUFDO0FBQ3ZDLGNBQWMsZ0NBQWdDLENBQUM7QUFDL0MsY0FBYywyQkFBMkIsQ0FBQztBQUMxQyxjQUFjLCtDQUErQyxDQUFDO0FBQzlELGNBQWMsMkJBQTJCLENBQUM7QUFFMUM7O0VBRUU7QUFDRixzREFBc0Q7QUFDdEQsT0FBTyxFQUVILHVCQUF1QixFQUN2QixzQkFBc0IsRUFDdEIsMEJBQTBCLEVBQzFCLDBCQUEwQixFQWdFN0IsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQU1ILHdCQUF3QixFQUMzQixNQUFNLDRCQUE0QixDQUFDO0FBRXBDLG9HQUFvRztBQUNwRyxNQUFNLENBQUMsTUFBTSx3QkFBd0IsR0FBRztJQUNwQyxvQkFBb0I7SUFDcEIsK0JBQStCO0lBQy9CLHVCQUF1QjtJQUN2QixzQkFBc0I7SUFDdEIsMEJBQTBCO0lBQzFCLHVCQUF1QjtJQUN2QiwwQkFBMEI7SUFDMUIsR0FBRywwQkFBMEI7SUFDN0IsR0FBRyw4QkFBOEI7SUFDakMsR0FBRyx3QkFBd0I7Q0FDckIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElHWF9HUklEX0NPTU1PTl9ESVJFQ1RJVkVTLCBJR1hfR1JJRF9WQUxJREFUSU9OX0RJUkVDVElWRVMgfSBmcm9tICcuLi9wdWJsaWNfYXBpJztcbmltcG9ydCB7IElneFRyZWVHcmlkQ29tcG9uZW50IH0gZnJvbSAnLi90cmVlLWdyaWQuY29tcG9uZW50JztcbmltcG9ydCB7IElneFRyZWVHcmlkR3JvdXBCeUFyZWFDb21wb25lbnQgfSBmcm9tICcuLi9ncm91cGluZy90cmVlLWdyaWQtZ3JvdXAtYnktYXJlYS5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWd4VHJlZUdyaWRHcm91cGluZ1BpcGUgfSBmcm9tICcuL3RyZWUtZ3JpZC5ncm91cGluZy5waXBlJztcblxuZXhwb3J0ICogZnJvbSAnLi90cmVlLWdyaWQuY29tcG9uZW50JztcbmV4cG9ydCAqIGZyb20gJy4vdHJlZS1ncmlkLmludGVyZmFjZXMnO1xuZXhwb3J0ICogZnJvbSAnLi90cmVlLWdyaWQuZmlsdGVyaW5nLnN0cmF0ZWd5JztcbmV4cG9ydCAqIGZyb20gJy4vdHJlZS1ncmlkLmdyb3VwaW5nLnBpcGUnO1xuZXhwb3J0ICogZnJvbSAnLi4vZ3JvdXBpbmcvdHJlZS1ncmlkLWdyb3VwLWJ5LWFyZWEuY29tcG9uZW50JztcbmV4cG9ydCAqIGZyb20gJy4vdHJlZS1ncmlkLmdyb3VwaW5nLnBpcGUnO1xuXG4vKiBJbXBvcnRzIHRoYXQgY2Fubm90IGJlIHJlc29sdmVkIGZyb20gSUdYX0dSSURfQ09NTU9OX0RJUkVDVElWRVMgc3ByZWFkXG4gICAgTk9URTogRG8gbm90IHJlbW92ZSEgSXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9JZ25pdGVVSS9pZ25pdGV1aS1hbmd1bGFyL2lzc3Vlcy8xMzMxMFxuKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuaW1wb3J0IHtcbiAgICBJZ3hSb3dEaXJlY3RpdmUsXG4gICAgSWd4Um93RWRpdFRleHREaXJlY3RpdmUsXG4gICAgSWd4Um93QWRkVGV4dERpcmVjdGl2ZSxcbiAgICBJZ3hSb3dFZGl0QWN0aW9uc0RpcmVjdGl2ZSxcbiAgICBJZ3hSb3dFZGl0VGFiU3RvcERpcmVjdGl2ZSxcbiAgICBJZ3hHcmlkRm9vdGVyQ29tcG9uZW50LFxuICAgIElneEFkdmFuY2VkRmlsdGVyaW5nRGlhbG9nQ29tcG9uZW50LFxuICAgIElneEhlYWRlckNvbGxhcHNlZEluZGljYXRvckRpcmVjdGl2ZSxcbiAgICBJZ3hIZWFkZXJFeHBhbmRlZEluZGljYXRvckRpcmVjdGl2ZSxcbiAgICBJZ3hSb3dDb2xsYXBzZWRJbmRpY2F0b3JEaXJlY3RpdmUsXG4gICAgSWd4Um93RXhwYW5kZWRJbmRpY2F0b3JEaXJlY3RpdmUsXG4gICAgSWd4U29ydEFzY2VuZGluZ0hlYWRlckljb25EaXJlY3RpdmUsXG4gICAgSWd4U29ydERlc2NlbmRpbmdIZWFkZXJJY29uRGlyZWN0aXZlLFxuICAgIElneFNvcnRIZWFkZXJJY29uRGlyZWN0aXZlLFxuICAgIElneEV4Y2VsU3R5bGVIZWFkZXJJY29uRGlyZWN0aXZlLFxuICAgIElneERyYWdJbmRpY2F0b3JJY29uRGlyZWN0aXZlLFxuICAgIElneFJvd0RyYWdHaG9zdERpcmVjdGl2ZSxcbiAgICBJZ3hHcmlkU3RhdGVEaXJlY3RpdmUsXG4gICAgSWd4R3JpZEhlYWRlckNvbXBvbmVudCxcbiAgICBJZ3hHcmlkSGVhZGVyR3JvdXBDb21wb25lbnQsXG4gICAgSWd4R3JpZEhlYWRlclJvd0NvbXBvbmVudCxcbiAgICBJZ3hGaWx0ZXJDZWxsVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgSWd4U3VtbWFyeVRlbXBsYXRlRGlyZWN0aXZlLFxuICAgIElneENlbGxUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICBJZ3hDZWxsVmFsaWRhdGlvbkVycm9yRGlyZWN0aXZlLFxuICAgIElneENlbGxIZWFkZXJUZW1wbGF0ZURpcmVjdGl2ZSxcbiAgICBJZ3hDZWxsRm9vdGVyVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgSWd4Q2VsbEVkaXRvclRlbXBsYXRlRGlyZWN0aXZlLFxuICAgIElneENvbGxhcHNpYmxlSW5kaWNhdG9yVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgSWd4Q29sdW1uQ29tcG9uZW50LFxuICAgIElneENvbHVtbkdyb3VwQ29tcG9uZW50LFxuICAgIElneENvbHVtbkxheW91dENvbXBvbmVudCxcbiAgICBJZ3hDb2x1bW5SZXF1aXJlZFZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBJZ3hDb2x1bW5NaW5WYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgSWd4Q29sdW1uTWF4VmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIElneENvbHVtbkVtYWlsVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIElneENvbHVtbk1pbkxlbmd0aFZhbGlkYXRvckRpcmVjdGl2ZSxcbiAgICBJZ3hDb2x1bW5NYXhMZW5ndGhWYWxpZGF0b3JEaXJlY3RpdmUsXG4gICAgSWd4Q29sdW1QYXR0ZXJuVmFsaWRhdG9yRGlyZWN0aXZlLFxuICAgIElneENvbHVtbkFjdGlvbnNDb21wb25lbnQsXG4gICAgSWd4Q29sdW1uSGlkaW5nRGlyZWN0aXZlLFxuICAgIElneENvbHVtblBpbm5pbmdEaXJlY3RpdmUsXG4gICAgSWd4Um93U2VsZWN0b3JEaXJlY3RpdmUsXG4gICAgSWd4R3JvdXBCeVJvd1NlbGVjdG9yRGlyZWN0aXZlLFxuICAgIElneEhlYWRTZWxlY3RvckRpcmVjdGl2ZSxcbiAgICBJZ3hDU1ZUZXh0RGlyZWN0aXZlLFxuICAgIElneEV4Y2VsVGV4dERpcmVjdGl2ZSxcbiAgICBJZ3hHcmlkVG9vbGJhckFjdGlvbnNDb21wb25lbnQsXG4gICAgSWd4R3JpZFRvb2xiYXJBZHZhbmNlZEZpbHRlcmluZ0NvbXBvbmVudCxcbiAgICBJZ3hHcmlkVG9vbGJhckNvbXBvbmVudCxcbiAgICBJZ3hHcmlkVG9vbGJhckV4cG9ydGVyQ29tcG9uZW50LFxuICAgIElneEdyaWRUb29sYmFySGlkaW5nQ29tcG9uZW50LFxuICAgIElneEdyaWRUb29sYmFyUGlubmluZ0NvbXBvbmVudCxcbiAgICBJZ3hHcmlkVG9vbGJhclRpdGxlQ29tcG9uZW50LFxuICAgIElneEdyaWRUb29sYmFyRGlyZWN0aXZlLFxuICAgIElneEdyaWRFeGNlbFN0eWxlRmlsdGVyaW5nQ29tcG9uZW50LFxuICAgIElneEV4Y2VsU3R5bGVIZWFkZXJDb21wb25lbnQsXG4gICAgSWd4RXhjZWxTdHlsZVNvcnRpbmdDb21wb25lbnQsXG4gICAgSWd4RXhjZWxTdHlsZVBpbm5pbmdDb21wb25lbnQsXG4gICAgSWd4RXhjZWxTdHlsZUhpZGluZ0NvbXBvbmVudCxcbiAgICBJZ3hFeGNlbFN0eWxlU2VsZWN0aW5nQ29tcG9uZW50LFxuICAgIElneEV4Y2VsU3R5bGVDbGVhckZpbHRlcnNDb21wb25lbnQsXG4gICAgSWd4RXhjZWxTdHlsZUNvbmRpdGlvbmFsRmlsdGVyQ29tcG9uZW50LFxuICAgIElneEV4Y2VsU3R5bGVNb3ZpbmdDb21wb25lbnQsXG4gICAgSWd4RXhjZWxTdHlsZVNlYXJjaENvbXBvbmVudCxcbiAgICBJZ3hFeGNlbFN0eWxlQ29sdW1uT3BlcmF0aW9uc1RlbXBsYXRlRGlyZWN0aXZlLFxuICAgIElneEV4Y2VsU3R5bGVGaWx0ZXJPcGVyYXRpb25zVGVtcGxhdGVEaXJlY3RpdmUsXG4gICAgSWd4RXhjZWxTdHlsZUxvYWRpbmdWYWx1ZXNUZW1wbGF0ZURpcmVjdGl2ZVxufSBmcm9tIFwiLi4vcHVibGljX2FwaVwiO1xuaW1wb3J0IHtcbiAgICBJZ3hQYWdpbmF0b3JDb21wb25lbnQsXG4gICAgSWd4UGFnZU5hdmlnYXRpb25Db21wb25lbnQsXG4gICAgSWd4UGFnZVNpemVTZWxlY3RvckNvbXBvbmVudCxcbiAgICBJZ3hQYWdpbmF0b3JDb250ZW50RGlyZWN0aXZlLFxuICAgIElneFBhZ2luYXRvckRpcmVjdGl2ZSxcbiAgICBJR1hfUEFHSU5BVE9SX0RJUkVDVElWRVNcbn0gZnJvbSAnLi4vLi4vcGFnaW5hdG9yL3B1YmxpY19hcGknO1xuXG4vKiBOT1RFOiBUcmVlIGdyaWQgZGlyZWN0aXZlcyBjb2xsZWN0aW9uIGZvciBlYXNlLW9mLXVzZSBpbXBvcnQgaW4gc3RhbmRhbG9uZSBjb21wb25lbnRzIHNjZW5hcmlvICovXG5leHBvcnQgY29uc3QgSUdYX1RSRUVfR1JJRF9ESVJFQ1RJVkVTID0gW1xuICAgIElneFRyZWVHcmlkQ29tcG9uZW50LFxuICAgIElneFRyZWVHcmlkR3JvdXBCeUFyZWFDb21wb25lbnQsXG4gICAgSWd4VHJlZUdyaWRHcm91cGluZ1BpcGUsXG4gICAgSWd4Um93QWRkVGV4dERpcmVjdGl2ZSxcbiAgICBJZ3hSb3dFZGl0QWN0aW9uc0RpcmVjdGl2ZSxcbiAgICBJZ3hSb3dFZGl0VGV4dERpcmVjdGl2ZSxcbiAgICBJZ3hSb3dFZGl0VGFiU3RvcERpcmVjdGl2ZSxcbiAgICAuLi5JR1hfR1JJRF9DT01NT05fRElSRUNUSVZFUyxcbiAgICAuLi5JR1hfR1JJRF9WQUxJREFUSU9OX0RJUkVDVElWRVMsXG4gICAgLi4uSUdYX1BBR0lOQVRPUl9ESVJFQ1RJVkVTXG5dIGFzIGNvbnN0O1xuIl19