{"version":3,"file":"angular-material-components-datetime-picker.mjs","sources":["../../../../projects/datetime-picker/src/lib/core/date-formats.ts","../../../../projects/datetime-picker/src/lib/core/date-adapter.ts","../../../../projects/datetime-picker/src/lib/date-selection-model.ts","../../../../projects/datetime-picker/src/lib/datepicker-errors.ts","../../../../projects/datetime-picker/src/lib/calendar-body.ts","../../../../projects/datetime-picker/src/lib/calendar-body.html","../../../../projects/datetime-picker/src/lib/date-range-selection-strategy.ts","../../../../projects/datetime-picker/src/lib/month-view.ts","../../../../projects/datetime-picker/src/lib/month-view.html","../../../../projects/datetime-picker/src/lib/multi-year-view.ts","../../../../projects/datetime-picker/src/lib/multi-year-view.html","../../../../projects/datetime-picker/src/lib/year-view.ts","../../../../projects/datetime-picker/src/lib/year-view.html","../../../../projects/datetime-picker/src/lib/datepicker-intl.ts","../../../../projects/datetime-picker/src/lib/calendar.ts","../../../../projects/datetime-picker/src/lib/calendar-header.html","../../../../projects/datetime-picker/src/lib/calendar.html","../../../../projects/datetime-picker/src/lib/core/native-date-adapter.ts","../../../../projects/datetime-picker/src/lib/core/native-date-formats.ts","../../../../projects/datetime-picker/src/lib/core/native-date.module.ts","../../../../projects/datetime-picker/src/lib/aria-accessible-name.ts","../../../../projects/datetime-picker/src/lib/datepicker-input-base.ts","../../../../projects/datetime-picker/src/lib/date-range-input-parts.ts","../../../../projects/datetime-picker/src/lib/date-range-input.ts","../../../../projects/datetime-picker/src/lib/date-range-input.html","../../../../projects/datetime-picker/src/lib/datepicker-animations.ts","../../../../projects/datetime-picker/src/lib/utils/date-utils.ts","../../../../projects/datetime-picker/src/lib/timepicker.component.ts","../../../../projects/datetime-picker/src/lib/timepicker.component.html","../../../../projects/datetime-picker/src/lib/datepicker-base.ts","../../../../projects/datetime-picker/src/lib/datepicker-content.html","../../../../projects/datetime-picker/src/lib/date-range-picker.ts","../../../../projects/datetime-picker/src/lib/datepicker.ts","../../../../projects/datetime-picker/src/lib/datepicker-actions.ts","../../../../projects/datetime-picker/src/lib/datepicker-input.ts","../../../../projects/datetime-picker/src/lib/datepicker-toggle.ts","../../../../projects/datetime-picker/src/lib/datepicker-toggle.html","../../../../projects/datetime-picker/src/lib/timepicker.module.ts","../../../../projects/datetime-picker/src/lib/datepicker-module.ts","../../../../projects/datetime-picker/src/public-api.ts","../../../../projects/datetime-picker/src/angular-material-components-datetime-picker.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\r\n\r\n\r\nexport type NgxMatDateFormats = {\r\n\tparse: {\r\n\t\tdateInput: any;\r\n\t};\r\n\tdisplay: {\r\n\t\tdateInput: any;\r\n\t\tmonthLabel?: any;\r\n\t\tmonthYearLabel: any;\r\n\t\tdateA11yLabel: any;\r\n\t\tmonthYearA11yLabel: any;\r\n\t};\r\n};\r\n\r\nexport const NGX_MAT_DATE_FORMATS = new InjectionToken<NgxMatDateFormats>('ngx-mat-date-formats');\r\n","import { DateAdapter } from '@angular/material/core';\r\n\r\nexport abstract class NgxMatDateAdapter<D> extends DateAdapter<D> {\r\n  /**\r\n * Gets the hour component of the given date.\r\n * @param date The date to extract the month from.\r\n * @returns The hour component.\r\n */\r\n  abstract getHour(date: D): number;\r\n\r\n  /**\r\n* Gets the minute component of the given date.\r\n* @param date The date to extract the month from.\r\n* @returns The minute component.\r\n*/\r\n  abstract getMinute(date: D): number;\r\n\r\n  /**\r\n  * Gets the second component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @returns The second component.\r\n  */\r\n  abstract getSecond(date: D): number;\r\n\r\n  /**\r\n  * Set the hour component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @param value The value to set.\r\n  */\r\n  abstract setHour(date: D, value: number): void;\r\n\r\n  /**\r\n  * Set the second component of the given date.\r\n  * @param date The date to extract the month from.\r\n  * @param value The value to set.\r\n  */\r\n  abstract setMinute(date: D, value: number): void;\r\n\r\n  /**\r\n   * Set the second component of the given date.\r\n   * @param date The date to extract the month from.\r\n   * @param value The value to set.\r\n   */\r\n  abstract setSecond(date: D, value: number): void;\r\n\r\n  /**\r\n   * Check if two date have same time\r\n   * @param a Date 1\r\n   * @param b Date 2\r\n   */\r\n  isSameTime(a: D, b: D): boolean {\r\n    if (a == null || b == null) return true;\r\n    return this.getHour(a) === this.getHour(b)\r\n      && this.getMinute(a) === this.getMinute(b)\r\n      && this.getSecond(a) === this.getSecond(b);\r\n  }\r\n\r\n  /**\r\n   * Copy time from a date to a another date\r\n   * @param toDate \r\n   * @param fromDate \r\n   */\r\n  copyTime(toDate: D, fromDate: D) {\r\n    this.setHour(toDate, this.getHour(fromDate));\r\n    this.setMinute(toDate, this.getMinute(fromDate));\r\n    this.setSecond(toDate, this.getSecond(fromDate));\r\n  }\r\n\r\n  /**\r\n * Compares two dates.\r\n * @param first The first date to compare.\r\n * @param second The second date to compare.\r\n * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\r\n *     a number greater than 0 if the first date is later.\r\n */\r\n  compareDateWithTime(first: D, second: D, showSeconds?: boolean): number {\r\n    let res = super.compareDate(first, second) ||\r\n      this.getHour(first) - this.getHour(second) ||\r\n      this.getMinute(first) - this.getMinute(second);\r\n    if (showSeconds) {\r\n      res = res || this.getSecond(first) - this.getSecond(second);\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Set time by using default values\r\n   * @param defaultTime List default values [hour, minute, second]\r\n   */\r\n  setTimeByDefaultValues(date: D, defaultTime: number[]) {\r\n    if (!Array.isArray(defaultTime)) {\r\n      throw Error('@Input DefaultTime should be an array');\r\n    }\r\n    this.setHour(date, defaultTime[0] || 0);\r\n    this.setMinute(date, defaultTime[1] || 0);\r\n    this.setSecond(date, defaultTime[2] || 0);\r\n  }\r\n\r\n}\r\n","\r\n\r\nimport { FactoryProvider, Injectable, OnDestroy, Optional, SkipSelf } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\n\r\n/** A class representing a range of dates. */\r\nexport class NgxDateRange<D> {\r\n  /**\r\n   * Ensures that objects with a `start` and `end` property can't be assigned to a variable that\r\n   * expects a `DateRange`\r\n   */\r\n  // tslint:disable-next-line:no-unused-variable\r\n  private _disableStructuralEquivalency: never;\r\n\r\n  constructor(\r\n    /** The start date of the range. */\r\n    readonly start: D | null,\r\n    /** The end date of the range. */\r\n    readonly end: D | null,\r\n  ) { }\r\n}\r\n\r\n/**\r\n * Conditionally picks the date type, if a DateRange is passed in.\r\n * @docs-private\r\n */\r\nexport type NgxExtractDateTypeFromSelection<T> = T extends NgxDateRange<infer D> ? D : NonNullable<T>;\r\n\r\n/**\r\n * Event emitted by the date selection model when its selection changes.\r\n * @docs-private\r\n */\r\nexport interface NgxDateSelectionModelChange<S> {\r\n  /** New value for the selection. */\r\n  selection: S;\r\n\r\n  /** Object that triggered the change. */\r\n  source: unknown;\r\n\r\n  /** Previous value */\r\n  oldValue?: S;\r\n}\r\n\r\n/**\r\n * A selection model containing a date selection.\r\n * @docs-private\r\n */\r\n@Injectable()\r\nexport abstract class NgxMatDateSelectionModel<S, D = NgxExtractDateTypeFromSelection<S>>\r\n  implements OnDestroy {\r\n  private readonly _selectionChanged = new Subject<NgxDateSelectionModelChange<S>>();\r\n\r\n  /** Emits when the selection has changed. */\r\n  selectionChanged: Observable<NgxDateSelectionModelChange<S>> = this._selectionChanged;\r\n\r\n  protected constructor(\r\n    /** The current selection. */\r\n    readonly selection: S,\r\n    protected _adapter: NgxMatDateAdapter<D>,\r\n  ) {\r\n    this.selection = selection;\r\n  }\r\n\r\n  /**\r\n   * Updates the current selection in the model.\r\n   * @param value New selection that should be assigned.\r\n   * @param source Object that triggered the selection change.\r\n   */\r\n  updateSelection(value: S, source: unknown) {\r\n    const oldValue = (this as { selection: S }).selection;\r\n    (this as { selection: S }).selection = value;\r\n    this._selectionChanged.next({ selection: value, source, oldValue });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._selectionChanged.complete();\r\n  }\r\n\r\n  protected _isValidDateInstance(date: D): boolean {\r\n    return this._adapter.isDateInstance(date) && this._adapter.isValid(date);\r\n  }\r\n\r\n  /** Adds a date to the current selection. */\r\n  abstract add(date: D | null): void;\r\n\r\n  /** Checks whether the current selection is valid. */\r\n  abstract isValid(): boolean;\r\n\r\n  /** Checks whether the current selection is complete. */\r\n  abstract isComplete(): boolean;\r\n\r\n  /** Clones the selection model. */\r\n  abstract clone(): NgxMatDateSelectionModel<S, D>;\r\n}\r\n\r\n/**\r\n * A selection model that contains a single date.\r\n * @docs-private\r\n */\r\n@Injectable()\r\nexport class NgxMatSingleDateSelectionModel<D> extends NgxMatDateSelectionModel<D | null, D> {\r\n  constructor(adapter: NgxMatDateAdapter<D>) {\r\n    super(null, adapter);\r\n  }\r\n\r\n  /**\r\n   * Adds a date to the current selection. In the case of a single date selection, the added date\r\n   * simply overwrites the previous selection\r\n   */\r\n  add(date: D | null) {\r\n    super.updateSelection(date, this);\r\n  }\r\n\r\n  /** Checks whether the current selection is valid. */\r\n  isValid(): boolean {\r\n    return this.selection != null && this._isValidDateInstance(this.selection);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the current selection is complete. In the case of a single date selection, this\r\n   * is true if the current selection is not null.\r\n   */\r\n  isComplete() {\r\n    return this.selection != null;\r\n  }\r\n\r\n  /** Clones the selection model. */\r\n  clone() {\r\n    const clone = new NgxMatSingleDateSelectionModel<D>(this._adapter);\r\n    clone.updateSelection(this.selection, this);\r\n    return clone;\r\n  }\r\n}\r\n\r\n/**\r\n * A selection model that contains a date range.\r\n * @docs-private\r\n */\r\n@Injectable()\r\nexport class NgxMatRangeDateSelectionModel<D> extends NgxMatDateSelectionModel<NgxDateRange<D>, D> {\r\n  constructor(adapter: NgxMatDateAdapter<D>) {\r\n    super(new NgxDateRange<D>(null, null), adapter);\r\n  }\r\n\r\n  /**\r\n   * Adds a date to the current selection. In the case of a date range selection, the added date\r\n   * fills in the next `null` value in the range. If both the start and the end already have a date,\r\n   * the selection is reset so that the given date is the new `start` and the `end` is null.\r\n   */\r\n  add(date: D | null): void {\r\n    let { start, end } = this.selection;\r\n\r\n    if (start == null) {\r\n      start = date;\r\n    } else if (end == null) {\r\n      end = date;\r\n    } else {\r\n      start = date;\r\n      end = null;\r\n    }\r\n\r\n    super.updateSelection(new NgxDateRange<D>(start, end), this);\r\n  }\r\n\r\n  /** Checks whether the current selection is valid. */\r\n  isValid(): boolean {\r\n    const { start, end } = this.selection;\r\n\r\n    // Empty ranges are valid.\r\n    if (start == null && end == null) {\r\n      return true;\r\n    }\r\n\r\n    // Complete ranges are only valid if both dates are valid and the start is before the end.\r\n    if (start != null && end != null) {\r\n      return (\r\n        this._isValidDateInstance(start) &&\r\n        this._isValidDateInstance(end) &&\r\n        this._adapter.compareDate(start, end) <= 0\r\n      );\r\n    }\r\n\r\n    // Partial ranges are valid if the start/end is valid.\r\n    return (\r\n      (start == null || this._isValidDateInstance(start)) &&\r\n      (end == null || this._isValidDateInstance(end))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks whether the current selection is complete. In the case of a date range selection, this\r\n   * is true if the current selection has a non-null `start` and `end`.\r\n   */\r\n  isComplete(): boolean {\r\n    return this.selection.start != null && this.selection.end != null;\r\n  }\r\n\r\n  /** Clones the selection model. */\r\n  clone() {\r\n    const clone = new NgxMatRangeDateSelectionModel<D>(this._adapter);\r\n    clone.updateSelection(this.selection, this);\r\n    return clone;\r\n  }\r\n}\r\n\r\n/** @docs-private */\r\nexport function NGX_MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY(\r\n  parent: NgxMatSingleDateSelectionModel<unknown>,\r\n  adapter: NgxMatDateAdapter<unknown>,\r\n) {\r\n  return parent || new NgxMatSingleDateSelectionModel(adapter);\r\n}\r\n\r\n/**\r\n * Used to provide a single selection model to a component.\r\n * @docs-private\r\n */\r\nexport const NGX_MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider = {\r\n  provide: NgxMatDateSelectionModel,\r\n  deps: [[new Optional(), new SkipSelf(), NgxMatDateSelectionModel], NgxMatDateAdapter],\r\n  useFactory: NGX_MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY,\r\n};\r\n\r\n/** @docs-private */\r\nexport function NGX_MAT_RANGE_DATE_SELECTION_MODEL_FACTORY(\r\n  parent: NgxMatSingleDateSelectionModel<unknown>,\r\n  adapter: NgxMatDateAdapter<unknown>,\r\n) {\r\n  return parent || new NgxMatRangeDateSelectionModel(adapter);\r\n}\r\n\r\n/**\r\n * Used to provide a range selection model to a component.\r\n * @docs-private\r\n */\r\nexport const NGX_MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER: FactoryProvider = {\r\n  provide: NgxMatDateSelectionModel,\r\n  deps: [[new Optional(), new SkipSelf(), NgxMatDateSelectionModel], NgxMatDateAdapter],\r\n  useFactory: NGX_MAT_RANGE_DATE_SELECTION_MODEL_FACTORY,\r\n};\r\n","\r\n\r\n/** @docs-private */\r\nexport function createMissingDateImplError(provider: string) {\r\n  return Error(\r\n    `NgxMatDatetimePicker: No provider found for ${provider}. You must import one of the following ` +\r\n      `modules at your application root: NgxMatNativeDateModule, NgxMatMomentDateModule, or provide a ` +\r\n      `custom implementation.`,\r\n  );\r\n}\r\n","import {Platform} from '@angular/cdk/platform';\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation,\r\n  NgZone,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n  AfterViewChecked,\r\n  inject,\r\n} from '@angular/core';\r\nimport {take} from 'rxjs/operators';\r\n\r\n/** Extra CSS classes that can be associated with a calendar cell. */\r\nexport type NgxMatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\r\n\r\n/** Function that can generate the extra classes that should be added to a calendar cell. */\r\nexport type NgxMatCalendarCellClassFunction<D> = (\r\n  date: D,\r\n  view: 'month' | 'year' | 'multi-year',\r\n) => NgxMatCalendarCellCssClasses;\r\n\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nexport class NgxMatCalendarCell<D = any> {\r\n  constructor(\r\n    public value: number,\r\n    public displayValue: string,\r\n    public ariaLabel: string,\r\n    public enabled: boolean,\r\n    public cssClasses: NgxMatCalendarCellCssClasses = {},\r\n    public compareValue = value,\r\n    public rawValue?: D,\r\n  ) {}\r\n}\r\n\r\n/** Event emitted when a date inside the calendar is triggered as a result of a user action. */\r\nexport interface NgxMatCalendarUserEvent<D> {\r\n  value: D;\r\n  event: Event;\r\n}\r\n\r\nlet calendarBodyId = 1;\r\n\r\n@Component({\r\n  selector: '[ngx-mat-calendar-body]',\r\n  templateUrl: 'calendar-body.html',\r\n  styleUrls: ['calendar-body.scss'],\r\n  host: {\r\n    'class': 'ngx-mat-calendar-body',\r\n  },\r\n  exportAs: 'matCalendarBody',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatCalendarBody<D = any> implements OnChanges, OnDestroy, AfterViewChecked {\r\n  private _platform = inject(Platform);\r\n\r\n  /**\r\n   * Used to skip the next focus event when rendering the preview range.\r\n   * We need a flag like this, because some browsers fire focus events asynchronously.\r\n   */\r\n  private _skipNextFocus: boolean;\r\n\r\n  /**\r\n   * Used to focus the active cell after change detection has run.\r\n   */\r\n  private _focusActiveCellAfterViewChecked = false;\r\n\r\n  /** The label for the table. (e.g. \"Jan 2017\"). */\r\n  @Input() label: string;\r\n\r\n  /** The cells to display in the table. */\r\n  @Input() rows: NgxMatCalendarCell[][];\r\n\r\n  /** The value in the table that corresponds to today. */\r\n  @Input() todayValue: number;\r\n\r\n  /** Start value of the selected date range. */\r\n  @Input() startValue: number;\r\n\r\n  /** End value of the selected date range. */\r\n  @Input() endValue: number;\r\n\r\n  /** The minimum number of free cells needed to fit the label in the first row. */\r\n  @Input() labelMinRequiredCells: number;\r\n\r\n  /** The number of columns in the table. */\r\n  @Input() numCols: number = 7;\r\n\r\n  /** The cell number of the active cell in the table. */\r\n  @Input() activeCell: number = 0;\r\n\r\n  ngAfterViewChecked() {\r\n    if (this._focusActiveCellAfterViewChecked) {\r\n      this._focusActiveCell();\r\n      this._focusActiveCellAfterViewChecked = false;\r\n    }\r\n  }\r\n\r\n  /** Whether a range is being selected. */\r\n  @Input() isRange: boolean = false;\r\n\r\n  /**\r\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\r\n   * maintained even as the table resizes.\r\n   */\r\n  @Input() cellAspectRatio: number = 1;\r\n\r\n  /** Start of the comparison range. */\r\n  @Input() comparisonStart: number | null;\r\n\r\n  /** End of the comparison range. */\r\n  @Input() comparisonEnd: number | null;\r\n\r\n  /** Start of the preview range. */\r\n  @Input() previewStart: number | null = null;\r\n\r\n  /** End of the preview range. */\r\n  @Input() previewEnd: number | null = null;\r\n\r\n  /** ARIA Accessible name of the `<input matStartDate/>` */\r\n  @Input() startDateAccessibleName: string | null;\r\n\r\n  /** ARIA Accessible name of the `<input matEndDate/>` */\r\n  @Input() endDateAccessibleName: string | null;\r\n\r\n  /** Emits when a new value is selected. */\r\n  @Output() readonly selectedValueChange = new EventEmitter<NgxMatCalendarUserEvent<number>>();\r\n\r\n  /** Emits when the preview has changed as a result of a user action. */\r\n  @Output() readonly previewChange = new EventEmitter<\r\n    NgxMatCalendarUserEvent<NgxMatCalendarCell | null>\r\n  >();\r\n\r\n  @Output() readonly activeDateChange = new EventEmitter<NgxMatCalendarUserEvent<number>>();\r\n\r\n  /** Emits the date at the possible start of a drag event. */\r\n  @Output() readonly dragStarted = new EventEmitter<NgxMatCalendarUserEvent<D>>();\r\n\r\n  /** Emits the date at the conclusion of a drag, or null if mouse was not released on a date. */\r\n  @Output() readonly dragEnded = new EventEmitter<NgxMatCalendarUserEvent<D | null>>();\r\n\r\n  /** The number of blank cells to put at the beginning for the first row. */\r\n  _firstRowOffset: number;\r\n\r\n  /** Padding for the individual date cells. */\r\n  _cellPadding: string;\r\n\r\n  /** Width of an individual cell. */\r\n  _cellWidth: string;\r\n\r\n  private _didDragSinceMouseDown = false;\r\n\r\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) {\r\n    _ngZone.runOutsideAngular(() => {\r\n      const element = _elementRef.nativeElement;\r\n      element.addEventListener('mouseenter', this._enterHandler, true);\r\n      element.addEventListener('touchmove', this._touchmoveHandler, true);\r\n      element.addEventListener('focus', this._enterHandler, true);\r\n      element.addEventListener('mouseleave', this._leaveHandler, true);\r\n      element.addEventListener('blur', this._leaveHandler, true);\r\n      element.addEventListener('mousedown', this._mousedownHandler);\r\n      element.addEventListener('touchstart', this._mousedownHandler);\r\n\r\n      if (this._platform.isBrowser) {\r\n        window.addEventListener('mouseup', this._mouseupHandler);\r\n        window.addEventListener('touchend', this._touchendHandler);\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Called when a cell is clicked. */\r\n  _cellClicked(cell: NgxMatCalendarCell, event: MouseEvent): void {\r\n    // Ignore \"clicks\" that are actually canceled drags (eg the user dragged\r\n    // off and then went back to this cell to undo).\r\n    if (this._didDragSinceMouseDown) {\r\n      return;\r\n    }\r\n\r\n    if (cell.enabled) {\r\n      this.selectedValueChange.emit({value: cell.value, event});\r\n    }\r\n  }\r\n\r\n  _emitActiveDateChange(cell: NgxMatCalendarCell, event: FocusEvent): void {\r\n    if (cell.enabled) {\r\n      this.activeDateChange.emit({value: cell.value, event});\r\n    }\r\n  }\r\n\r\n  /** Returns whether a cell should be marked as selected. */\r\n  _isSelected(value: number) {\r\n    return this.startValue === value || this.endValue === value;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const columnChanges = changes['numCols'];\r\n    const {rows, numCols} = this;\r\n\r\n    if (changes['rows'] || columnChanges) {\r\n      this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\r\n    }\r\n\r\n    if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\r\n      this._cellPadding = `${(50 * this.cellAspectRatio) / numCols}%`;\r\n    }\r\n\r\n    if (columnChanges || !this._cellWidth) {\r\n      this._cellWidth = `${100 / numCols}%`;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    const element = this._elementRef.nativeElement;\r\n    element.removeEventListener('mouseenter', this._enterHandler, true);\r\n    element.removeEventListener('touchmove', this._touchmoveHandler, true);\r\n    element.removeEventListener('focus', this._enterHandler, true);\r\n    element.removeEventListener('mouseleave', this._leaveHandler, true);\r\n    element.removeEventListener('blur', this._leaveHandler, true);\r\n    element.removeEventListener('mousedown', this._mousedownHandler);\r\n    element.removeEventListener('touchstart', this._mousedownHandler);\r\n\r\n    if (this._platform.isBrowser) {\r\n      window.removeEventListener('mouseup', this._mouseupHandler);\r\n      window.removeEventListener('touchend', this._touchendHandler);\r\n    }\r\n  }\r\n\r\n  /** Returns whether a cell is active. */\r\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber == this.activeCell;\r\n  }\r\n\r\n  _focusActiveCell(movePreview = true) {\r\n    this._ngZone.runOutsideAngular(() => {\r\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => {\r\n        setTimeout(() => {\r\n          const activeCell: HTMLElement | null = this._elementRef.nativeElement.querySelector(\r\n            '.mat-calendar-body-active',\r\n          );\r\n\r\n          if (activeCell) {\r\n            if (!movePreview) {\r\n              this._skipNextFocus = true;\r\n            }\r\n\r\n            activeCell.focus();\r\n          }\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  /** Focuses the active cell after change detection has run and the microtask queue is empty. */\r\n  _scheduleFocusActiveCellAfterViewChecked() {\r\n    this._focusActiveCellAfterViewChecked = true;\r\n  }\r\n\r\n  /** Gets whether a value is the start of the main range. */\r\n  _isRangeStart(value: number) {\r\n    return isStart(value, this.startValue, this.endValue);\r\n  }\r\n\r\n  /** Gets whether a value is the end of the main range. */\r\n  _isRangeEnd(value: number) {\r\n    return isEnd(value, this.startValue, this.endValue);\r\n  }\r\n\r\n  /** Gets whether a value is within the currently-selected range. */\r\n  _isInRange(value: number): boolean {\r\n    return isInRange(value, this.startValue, this.endValue, this.isRange);\r\n  }\r\n\r\n  /** Gets whether a value is the start of the comparison range. */\r\n  _isComparisonStart(value: number) {\r\n    return isStart(value, this.comparisonStart, this.comparisonEnd);\r\n  }\r\n\r\n  /** Whether the cell is a start bridge cell between the main and comparison ranges. */\r\n  _isComparisonBridgeStart(value: number, rowIndex: number, colIndex: number) {\r\n    if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\r\n      return false;\r\n    }\r\n\r\n    let previousCell: NgxMatCalendarCell | undefined = this.rows[rowIndex][colIndex - 1];\r\n\r\n    if (!previousCell) {\r\n      const previousRow = this.rows[rowIndex - 1];\r\n      previousCell = previousRow && previousRow[previousRow.length - 1];\r\n    }\r\n\r\n    return previousCell && !this._isRangeEnd(previousCell.compareValue);\r\n  }\r\n\r\n  /** Whether the cell is an end bridge cell between the main and comparison ranges. */\r\n  _isComparisonBridgeEnd(value: number, rowIndex: number, colIndex: number) {\r\n    if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\r\n      return false;\r\n    }\r\n\r\n    let nextCell: NgxMatCalendarCell | undefined = this.rows[rowIndex][colIndex + 1];\r\n\r\n    if (!nextCell) {\r\n      const nextRow = this.rows[rowIndex + 1];\r\n      nextCell = nextRow && nextRow[0];\r\n    }\r\n\r\n    return nextCell && !this._isRangeStart(nextCell.compareValue);\r\n  }\r\n\r\n  /** Gets whether a value is the end of the comparison range. */\r\n  _isComparisonEnd(value: number) {\r\n    return isEnd(value, this.comparisonStart, this.comparisonEnd);\r\n  }\r\n\r\n  /** Gets whether a value is within the current comparison range. */\r\n  _isInComparisonRange(value: number) {\r\n    return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\r\n  }\r\n\r\n  _isComparisonIdentical(value: number) {\r\n    // Note that we don't need to null check the start/end\r\n    // here, because the `value` will always be defined.\r\n    return this.comparisonStart === this.comparisonEnd && value === this.comparisonStart;\r\n  }\r\n\r\n  /** Gets whether a value is the start of the preview range. */\r\n  _isPreviewStart(value: number) {\r\n    return isStart(value, this.previewStart, this.previewEnd);\r\n  }\r\n\r\n  /** Gets whether a value is the end of the preview range. */\r\n  _isPreviewEnd(value: number) {\r\n    return isEnd(value, this.previewStart, this.previewEnd);\r\n  }\r\n\r\n  /** Gets whether a value is inside the preview range. */\r\n  _isInPreview(value: number) {\r\n    return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\r\n  }\r\n\r\n  /** Gets ids of aria descriptions for the start and end of a date range. */\r\n  _getDescribedby(value: number): string | null {\r\n    if (!this.isRange) {\r\n      return null;\r\n    }\r\n\r\n    if (this.startValue === value && this.endValue === value) {\r\n      return `${this._startDateLabelId} ${this._endDateLabelId}`;\r\n    } else if (this.startValue === value) {\r\n      return this._startDateLabelId;\r\n    } else if (this.endValue === value) {\r\n      return this._endDateLabelId;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Event handler for when the user enters an element\r\n   * inside the calendar body (e.g. by hovering in or focus).\r\n   */\r\n  private _enterHandler = (event: Event) => {\r\n    if (this._skipNextFocus && event.type === 'focus') {\r\n      this._skipNextFocus = false;\r\n      return;\r\n    }\r\n\r\n    // We only need to hit the zone when we're selecting a range.\r\n    if (event.target && this.isRange) {\r\n      const cell = this._getCellFromElement(event.target as HTMLElement);\r\n\r\n      if (cell) {\r\n        this._ngZone.run(() => this.previewChange.emit({value: cell.enabled ? cell : null, event}));\r\n      }\r\n    }\r\n  };\r\n\r\n  private _touchmoveHandler = (event: TouchEvent) => {\r\n    if (!this.isRange) return;\r\n\r\n    const target = getActualTouchTarget(event);\r\n    const cell = target ? this._getCellFromElement(target as HTMLElement) : null;\r\n\r\n    if (target !== event.target) {\r\n      this._didDragSinceMouseDown = true;\r\n    }\r\n\r\n    // If the initial target of the touch is a date cell, prevent default so\r\n    // that the move is not handled as a scroll.\r\n    if (getCellElement(event.target as HTMLElement)) {\r\n      event.preventDefault();\r\n    }\r\n\r\n    this._ngZone.run(() => this.previewChange.emit({value: cell?.enabled ? cell : null, event}));\r\n  };\r\n\r\n  /**\r\n   * Event handler for when the user's pointer leaves an element\r\n   * inside the calendar body (e.g. by hovering out or blurring).\r\n   */\r\n  private _leaveHandler = (event: Event) => {\r\n    // We only need to hit the zone when we're selecting a range.\r\n    if (this.previewEnd !== null && this.isRange) {\r\n      if (event.type !== 'blur') {\r\n        this._didDragSinceMouseDown = true;\r\n      }\r\n\r\n      // Only reset the preview end value when leaving cells. This looks better, because\r\n      // we have a gap between the cells and the rows and we don't want to remove the\r\n      // range just for it to show up again when the user moves a few pixels to the side.\r\n      if (\r\n        event.target &&\r\n        this._getCellFromElement(event.target as HTMLElement) &&\r\n        !(\r\n          (event as MouseEvent).relatedTarget &&\r\n          this._getCellFromElement((event as MouseEvent).relatedTarget as HTMLElement)\r\n        )\r\n      ) {\r\n        this._ngZone.run(() => this.previewChange.emit({value: null, event}));\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Triggered on mousedown or touchstart on a date cell.\r\n   * Respsonsible for starting a drag sequence.\r\n   */\r\n  private _mousedownHandler = (event: Event) => {\r\n    if (!this.isRange) return;\r\n\r\n    this._didDragSinceMouseDown = false;\r\n    // Begin a drag if a cell within the current range was targeted.\r\n    const cell = event.target && this._getCellFromElement(event.target as HTMLElement);\r\n    if (!cell || !this._isInRange(cell.rawValue)) {\r\n      return;\r\n    }\r\n\r\n    this._ngZone.run(() => {\r\n      this.dragStarted.emit({\r\n        value: cell.rawValue,\r\n        event,\r\n      });\r\n    });\r\n  };\r\n\r\n  /** Triggered on mouseup anywhere. Respsonsible for ending a drag sequence. */\r\n  private _mouseupHandler = (event: Event) => {\r\n    if (!this.isRange) return;\r\n\r\n    const cellElement = getCellElement(event.target as HTMLElement);\r\n    if (!cellElement) {\r\n      // Mouseup happened outside of datepicker. Cancel drag.\r\n      this._ngZone.run(() => {\r\n        this.dragEnded.emit({value: null, event});\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (cellElement.closest('.mat-calendar-body') !== this._elementRef.nativeElement) {\r\n      // Mouseup happened inside a different month instance.\r\n      // Allow it to handle the event.\r\n      return;\r\n    }\r\n\r\n    this._ngZone.run(() => {\r\n      const cell = this._getCellFromElement(cellElement);\r\n      this.dragEnded.emit({value: cell?.rawValue ?? null, event});\r\n    });\r\n  };\r\n\r\n  /** Triggered on touchend anywhere. Respsonsible for ending a drag sequence. */\r\n  private _touchendHandler = (event: TouchEvent) => {\r\n    const target = getActualTouchTarget(event);\r\n\r\n    if (target) {\r\n      this._mouseupHandler({target} as unknown as Event);\r\n    }\r\n  };\r\n\r\n  /** Finds the MatCalendarCell that corresponds to a DOM node. */\r\n  private _getCellFromElement(element: HTMLElement): NgxMatCalendarCell | null {\r\n    const cell = getCellElement(element);\r\n\r\n    if (cell) {\r\n      const row = cell.getAttribute('data-mat-row');\r\n      const col = cell.getAttribute('data-mat-col');\r\n\r\n      if (row && col) {\r\n        return this.rows[parseInt(row)][parseInt(col)];\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  private _id = `mat-calendar-body-${calendarBodyId++}`;\r\n\r\n  _startDateLabelId = `${this._id}-start-date`;\r\n\r\n  _endDateLabelId = `${this._id}-end-date`;\r\n}\r\n\r\n/** Checks whether a node is a table cell element. */\r\nfunction isTableCell(node: Node | undefined | null): node is HTMLTableCellElement {\r\n  return node?.nodeName === 'TD';\r\n}\r\n\r\n/**\r\n * Gets the date table cell element that is or contains the specified element.\r\n * Or returns null if element is not part of a date cell.\r\n */\r\nfunction getCellElement(element: HTMLElement): HTMLElement | null {\r\n  let cell: HTMLElement | undefined;\r\n  if (isTableCell(element)) {\r\n    cell = element;\r\n  } else if (isTableCell(element.parentNode)) {\r\n    cell = element.parentNode as HTMLElement;\r\n  } else if (isTableCell(element.parentNode?.parentNode)) {\r\n    cell = element.parentNode!.parentNode as HTMLElement;\r\n  }\r\n\r\n  return cell?.getAttribute('data-mat-row') != null ? cell : null;\r\n}\r\n\r\n/** Checks whether a value is the start of a range. */\r\nfunction isStart(value: number, start: number | null, end: number | null): boolean {\r\n  return end !== null && start !== end && value < end && value === start;\r\n}\r\n\r\n/** Checks whether a value is the end of a range. */\r\nfunction isEnd(value: number, start: number | null, end: number | null): boolean {\r\n  return start !== null && start !== end && value >= start && value === end;\r\n}\r\n\r\n/** Checks whether a value is inside of a range. */\r\nfunction isInRange(\r\n  value: number,\r\n  start: number | null,\r\n  end: number | null,\r\n  rangeEnabled: boolean,\r\n): boolean {\r\n  return (\r\n    rangeEnabled &&\r\n    start !== null &&\r\n    end !== null &&\r\n    start !== end &&\r\n    value >= start &&\r\n    value <= end\r\n  );\r\n}\r\n\r\n/**\r\n * Extracts the element that actually corresponds to a touch event's location\r\n * (rather than the element that initiated the sequence of touch events).\r\n */\r\nfunction getActualTouchTarget(event: TouchEvent): Element | null {\r\n  const touchLocation = event.changedTouches[0];\r\n  return document.elementFromPoint(touchLocation.clientX, touchLocation.clientY);\r\n}\r\n","<!--\r\n  If there's not enough space in the first row, create a separate label row. We mark this row as\r\n  aria-hidden because we don't want it to be read out as one of the weeks in the month.\r\n-->\r\n<tr *ngIf=\"_firstRowOffset < labelMinRequiredCells\" aria-hidden=\"true\">\r\n  <td class=\"mat-calendar-body-label\"\r\n      [attr.colspan]=\"numCols\"\r\n      [style.paddingTop]=\"_cellPadding\"\r\n      [style.paddingBottom]=\"_cellPadding\">\r\n    {{label}}\r\n  </td>\r\n</tr>\r\n\r\n<!-- Create the first row separately so we can include a special spacer cell. -->\r\n<tr *ngFor=\"let row of rows; let rowIndex = index\" role=\"row\">\r\n  <!--\r\n    This cell is purely decorative, but we can't put `aria-hidden` or `role=\"presentation\"` on it,\r\n    because it throws off the week days for the rest of the row on NVDA. The aspect ratio of the\r\n    table cells is maintained by setting the top and bottom padding as a percentage of the width\r\n    (a variant of the trick described here: https://www.w3schools.com/howto/howto_css_aspect_ratio.asp).\r\n  -->\r\n  <td *ngIf=\"rowIndex === 0 && _firstRowOffset\"\r\n      class=\"mat-calendar-body-label\"\r\n      [attr.colspan]=\"_firstRowOffset\"\r\n      [style.paddingTop]=\"_cellPadding\"\r\n      [style.paddingBottom]=\"_cellPadding\">\r\n    {{_firstRowOffset >= labelMinRequiredCells ? label : ''}}\r\n  </td>\r\n  <!--\r\n    Each gridcell in the calendar contains a button, which signals to assistive technology that the\r\n    cell is interactable, as well as the selection state via `aria-pressed`. See #23476 for\r\n    background.\r\n  -->\r\n  <td\r\n    *ngFor=\"let item of row; let colIndex = index\"\r\n    role=\"gridcell\"\r\n    class=\"mat-calendar-body-cell-container\"\r\n    [style.width]=\"_cellWidth\"\r\n    [style.paddingTop]=\"_cellPadding\"\r\n    [style.paddingBottom]=\"_cellPadding\"\r\n    [attr.data-mat-row]=\"rowIndex\"\r\n    [attr.data-mat-col]=\"colIndex\"\r\n  >\r\n    <button\r\n        type=\"button\"\r\n        class=\"mat-calendar-body-cell\"\r\n        [ngClass]=\"item.cssClasses\"\r\n        [tabindex]=\"_isActiveCell(rowIndex, colIndex) ? 0 : -1\"\r\n        [class.mat-calendar-body-disabled]=\"!item.enabled\"\r\n        [class.mat-calendar-body-active]=\"_isActiveCell(rowIndex, colIndex)\"\r\n        [class.mat-calendar-body-range-start]=\"_isRangeStart(item.compareValue)\"\r\n        [class.mat-calendar-body-range-end]=\"_isRangeEnd(item.compareValue)\"\r\n        [class.mat-calendar-body-in-range]=\"_isInRange(item.compareValue)\"\r\n        [class.mat-calendar-body-comparison-bridge-start]=\"_isComparisonBridgeStart(item.compareValue, rowIndex, colIndex)\"\r\n        [class.mat-calendar-body-comparison-bridge-end]=\"_isComparisonBridgeEnd(item.compareValue, rowIndex, colIndex)\"\r\n        [class.mat-calendar-body-comparison-start]=\"_isComparisonStart(item.compareValue)\"\r\n        [class.mat-calendar-body-comparison-end]=\"_isComparisonEnd(item.compareValue)\"\r\n        [class.mat-calendar-body-in-comparison-range]=\"_isInComparisonRange(item.compareValue)\"\r\n        [class.mat-calendar-body-preview-start]=\"_isPreviewStart(item.compareValue)\"\r\n        [class.mat-calendar-body-preview-end]=\"_isPreviewEnd(item.compareValue)\"\r\n        [class.mat-calendar-body-in-preview]=\"_isInPreview(item.compareValue)\"\r\n        [attr.aria-label]=\"item.ariaLabel\"\r\n        [attr.aria-disabled]=\"!item.enabled || null\"\r\n        [attr.aria-pressed]=\"_isSelected(item.compareValue)\"\r\n        [attr.aria-current]=\"todayValue === item.compareValue ? 'date' : null\"\r\n        [attr.aria-describedby]=\"_getDescribedby(item.compareValue)\"\r\n        (click)=\"_cellClicked(item, $event)\"\r\n        (focus)=\"_emitActiveDateChange(item, $event)\">\r\n        <span class=\"mat-calendar-body-cell-content mat-focus-indicator\"\r\n          [class.mat-calendar-body-selected]=\"_isSelected(item.compareValue)\"\r\n          [class.mat-calendar-body-comparison-identical]=\"_isComparisonIdentical(item.compareValue)\"\r\n          [class.mat-calendar-body-today]=\"todayValue === item.compareValue\">\r\n          {{item.displayValue}}\r\n        </span>\r\n        <span class=\"mat-calendar-body-cell-preview\" aria-hidden=\"true\"></span>\r\n    </button>\r\n  </td>\r\n</tr>\r\n\r\n<label [id]=\"_startDateLabelId\" class=\"mat-calendar-body-hidden-label\">\r\n  {{startDateAccessibleName}}\r\n</label>\r\n<label [id]=\"_endDateLabelId\" class=\"mat-calendar-body-hidden-label\">\r\n  {{endDateAccessibleName}}\r\n</label>\r\n","import { FactoryProvider, Injectable, InjectionToken, Optional, SkipSelf } from '@angular/core';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxDateRange } from './date-selection-model';\r\n\r\n/** Injection token used to customize the date range selection behavior. */\r\nexport const NGX_MAT_DATE_RANGE_SELECTION_STRATEGY = new InjectionToken<\r\n  NgxMatDateRangeSelectionStrategy<any>\r\n>('NGX_MAT_DATE_RANGE_SELECTION_STRATEGY');\r\n\r\n/** Object that can be provided in order to customize the date range selection behavior. */\r\nexport interface NgxMatDateRangeSelectionStrategy<D> {\r\n  /**\r\n   * Called when the user has finished selecting a value.\r\n   * @param date Date that was selected. Will be null if the user cleared the selection.\r\n   * @param currentRange Range that is currently show in the calendar.\r\n   * @param event DOM event that triggered the selection. Currently only corresponds to a `click`\r\n   *    event, but it may get expanded in the future.\r\n   */\r\n  selectionFinished(date: D | null, currentRange: NgxDateRange<D>, event: Event): NgxDateRange<D>;\r\n\r\n  /**\r\n   * Called when the user has activated a new date (e.g. by hovering over\r\n   * it or moving focus) and the calendar tries to display a date range.\r\n   *\r\n   * @param activeDate Date that the user has activated. Will be null if the user moved\r\n   *    focus to an element that's no a calendar cell.\r\n   * @param currentRange Range that is currently shown in the calendar.\r\n   * @param event DOM event that caused the preview to be changed. Will be either a\r\n   *    `mouseenter`/`mouseleave` or `focus`/`blur` depending on how the user is navigating.\r\n   */\r\n  createPreview(activeDate: D | null, currentRange: NgxDateRange<D>, event: Event): NgxDateRange<D>;\r\n\r\n  /**\r\n   * Called when the user has dragged a date in the currently selected range to another\r\n   * date. Returns the date updated range that should result from this interaction.\r\n   *\r\n   * @param dateOrigin The date the user started dragging from.\r\n   * @param originalRange The originally selected date range.\r\n   * @param newDate The currently targeted date in the drag operation.\r\n   * @param event DOM event that triggered the updated drag state. Will be\r\n   *     `mouseenter`/`mouseup` or `touchmove`/`touchend` depending on the device type.\r\n   */\r\n  createDrag?(\r\n    dragOrigin: D,\r\n    originalRange: NgxDateRange<D>,\r\n    newDate: D,\r\n    event: Event,\r\n  ): NgxDateRange<D> | null;\r\n}\r\n\r\n/** Provides the default date range selection behavior. */\r\n@Injectable()\r\nexport class DefaultNgxMatCalendarRangeStrategy<D> implements NgxMatDateRangeSelectionStrategy<D> {\r\n  constructor(private _dateAdapter: NgxMatDateAdapter<D>) { }\r\n\r\n  selectionFinished(date: D, currentRange: NgxDateRange<D>) {\r\n    let { start, end } = currentRange;\r\n\r\n    if (start == null) {\r\n      start = date;\r\n    } else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\r\n      end = date;\r\n    } else {\r\n      start = date;\r\n      end = null;\r\n    }\r\n\r\n    return new NgxDateRange<D>(start, end);\r\n  }\r\n\r\n  createPreview(activeDate: D | null, currentRange: NgxDateRange<D>) {\r\n    let start: D | null = null;\r\n    let end: D | null = null;\r\n\r\n    if (currentRange.start && !currentRange.end && activeDate) {\r\n      start = currentRange.start;\r\n      end = activeDate;\r\n    }\r\n\r\n    return new NgxDateRange<D>(start, end);\r\n  }\r\n\r\n  createDrag(dragOrigin: D, originalRange: NgxDateRange<D>, newDate: D) {\r\n    let start = originalRange.start;\r\n    let end = originalRange.end;\r\n\r\n    if (!start || !end) {\r\n      // Can't drag from an incomplete range.\r\n      return null;\r\n    }\r\n\r\n    const adapter = this._dateAdapter;\r\n\r\n    const isRange = adapter.compareDate(start, end) !== 0;\r\n    const diffYears = adapter.getYear(newDate) - adapter.getYear(dragOrigin);\r\n    const diffMonths = adapter.getMonth(newDate) - adapter.getMonth(dragOrigin);\r\n    const diffDays = adapter.getDate(newDate) - adapter.getDate(dragOrigin);\r\n\r\n    if (isRange && adapter.sameDate(dragOrigin, originalRange.start)) {\r\n      start = newDate;\r\n      if (adapter.compareDate(newDate, end) > 0) {\r\n        end = adapter.addCalendarYears(end, diffYears);\r\n        end = adapter.addCalendarMonths(end, diffMonths);\r\n        end = adapter.addCalendarDays(end, diffDays);\r\n      }\r\n    } else if (isRange && adapter.sameDate(dragOrigin, originalRange.end)) {\r\n      end = newDate;\r\n      if (adapter.compareDate(newDate, start) < 0) {\r\n        start = adapter.addCalendarYears(start, diffYears);\r\n        start = adapter.addCalendarMonths(start, diffMonths);\r\n        start = adapter.addCalendarDays(start, diffDays);\r\n      }\r\n    } else {\r\n      start = adapter.addCalendarYears(start, diffYears);\r\n      start = adapter.addCalendarMonths(start, diffMonths);\r\n      start = adapter.addCalendarDays(start, diffDays);\r\n      end = adapter.addCalendarYears(end, diffYears);\r\n      end = adapter.addCalendarMonths(end, diffMonths);\r\n      end = adapter.addCalendarDays(end, diffDays);\r\n    }\r\n\r\n    return new NgxDateRange<D>(start, end);\r\n  }\r\n}\r\n\r\n/** @docs-private */\r\nexport function NGX_MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY(\r\n  parent: NgxMatDateRangeSelectionStrategy<unknown>,\r\n  adapter: NgxMatDateAdapter<unknown>,\r\n) {\r\n  return parent || new DefaultNgxMatCalendarRangeStrategy(adapter);\r\n}\r\n\r\nexport const NGX_MAT_CALENDAR_RANGE_STRATEGY_PROVIDER: FactoryProvider = {\r\n  provide: NGX_MAT_DATE_RANGE_SELECTION_STRATEGY,\r\n  deps: [[new Optional(), new SkipSelf(), NGX_MAT_DATE_RANGE_SELECTION_STRATEGY], NgxMatDateAdapter],\r\n  useFactory: NGX_MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY,\r\n};\r\n","\r\n\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  ESCAPE,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  SPACE,\r\n  UP_ARROW,\r\n  hasModifierKey,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { startWith } from 'rxjs/operators';\r\nimport {\r\n  NgxMatCalendarBody,\r\n  NgxMatCalendarCell,\r\n  NgxMatCalendarCellClassFunction,\r\n  NgxMatCalendarUserEvent,\r\n} from './calendar-body';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NGX_MAT_DATE_FORMATS, NgxMatDateFormats } from './core/date-formats';\r\nimport {\r\n  NGX_MAT_DATE_RANGE_SELECTION_STRATEGY,\r\n  NgxMatDateRangeSelectionStrategy,\r\n} from './date-range-selection-strategy';\r\nimport { NgxDateRange } from './date-selection-model';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\n\r\nconst DAYS_PER_WEEK = 7;\r\n\r\n/**\r\n * An internal component used to display a single month in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-month-view',\r\n  templateUrl: 'month-view.html',\r\n  exportAs: 'ngxMatMonthView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatMonthView<D> implements AfterContentInit, OnChanges, OnDestroy {\r\n  private _rerenderSubscription = Subscription.EMPTY;\r\n\r\n  /** Flag used to filter out space/enter keyup events that originated outside of the view. */\r\n  private _selectionKeyPressed: boolean;\r\n\r\n  /**\r\n   * The date to display in this month view (everything other than the month and year is ignored).\r\n   */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n  set activeDate(value: D) {\r\n    const oldActiveDate = this._activeDate;\r\n    const validDate =\r\n      this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) ||\r\n      this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): NgxDateRange<D> | D | null {\r\n    return this._selected;\r\n  }\r\n  set selected(value: NgxDateRange<D> | D | null) {\r\n    if (value instanceof NgxDateRange) {\r\n      this._selected = value;\r\n    } else {\r\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n\r\n    this._setRanges(this._selected);\r\n  }\r\n  private _selected: NgxDateRange<D> | D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** Function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: NgxMatCalendarCellClassFunction<D>;\r\n\r\n  /** Start of the comparison range. */\r\n  @Input() comparisonStart: D | null;\r\n\r\n  /** End of the comparison range. */\r\n  @Input() comparisonEnd: D | null;\r\n\r\n  /** ARIA Accessible name of the `<input matStartDate/>` */\r\n  @Input() startDateAccessibleName: string | null;\r\n\r\n  /** ARIA Accessible name of the `<input matEndDate/>` */\r\n  @Input() endDateAccessibleName: string | null;\r\n\r\n  /** Origin of active drag, or null when dragging is not active. */\r\n  @Input() activeDrag: NgxMatCalendarUserEvent<D> | null = null;\r\n\r\n  /** Emits when a new date is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<NgxMatCalendarUserEvent<D | null>> =\r\n    new EventEmitter<NgxMatCalendarUserEvent<D | null>>();\r\n\r\n  /** Emits when the user initiates a date range drag via mouse or touch. */\r\n  @Output() readonly dragStarted = new EventEmitter<NgxMatCalendarUserEvent<D>>();\r\n\r\n  /**\r\n   * Emits when the user completes or cancels a date range drag.\r\n   * Emits null when the drag was canceled or the newly selected date range if completed.\r\n   */\r\n  @Output() readonly dragEnded = new EventEmitter<NgxMatCalendarUserEvent<NgxDateRange<D> | null>>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(NgxMatCalendarBody) _matCalendarBody: NgxMatCalendarBody;\r\n\r\n  /** The label for this month (e.g. \"January 2017\"). */\r\n  _monthLabel: string;\r\n\r\n  /** Grid of calendar cells representing the dates of the month. */\r\n  _weeks: NgxMatCalendarCell[][];\r\n\r\n  /** The number of blank cells in the first row before the 1st of the month. */\r\n  _firstWeekOffset: number;\r\n\r\n  /** Start value of the currently-shown date range. */\r\n  _rangeStart: number | null;\r\n\r\n  /** End value of the currently-shown date range. */\r\n  _rangeEnd: number | null;\r\n\r\n  /** Start value of the currently-shown comparison date range. */\r\n  _comparisonRangeStart: number | null;\r\n\r\n  /** End value of the currently-shown comparison date range. */\r\n  _comparisonRangeEnd: number | null;\r\n\r\n  /** Start of the preview range. */\r\n  _previewStart: number | null;\r\n\r\n  /** End of the preview range. */\r\n  _previewEnd: number | null;\r\n\r\n  /** Whether the user is currently selecting a range of dates. */\r\n  _isRange: boolean;\r\n\r\n  /** The date of the month that today falls on. Null if today is in another month. */\r\n  _todayDate: number | null;\r\n\r\n  /** The names of the weekdays. */\r\n  _weekdays: { long: string; narrow: string }[];\r\n\r\n  constructor(\r\n    readonly _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n    @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() private _dir?: Directionality,\r\n    @Inject(NGX_MAT_DATE_RANGE_SELECTION_STRATEGY)\r\n    @Optional()\r\n    private _rangeStrategy?: NgxMatDateRangeSelectionStrategy<D>,\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._rerenderSubscription = this._dateAdapter.localeChanges\r\n      .pipe(startWith(null))\r\n      .subscribe(() => this._init());\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const comparisonChange = changes['comparisonStart'] || changes['comparisonEnd'];\r\n\r\n    if (comparisonChange && !comparisonChange.firstChange) {\r\n      this._setRanges(this.selected);\r\n    }\r\n\r\n    if (changes['activeDrag'] && !this.activeDrag) {\r\n      this._clearPreview();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Handles when a new date is selected. */\r\n  _dateSelected(event: NgxMatCalendarUserEvent<number>) {\r\n    const date = event.value;\r\n    const selectedDate = this._getDateFromDayOfMonth(date);\r\n    let rangeStartDate: number | null;\r\n    let rangeEndDate: number | null;\r\n\r\n    if (this._selected instanceof NgxDateRange) {\r\n      rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\r\n      rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\r\n    } else {\r\n      rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\r\n    }\r\n\r\n    if (rangeStartDate !== date || rangeEndDate !== date) {\r\n      this.selectedChange.emit(selectedDate);\r\n    }\r\n\r\n    this._userSelection.emit({ value: selectedDate, event: event.event });\r\n    this._clearPreview();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Takes the index of a calendar body cell wrapped in in an event as argument. For the date that\r\n   * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\r\n   * that date.\r\n   *\r\n   * This function is used to match each component's model of the active date with the calendar\r\n   * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\r\n   * parent's value asynchronously via the `activeDateChange` event. The child component receives an\r\n   * updated value asynchronously via the `activeCell` Input.\r\n   */\r\n  _updateActiveDate(event: NgxMatCalendarUserEvent<number>) {\r\n    const month = event.value;\r\n    const oldActiveDate = this._activeDate;\r\n    this.activeDate = this._getDateFromDayOfMonth(month);\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this._activeDate);\r\n    }\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in month view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(\r\n          this._activeDate,\r\n          1 - this._dateAdapter.getDate(this._activeDate),\r\n        );\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarDays(\r\n          this._activeDate,\r\n          this._dateAdapter.getNumDaysInMonth(this._activeDate) -\r\n          this._dateAdapter.getDate(this._activeDate),\r\n        );\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate = event.altKey\r\n          ? this._dateAdapter.addCalendarYears(this._activeDate, -1)\r\n          : this._dateAdapter.addCalendarMonths(this._activeDate, -1);\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate = event.altKey\r\n          ? this._dateAdapter.addCalendarYears(this._activeDate, 1)\r\n          : this._dateAdapter.addCalendarMonths(this._activeDate, 1);\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        this._selectionKeyPressed = true;\r\n\r\n        if (this._canSelect(this._activeDate)) {\r\n          // Prevent unexpected default actions such as form submission.\r\n          // Note that we only prevent the default action here while the selection happens in\r\n          // `keyup` below. We can't do the selection here, because it can cause the calendar to\r\n          // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\r\n          // because it's too late (see #23305).\r\n          event.preventDefault();\r\n        }\r\n        return;\r\n      case ESCAPE:\r\n        // Abort the current range selection if the user presses escape mid-selection.\r\n        if (this._previewEnd != null && !hasModifierKey(event)) {\r\n          this._clearPreview();\r\n          // If a drag is in progress, cancel the drag without changing the\r\n          // current selection.\r\n          if (this.activeDrag) {\r\n            this.dragEnded.emit({ value: null, event });\r\n          } else {\r\n            this.selectedChange.emit(null);\r\n            this._userSelection.emit({ value: null, event });\r\n          }\r\n          event.preventDefault();\r\n          event.stopPropagation(); // Prevents the overlay from closing.\r\n        }\r\n        return;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n\r\n      this._focusActiveCellAfterViewChecked();\r\n    }\r\n\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Handles keyup events on the calendar body when calendar is in month view. */\r\n  _handleCalendarBodyKeyup(event: KeyboardEvent): void {\r\n    if (event.keyCode === SPACE || event.keyCode === ENTER) {\r\n      if (this._selectionKeyPressed && this._canSelect(this._activeDate)) {\r\n        this._dateSelected({ value: this._dateAdapter.getDate(this._activeDate), event });\r\n      }\r\n\r\n      this._selectionKeyPressed = false;\r\n    }\r\n  }\r\n\r\n  /** Initializes this month view. */\r\n  _init() {\r\n    this._setRanges(this.selected);\r\n    this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\r\n    this._monthLabel = this._dateFormats.display.monthLabel\r\n      ? this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthLabel)\r\n      : this._dateAdapter\r\n        .getMonthNames('short')\r\n      [this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();\r\n\r\n    let firstOfMonth = this._dateAdapter.createDate(\r\n      this._dateAdapter.getYear(this.activeDate),\r\n      this._dateAdapter.getMonth(this.activeDate),\r\n      1,\r\n    );\r\n    this._firstWeekOffset =\r\n      (DAYS_PER_WEEK +\r\n        this._dateAdapter.getDayOfWeek(firstOfMonth) -\r\n        this._dateAdapter.getFirstDayOfWeek()) %\r\n      DAYS_PER_WEEK;\r\n\r\n    this._initWeekdays();\r\n    this._createWeekCells();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell(movePreview?: boolean) {\r\n    this._matCalendarBody._focusActiveCell(movePreview);\r\n  }\r\n\r\n  /** Focuses the active cell after change detection has run and the microtask queue is empty. */\r\n  _focusActiveCellAfterViewChecked() {\r\n    this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\r\n  }\r\n\r\n  /** Called when the user has activated a new cell and the preview needs to be updated. */\r\n  _previewChanged({ event, value: cell }: NgxMatCalendarUserEvent<NgxMatCalendarCell<D> | null>) {\r\n    if (this._rangeStrategy) {\r\n      // We can assume that this will be a range, because preview\r\n      // events aren't fired for single date selections.\r\n      const value = cell ? cell.rawValue! : null;\r\n      const previewRange = this._rangeStrategy.createPreview(\r\n        value,\r\n        this.selected as NgxDateRange<D>,\r\n        event,\r\n      );\r\n      this._previewStart = this._getCellCompareValue(previewRange.start);\r\n      this._previewEnd = this._getCellCompareValue(previewRange.end);\r\n\r\n      if (this.activeDrag && value) {\r\n        const dragRange = this._rangeStrategy.createDrag?.(\r\n          this.activeDrag.value,\r\n          this.selected as NgxDateRange<D>,\r\n          value,\r\n          event,\r\n        );\r\n\r\n        if (dragRange) {\r\n          this._previewStart = this._getCellCompareValue(dragRange.start);\r\n          this._previewEnd = this._getCellCompareValue(dragRange.end);\r\n        }\r\n      }\r\n\r\n      // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\r\n      // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\r\n      // when navigating one month back using the keyboard which will cause this handler\r\n      // to throw a \"changed after checked\" error when updating the preview state.\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the user has ended a drag. If the drag/drop was successful,\r\n   * computes and emits the new range selection.\r\n   */\r\n  protected _dragEnded(event: NgxMatCalendarUserEvent<D | null>) {\r\n    if (!this.activeDrag) return;\r\n\r\n    if (event.value) {\r\n      // Propagate drag effect\r\n      const dragDropResult = this._rangeStrategy?.createDrag?.(\r\n        this.activeDrag.value,\r\n        this.selected as NgxDateRange<D>,\r\n        event.value,\r\n        event.event,\r\n      );\r\n\r\n      this.dragEnded.emit({ value: dragDropResult ?? null, event: event.event });\r\n    } else {\r\n      this.dragEnded.emit({ value: null, event: event.event });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Takes a day of the month and returns a new date in the same month and year as the currently\r\n   *  active date. The returned date will have the same day of the month as the argument date.\r\n   */\r\n  private _getDateFromDayOfMonth(dayOfMonth: number): D {\r\n    return this._dateAdapter.createDate(\r\n      this._dateAdapter.getYear(this.activeDate),\r\n      this._dateAdapter.getMonth(this.activeDate),\r\n      dayOfMonth,\r\n    );\r\n  }\r\n\r\n  /** Initializes the weekdays. */\r\n  private _initWeekdays() {\r\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\r\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\r\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\r\n\r\n    // Rotate the labels for days of the week based on the configured first day of the week.\r\n    let weekdays = longWeekdays.map((long, i) => {\r\n      return { long, narrow: narrowWeekdays[i] };\r\n    });\r\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\r\n  }\r\n\r\n  /** Creates MatCalendarCells for the dates in this month. */\r\n  private _createWeekCells() {\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\r\n    const dateNames = this._dateAdapter.getDateNames();\r\n    this._weeks = [[]];\r\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\r\n      if (cell == DAYS_PER_WEEK) {\r\n        this._weeks.push([]);\r\n        cell = 0;\r\n      }\r\n      const date = this._dateAdapter.createDate(\r\n        this._dateAdapter.getYear(this.activeDate),\r\n        this._dateAdapter.getMonth(this.activeDate),\r\n        i + 1,\r\n      );\r\n      const enabled = this._shouldEnableDate(date);\r\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\r\n      const cellClasses = this.dateClass ? this.dateClass(date, 'month') : undefined;\r\n\r\n      this._weeks[this._weeks.length - 1].push(\r\n        new NgxMatCalendarCell<D>(\r\n          i + 1,\r\n          dateNames[i],\r\n          ariaLabel,\r\n          enabled,\r\n          cellClasses,\r\n          this._getCellCompareValue(date)!,\r\n          date,\r\n        ),\r\n      );\r\n    }\r\n  }\r\n\r\n  /** Date filter for the month */\r\n  private _shouldEnableDate(date: D): boolean {\r\n    return (\r\n      !!date &&\r\n      (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\r\n      (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) &&\r\n      (!this.dateFilter || this.dateFilter(date))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Gets the date in this month that the given Date falls on.\r\n   * Returns null if the given Date is in another month.\r\n   */\r\n  private _getDateInCurrentMonth(date: D | null): number | null {\r\n    return date && this._hasSameMonthAndYear(date, this.activeDate)\r\n      ? this._dateAdapter.getDate(date)\r\n      : null;\r\n  }\r\n\r\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\r\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\r\n    return !!(\r\n      d1 &&\r\n      d2 &&\r\n      this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\r\n      this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2)\r\n    );\r\n  }\r\n\r\n  /** Gets the value that will be used to one cell to another. */\r\n  private _getCellCompareValue(date: D | null): number | null {\r\n    if (date) {\r\n      // We use the time since the Unix epoch to compare dates in this view, rather than the\r\n      // cell values, because we need to support ranges that span across multiple months/years.\r\n      const year = this._dateAdapter.getYear(date);\r\n      const month = this._dateAdapter.getMonth(date);\r\n      const day = this._dateAdapter.getDate(date);\r\n      return new Date(year, month, day).getTime();\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n\r\n  /** Sets the current range based on a model value. */\r\n  private _setRanges(selectedValue: NgxDateRange<D> | D | null) {\r\n    if (selectedValue instanceof NgxDateRange) {\r\n      this._rangeStart = this._getCellCompareValue(selectedValue.start);\r\n      this._rangeEnd = this._getCellCompareValue(selectedValue.end);\r\n      this._isRange = true;\r\n    } else {\r\n      this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\r\n      this._isRange = false;\r\n    }\r\n\r\n    this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\r\n    this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\r\n  }\r\n\r\n  /** Gets whether a date can be selected in the month view. */\r\n  private _canSelect(date: D) {\r\n    return !this.dateFilter || this.dateFilter(date);\r\n  }\r\n\r\n  /** Clears out preview state. */\r\n  private _clearPreview() {\r\n    this._previewStart = this._previewEnd = null;\r\n  }\r\n}\r\n","<table class=\"mat-calendar-table\" role=\"grid\">\r\n  <thead class=\"mat-calendar-table-header\">\r\n    <tr>\r\n      <th scope=\"col\" *ngFor=\"let day of _weekdays\">\r\n        <span class=\"cdk-visually-hidden\">{{day.long}}</span>\r\n        <span aria-hidden=\"true\">{{day.narrow}}</span>\r\n      </th>\r\n    </tr>\r\n    <tr><th aria-hidden=\"true\" class=\"mat-calendar-table-header-divider\" colspan=\"7\"></th></tr>\r\n  </thead>\r\n  <tbody ngx-mat-calendar-body\r\n         [label]=\"_monthLabel\"\r\n         [rows]=\"_weeks\"\r\n         [todayValue]=\"_todayDate!\"\r\n         [startValue]=\"_rangeStart!\"\r\n         [endValue]=\"_rangeEnd!\"\r\n         [comparisonStart]=\"_comparisonRangeStart\"\r\n         [comparisonEnd]=\"_comparisonRangeEnd\"\r\n         [previewStart]=\"_previewStart\"\r\n         [previewEnd]=\"_previewEnd\"\r\n         [isRange]=\"_isRange\"\r\n         [labelMinRequiredCells]=\"3\"\r\n         [activeCell]=\"_dateAdapter.getDate(activeDate) - 1\"\r\n         [startDateAccessibleName]=\"startDateAccessibleName\"\r\n         [endDateAccessibleName]=\"endDateAccessibleName\"\r\n         (selectedValueChange)=\"_dateSelected($event)\"\r\n         (activeDateChange)=\"_updateActiveDate($event)\"\r\n         (previewChange)=\"_previewChanged($event)\"\r\n         (dragStarted)=\"dragStarted.emit($event)\"\r\n         (dragEnded)=\"_dragEnded($event)\"\r\n         (keyup)=\"_handleCalendarBodyKeyup($event)\"\r\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\r\n  </tbody>\r\n</table>\r\n","import { Directionality } from '@angular/cdk/bidi';\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  SPACE,\r\n  UP_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { startWith } from 'rxjs/operators';\r\nimport {\r\n  NgxMatCalendarBody,\r\n  NgxMatCalendarCell,\r\n  NgxMatCalendarCellClassFunction,\r\n  NgxMatCalendarUserEvent,\r\n} from './calendar-body';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxDateRange } from './date-selection-model';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\n\r\nexport const yearsPerPage = 24;\r\n\r\nexport const yearsPerRow = 4;\r\n\r\n/**\r\n * An internal component used to display a year selector in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-multi-year-view',\r\n  templateUrl: 'multi-year-view.html',\r\n  exportAs: 'ngxMatMultiYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatMultiYearView<D> implements AfterContentInit, OnDestroy {\r\n  private _rerenderSubscription = Subscription.EMPTY;\r\n\r\n  /** Flag used to filter out space/enter keyup events that originated outside of the view. */\r\n  private _selectionKeyPressed: boolean;\r\n\r\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n      this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) ||\r\n      this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n\r\n    if (\r\n      !isSameMultiYearView(\r\n        this._dateAdapter,\r\n        oldActiveDate,\r\n        this._activeDate,\r\n        this.minDate,\r\n        this.maxDate,\r\n      )\r\n    ) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): NgxDateRange<D> | D | null {\r\n    return this._selected;\r\n  }\r\n  set selected(value: NgxDateRange<D> | D | null) {\r\n    if (value instanceof NgxDateRange) {\r\n      this._selected = value;\r\n    } else {\r\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n\r\n    this._setSelectedYear(value);\r\n  }\r\n  private _selected: NgxDateRange<D> | D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Function that can be used to add custom CSS classes to date cells. */\r\n  @Input() dateClass: NgxMatCalendarCellClassFunction<D>;\r\n\r\n  /** Emits when a new year is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits the selected year. This doesn't imply a change on the selected date */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(NgxMatCalendarBody) _matCalendarBody: NgxMatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the currently displayed years. */\r\n  _years: NgxMatCalendarCell[][];\r\n\r\n  /** The year that today falls on. */\r\n  _todayYear: number;\r\n\r\n  /** The year of the selected date. Null if the selected date is null. */\r\n  _selectedYear: number | null;\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() private _dir?: Directionality,\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._rerenderSubscription = this._dateAdapter.localeChanges\r\n      .pipe(startWith(null))\r\n      .subscribe(() => this._init());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Initializes this multi-year view. */\r\n  _init() {\r\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\r\n\r\n    // We want a range years such that we maximize the number of\r\n    // enabled dates visible at once. This prevents issues where the minimum year\r\n    // is the last item of a page OR the maximum year is the first item of a page.\r\n\r\n    // The offset from the active year to the \"slot\" for the starting year is the\r\n    // *actual* first rendered year in the multi-year view.\r\n    const activeYear = this._dateAdapter.getYear(this._activeDate);\r\n    const minYearOfPage =\r\n      activeYear - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\r\n\r\n    this._years = [];\r\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\r\n      row.push(minYearOfPage + i);\r\n      if (row.length == yearsPerRow) {\r\n        this._years.push(row.map(year => this._createCellForYear(year)));\r\n        row = [];\r\n      }\r\n    }\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Handles when a new year is selected. */\r\n  _yearSelected(event: NgxMatCalendarUserEvent<number>) {\r\n    const year = event.value;\r\n    const selectedYear = this._dateAdapter.createDate(year, 0, 1);\r\n    const selectedDate = this._getDateFromYear(year);\r\n\r\n    this.yearSelected.emit(selectedYear);\r\n    this.selectedChange.emit(selectedDate);\r\n  }\r\n\r\n  /**\r\n   * Takes the index of a calendar body cell wrapped in in an event as argument. For the date that\r\n   * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\r\n   * that date.\r\n   *\r\n   * This function is used to match each component's model of the active date with the calendar\r\n   * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\r\n   * parent's value asynchronously via the `activeDateChange` event. The child component receives an\r\n   * updated value asynchronously via the `activeCell` Input.\r\n   */\r\n  _updateActiveDate(event: NgxMatCalendarUserEvent<number>) {\r\n    const year = event.value;\r\n    const oldActiveDate = this._activeDate;\r\n\r\n    this.activeDate = this._getDateFromYear(year);\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(\r\n          this._activeDate,\r\n          -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate),\r\n        );\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(\r\n          this._activeDate,\r\n          yearsPerPage -\r\n          getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) -\r\n          1,\r\n        );\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(\r\n          this._activeDate,\r\n          event.altKey ? -yearsPerPage * 10 : -yearsPerPage,\r\n        );\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(\r\n          this._activeDate,\r\n          event.altKey ? yearsPerPage * 10 : yearsPerPage,\r\n        );\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        // Note that we only prevent the default action here while the selection happens in\r\n        // `keyup` below. We can't do the selection here, because it can cause the calendar to\r\n        // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\r\n        // because it's too late (see #23305).\r\n        this._selectionKeyPressed = true;\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n\r\n    this._focusActiveCellAfterViewChecked();\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Handles keyup events on the calendar body when calendar is in multi-year view. */\r\n  _handleCalendarBodyKeyup(event: KeyboardEvent): void {\r\n    if (event.keyCode === SPACE || event.keyCode === ENTER) {\r\n      if (this._selectionKeyPressed) {\r\n        this._yearSelected({ value: this._dateAdapter.getYear(this._activeDate), event });\r\n      }\r\n\r\n      this._selectionKeyPressed = false;\r\n    }\r\n  }\r\n\r\n  _getActiveCell(): number {\r\n    return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /** Focuses the active cell after change detection has run and the microtask queue is empty. */\r\n  _focusActiveCellAfterViewChecked() {\r\n    this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\r\n  }\r\n\r\n  /**\r\n   * Takes a year and returns a new date on the same day and month as the currently active date\r\n   *  The returned date will have the same year as the argument date.\r\n   */\r\n  private _getDateFromYear(year: number) {\r\n    const activeMonth = this._dateAdapter.getMonth(this.activeDate);\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(\r\n      this._dateAdapter.createDate(year, activeMonth, 1),\r\n    );\r\n    const normalizedDate = this._dateAdapter.createDate(\r\n      year,\r\n      activeMonth,\r\n      Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth),\r\n    );\r\n    return normalizedDate;\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given year. */\r\n  private _createCellForYear(year: number) {\r\n    const date = this._dateAdapter.createDate(year, 0, 1);\r\n    const yearName = this._dateAdapter.getYearName(date);\r\n    const cellClasses = this.dateClass ? this.dateClass(date, 'multi-year') : undefined;\r\n\r\n    return new NgxMatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year), cellClasses);\r\n  }\r\n\r\n  /** Whether the given year is enabled. */\r\n  private _shouldEnableYear(year: number) {\r\n    // disable if the year is greater than maxDate lower than minDate\r\n    if (\r\n      year === undefined ||\r\n      year === null ||\r\n      (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\r\n      (this.minDate && year < this._dateAdapter.getYear(this.minDate))\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    // enable if it reaches here and there's no filter defined\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\r\n\r\n    // If any date in the year is enabled count the year as enabled.\r\n    for (\r\n      let date = firstOfYear;\r\n      this._dateAdapter.getYear(date) == year;\r\n      date = this._dateAdapter.addCalendarDays(date, 1)\r\n    ) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n\r\n  /** Sets the currently-highlighted year based on a model value. */\r\n  private _setSelectedYear(value: NgxDateRange<D> | D | null) {\r\n    this._selectedYear = null;\r\n\r\n    if (value instanceof NgxDateRange) {\r\n      const displayValue = value.start || value.end;\r\n\r\n      if (displayValue) {\r\n        this._selectedYear = this._dateAdapter.getYear(displayValue);\r\n      }\r\n    } else if (value) {\r\n      this._selectedYear = this._dateAdapter.getYear(value);\r\n    }\r\n  }\r\n}\r\n\r\nexport function isSameMultiYearView<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>,\r\n  date1: D,\r\n  date2: D,\r\n  minDate: D | null,\r\n  maxDate: D | null,\r\n): boolean {\r\n  const year1 = dateAdapter.getYear(date1);\r\n  const year2 = dateAdapter.getYear(date2);\r\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\r\n  return (\r\n    Math.floor((year1 - startingYear) / yearsPerPage) ===\r\n    Math.floor((year2 - startingYear) / yearsPerPage)\r\n  );\r\n}\r\n\r\n/**\r\n * When the multi-year view is first opened, the active year will be in view.\r\n * So we compute how many years are between the active year and the *slot* where our\r\n * \"startingYear\" will render when paged into view.\r\n */\r\nexport function getActiveOffset<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>,\r\n  activeDate: D,\r\n  minDate: D | null,\r\n  maxDate: D | null,\r\n): number {\r\n  const activeYear = dateAdapter.getYear(activeDate);\r\n  return euclideanModulo(activeYear - getStartingYear(dateAdapter, minDate, maxDate), yearsPerPage);\r\n}\r\n\r\n/**\r\n * We pick a \"starting\" year such that either the maximum year would be at the end\r\n * or the minimum year would be at the beginning of a page.\r\n */\r\nfunction getStartingYear<D>(\r\n  dateAdapter: NgxMatDateAdapter<D>,\r\n  minDate: D | null,\r\n  maxDate: D | null,\r\n): number {\r\n  let startingYear = 0;\r\n  if (maxDate) {\r\n    const maxYear = dateAdapter.getYear(maxDate);\r\n    startingYear = maxYear - yearsPerPage + 1;\r\n  } else if (minDate) {\r\n    startingYear = dateAdapter.getYear(minDate);\r\n  }\r\n  return startingYear;\r\n}\r\n\r\n/** Gets remainder that is non-negative, even if first number is negative */\r\nfunction euclideanModulo(a: number, b: number): number {\r\n  return ((a % b) + b) % b;\r\n}\r\n","<table class=\"mat-calendar-table\" role=\"grid\">\r\n  <thead aria-hidden=\"true\" class=\"mat-calendar-table-header\">\r\n    <tr><th class=\"mat-calendar-table-header-divider\" colspan=\"4\"></th></tr>\r\n  </thead>\r\n  <tbody ngx-mat-calendar-body\r\n         [rows]=\"_years\"\r\n         [todayValue]=\"_todayYear\"\r\n         [startValue]=\"_selectedYear!\"\r\n         [endValue]=\"_selectedYear!\"\r\n         [numCols]=\"4\"\r\n         [cellAspectRatio]=\"4 / 7\"\r\n         [activeCell]=\"_getActiveCell()\"\r\n         (selectedValueChange)=\"_yearSelected($event)\"\r\n         (activeDateChange)=\"_updateActiveDate($event)\"\r\n         (keyup)=\"_handleCalendarBodyKeyup($event)\"\r\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\r\n  </tbody>\r\n</table>\r\n","\r\n\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport {\r\n  DOWN_ARROW,\r\n  END,\r\n  ENTER,\r\n  HOME,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  SPACE,\r\n  UP_ARROW,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { MAT_DATE_FORMATS, MatDateFormats } from '@angular/material/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { startWith } from 'rxjs/operators';\r\nimport {\r\n  NgxMatCalendarBody,\r\n  NgxMatCalendarCell,\r\n  NgxMatCalendarCellClassFunction,\r\n  NgxMatCalendarUserEvent,\r\n} from './calendar-body';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxDateRange } from './date-selection-model';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\nimport { NGX_MAT_DATE_FORMATS, NgxMatDateFormats } from './core/date-formats';\r\n\r\n/**\r\n * An internal component used to display a single year in the datepicker.\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-year-view',\r\n  templateUrl: 'year-view.html',\r\n  exportAs: 'ngxMatYearView',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatYearView<D> implements AfterContentInit, OnDestroy {\r\n  private _rerenderSubscription = Subscription.EMPTY;\r\n\r\n  /** Flag used to filter out space/enter keyup events that originated outside of the view. */\r\n  private _selectionKeyPressed: boolean;\r\n\r\n  /** The date to display in this year view (everything other than the year is ignored). */\r\n  @Input()\r\n  get activeDate(): D {\r\n    return this._activeDate;\r\n  }\r\n  set activeDate(value: D) {\r\n    let oldActiveDate = this._activeDate;\r\n    const validDate =\r\n      this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) ||\r\n      this._dateAdapter.today();\r\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\r\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\r\n      this._init();\r\n    }\r\n  }\r\n  private _activeDate: D;\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): NgxDateRange<D> | D | null {\r\n    return this._selected;\r\n  }\r\n  set selected(value: NgxDateRange<D> | D | null) {\r\n    if (value instanceof NgxDateRange) {\r\n      this._selected = value;\r\n    } else {\r\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n\r\n    this._setSelectedMonth(value);\r\n  }\r\n  private _selected: NgxDateRange<D> | D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** A function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Function that can be used to add custom CSS classes to date cells. */\r\n  @Input() dateClass: NgxMatCalendarCellClassFunction<D>;\r\n\r\n  /** Emits when a new month is selected. */\r\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits the selected month. This doesn't imply a change on the selected date */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** Emits when any date is activated. */\r\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /** The body of calendar table */\r\n  @ViewChild(NgxMatCalendarBody) _matCalendarBody: NgxMatCalendarBody;\r\n\r\n  /** Grid of calendar cells representing the months of the year. */\r\n  _months: NgxMatCalendarCell[][];\r\n\r\n  /** The label for this year (e.g. \"2017\"). */\r\n  _yearLabel: string;\r\n\r\n  /** The month in this year that today falls on. Null if today is in a different year. */\r\n  _todayMonth: number | null;\r\n\r\n  /**\r\n   * The month in this year that the selected Date falls on.\r\n   * Null if the selected Date is in a different year.\r\n   */\r\n  _selectedMonth: number | null;\r\n\r\n  constructor(\r\n    readonly _changeDetectorRef: ChangeDetectorRef,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n    @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() private _dir?: Directionality,\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n    }\r\n\r\n    this._activeDate = this._dateAdapter.today();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._rerenderSubscription = this._dateAdapter.localeChanges\r\n      .pipe(startWith(null))\r\n      .subscribe(() => this._init());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._rerenderSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Handles when a new month is selected. */\r\n  _monthSelected(event: NgxMatCalendarUserEvent<number>) {\r\n    const month = event.value;\r\n\r\n    const selectedMonth = this._dateAdapter.createDate(\r\n      this._dateAdapter.getYear(this.activeDate),\r\n      month,\r\n      1,\r\n    );\r\n    this.monthSelected.emit(selectedMonth);\r\n\r\n    const selectedDate = this._getDateFromMonth(month);\r\n    this.selectedChange.emit(selectedDate);\r\n  }\r\n\r\n  /**\r\n   * Takes the index of a calendar body cell wrapped in in an event as argument. For the date that\r\n   * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\r\n   * that date.\r\n   *\r\n   * This function is used to match each component's model of the active date with the calendar\r\n   * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\r\n   * parent's value asynchronously via the `activeDateChange` event. The child component receives an\r\n   * updated value asynchronously via the `activeCell` Input.\r\n   */\r\n  _updateActiveDate(event: NgxMatCalendarUserEvent<number>) {\r\n    const month = event.value;\r\n    const oldActiveDate = this._activeDate;\r\n\r\n    this.activeDate = this._getDateFromMonth(month);\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n    }\r\n  }\r\n\r\n  /** Handles keydown events on the calendar body when calendar is in year view. */\r\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\r\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\r\n    // disabled ones from being selected. This may not be ideal, we should look into whether\r\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\r\n\r\n    const oldActiveDate = this._activeDate;\r\n    const isRtl = this._isRtl();\r\n\r\n    switch (event.keyCode) {\r\n      case LEFT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\r\n        break;\r\n      case RIGHT_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\r\n        break;\r\n      case UP_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\r\n        break;\r\n      case DOWN_ARROW:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\r\n        break;\r\n      case HOME:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(\r\n          this._activeDate,\r\n          -this._dateAdapter.getMonth(this._activeDate),\r\n        );\r\n        break;\r\n      case END:\r\n        this.activeDate = this._dateAdapter.addCalendarMonths(\r\n          this._activeDate,\r\n          11 - this._dateAdapter.getMonth(this._activeDate),\r\n        );\r\n        break;\r\n      case PAGE_UP:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(\r\n          this._activeDate,\r\n          event.altKey ? -10 : -1,\r\n        );\r\n        break;\r\n      case PAGE_DOWN:\r\n        this.activeDate = this._dateAdapter.addCalendarYears(\r\n          this._activeDate,\r\n          event.altKey ? 10 : 1,\r\n        );\r\n        break;\r\n      case ENTER:\r\n      case SPACE:\r\n        // Note that we only prevent the default action here while the selection happens in\r\n        // `keyup` below. We can't do the selection here, because it can cause the calendar to\r\n        // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\r\n        // because it's too late (see #23305).\r\n        this._selectionKeyPressed = true;\r\n        break;\r\n      default:\r\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\r\n        return;\r\n    }\r\n\r\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\r\n      this.activeDateChange.emit(this.activeDate);\r\n      this._focusActiveCellAfterViewChecked();\r\n    }\r\n\r\n    // Prevent unexpected default actions such as form submission.\r\n    event.preventDefault();\r\n  }\r\n\r\n  /** Handles keyup events on the calendar body when calendar is in year view. */\r\n  _handleCalendarBodyKeyup(event: KeyboardEvent): void {\r\n    if (event.keyCode === SPACE || event.keyCode === ENTER) {\r\n      if (this._selectionKeyPressed) {\r\n        this._monthSelected({ value: this._dateAdapter.getMonth(this._activeDate), event });\r\n      }\r\n\r\n      this._selectionKeyPressed = false;\r\n    }\r\n  }\r\n\r\n  /** Initializes this year view. */\r\n  _init() {\r\n    this._setSelectedMonth(this.selected);\r\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\r\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\r\n\r\n    let monthNames = this._dateAdapter.getMonthNames('short');\r\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\r\n    this._months = [\r\n      [0, 1, 2, 3],\r\n      [4, 5, 6, 7],\r\n      [8, 9, 10, 11],\r\n    ].map(row => row.map(month => this._createCellForMonth(month, monthNames[month])));\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Focuses the active cell after the microtask queue is empty. */\r\n  _focusActiveCell() {\r\n    this._matCalendarBody._focusActiveCell();\r\n  }\r\n\r\n  /** Schedules the matCalendarBody to focus the active cell after change detection has run */\r\n  _focusActiveCellAfterViewChecked() {\r\n    this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\r\n  }\r\n\r\n  /**\r\n   * Gets the month in this year that the given Date falls on.\r\n   * Returns null if the given Date is in another year.\r\n   */\r\n  private _getMonthInCurrentYear(date: D | null) {\r\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate)\r\n      ? this._dateAdapter.getMonth(date)\r\n      : null;\r\n  }\r\n\r\n  /**\r\n   * Takes a month and returns a new date in the same day and year as the currently active date.\r\n   *  The returned date will have the same month as the argument date.\r\n   */\r\n  private _getDateFromMonth(month: number) {\r\n    const normalizedDate = this._dateAdapter.createDate(\r\n      this._dateAdapter.getYear(this.activeDate),\r\n      month,\r\n      1,\r\n    );\r\n\r\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\r\n\r\n    return this._dateAdapter.createDate(\r\n      this._dateAdapter.getYear(this.activeDate),\r\n      month,\r\n      Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth),\r\n    );\r\n  }\r\n\r\n  /** Creates an MatCalendarCell for the given month. */\r\n  private _createCellForMonth(month: number, monthName: string) {\r\n    const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\r\n    const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.monthYearA11yLabel);\r\n    const cellClasses = this.dateClass ? this.dateClass(date, 'year') : undefined;\r\n\r\n    return new NgxMatCalendarCell(\r\n      month,\r\n      monthName.toLocaleUpperCase(),\r\n      ariaLabel,\r\n      this._shouldEnableMonth(month),\r\n      cellClasses,\r\n    );\r\n  }\r\n\r\n  /** Whether the given month is enabled. */\r\n  private _shouldEnableMonth(month: number) {\r\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\r\n\r\n    if (\r\n      month === undefined ||\r\n      month === null ||\r\n      this._isYearAndMonthAfterMaxDate(activeYear, month) ||\r\n      this._isYearAndMonthBeforeMinDate(activeYear, month)\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (!this.dateFilter) {\r\n      return true;\r\n    }\r\n\r\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\r\n\r\n    // If any date in the month is enabled count the month as enabled.\r\n    for (\r\n      let date = firstOfMonth;\r\n      this._dateAdapter.getMonth(date) == month;\r\n      date = this._dateAdapter.addCalendarDays(date, 1)\r\n    ) {\r\n      if (this.dateFilter(date)) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is after this.maxDate, considering\r\n   * just the month and year of this.maxDate\r\n   */\r\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\r\n    if (this.maxDate) {\r\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\r\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\r\n\r\n      return year > maxYear || (year === maxYear && month > maxMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tests whether the combination month/year is before this.minDate, considering\r\n   * just the month and year of this.minDate\r\n   */\r\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\r\n    if (this.minDate) {\r\n      const minYear = this._dateAdapter.getYear(this.minDate);\r\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\r\n\r\n      return year < minYear || (year === minYear && month < minMonth);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** Determines whether the user has the RTL layout direction. */\r\n  private _isRtl() {\r\n    return this._dir && this._dir.value === 'rtl';\r\n  }\r\n\r\n  /** Sets the currently-selected month based on a model value. */\r\n  private _setSelectedMonth(value: NgxDateRange<D> | D | null) {\r\n    if (value instanceof NgxDateRange) {\r\n      this._selectedMonth =\r\n        this._getMonthInCurrentYear(value.start) || this._getMonthInCurrentYear(value.end);\r\n    } else {\r\n      this._selectedMonth = this._getMonthInCurrentYear(value);\r\n    }\r\n  }\r\n}\r\n","<table class=\"mat-calendar-table\" role=\"grid\">\r\n  <thead aria-hidden=\"true\" class=\"mat-calendar-table-header\">\r\n    <tr><th class=\"mat-calendar-table-header-divider\" colspan=\"4\"></th></tr>\r\n  </thead>\r\n  <tbody ngx-mat-calendar-body\r\n         [label]=\"_yearLabel\"\r\n         [rows]=\"_months\"\r\n         [todayValue]=\"_todayMonth!\"\r\n         [startValue]=\"_selectedMonth!\"\r\n         [endValue]=\"_selectedMonth!\"\r\n         [labelMinRequiredCells]=\"2\"\r\n         [numCols]=\"4\"\r\n         [cellAspectRatio]=\"4 / 7\"\r\n         [activeCell]=\"_dateAdapter.getMonth(activeDate)\"\r\n         (selectedValueChange)=\"_monthSelected($event)\"\r\n         (activeDateChange)=\"_updateActiveDate($event)\"\r\n         (keyup)=\"_handleCalendarBodyKeyup($event)\"\r\n         (keydown)=\"_handleCalendarBodyKeydown($event)\">\r\n  </tbody>\r\n</table>\r\n","\r\n\r\nimport {Injectable} from '@angular/core';\r\nimport {Subject} from 'rxjs';\r\n\r\n/** Datepicker data that requires internationalization. */\r\n@Injectable({providedIn: 'root'})\r\nexport class NgxMatDatepickerIntl {\r\n  /**\r\n   * Stream that emits whenever the labels here are changed. Use this to notify\r\n   * components if the labels have changed after initialization.\r\n   */\r\n  readonly changes: Subject<void> = new Subject<void>();\r\n\r\n  /** A label for the calendar popup (used by screen readers). */\r\n  calendarLabel = 'Calendar';\r\n\r\n  /** A label for the button used to open the calendar popup (used by screen readers). */\r\n  openCalendarLabel = 'Open calendar';\r\n\r\n  /** Label for the button used to close the calendar popup. */\r\n  closeCalendarLabel = 'Close calendar';\r\n\r\n  /** A label for the previous month button (used by screen readers). */\r\n  prevMonthLabel = 'Previous month';\r\n\r\n  /** A label for the next month button (used by screen readers). */\r\n  nextMonthLabel = 'Next month';\r\n\r\n  /** A label for the previous year button (used by screen readers). */\r\n  prevYearLabel = 'Previous year';\r\n\r\n  /** A label for the next year button (used by screen readers). */\r\n  nextYearLabel = 'Next year';\r\n\r\n  /** A label for the previous multi-year button (used by screen readers). */\r\n  prevMultiYearLabel = 'Previous 24 years';\r\n\r\n  /** A label for the next multi-year button (used by screen readers). */\r\n  nextMultiYearLabel = 'Next 24 years';\r\n\r\n  /** A label for the 'switch to month view' button (used by screen readers). */\r\n  switchToMonthViewLabel = 'Choose date';\r\n\r\n  /** A label for the 'switch to year view' button (used by screen readers). */\r\n  switchToMultiYearViewLabel = 'Choose month and year';\r\n\r\n  /**\r\n   * A label for the first date of a range of dates (used by screen readers).\r\n   * @deprecated Provide your own internationalization string.\r\n   * @breaking-change 17.0.0\r\n   */\r\n  startDateLabel = 'Start date';\r\n\r\n  /**\r\n   * A label for the last date of a range of dates (used by screen readers).\r\n   * @deprecated Provide your own internationalization string.\r\n   * @breaking-change 17.0.0\r\n   */\r\n  endDateLabel = 'End date';\r\n\r\n  /** Formats a range of years (used for visuals). */\r\n  formatYearRange(start: string, end: string): string {\r\n    return `${start} \\u2013 ${end}`;\r\n  }\r\n\r\n  /** Formats a label for a range of years (used by screen readers). */\r\n  formatYearRangeLabel(start: string, end: string): string {\r\n    return `${start} to ${end}`;\r\n  }\r\n}\r\n","import { ComponentPortal, ComponentType, Portal } from '@angular/cdk/portal';\r\nimport {\r\n  AfterContentInit,\r\n  AfterViewChecked,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChange,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n  forwardRef,\r\n} from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { NgxMatCalendarCellClassFunction, NgxMatCalendarUserEvent } from './calendar-body';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NGX_MAT_DATE_FORMATS, NgxMatDateFormats } from './core/date-formats';\r\nimport { NGX_MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, NgxDateRange } from './date-selection-model';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\nimport { NgxMatDatepickerIntl } from './datepicker-intl';\r\nimport { NgxMatMonthView } from './month-view';\r\nimport {\r\n  NgxMatMultiYearView,\r\n  getActiveOffset,\r\n  isSameMultiYearView,\r\n  yearsPerPage,\r\n} from './multi-year-view';\r\nimport { NgxMatYearView } from './year-view';\r\n\r\nlet calendarHeaderId = 1;\r\n\r\n/**\r\n * Possible views for the calendar.\r\n * @docs-private\r\n */\r\nexport type NgxMatCalendarView = 'month' | 'year' | 'multi-year';\r\n\r\n/** Default header for MatCalendar */\r\n@Component({\r\n  selector: 'ngx-mat-calendar-header',\r\n  templateUrl: 'calendar-header.html',\r\n  exportAs: 'ngxMatCalendarHeader',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatCalendarHeader<D> {\r\n  constructor(\r\n    private _intl: NgxMatDatepickerIntl,\r\n    @Inject(forwardRef(() => NgxMatCalendar)) public calendar: NgxMatCalendar<D>,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n    changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\r\n  }\r\n\r\n  /** The display text for the current calendar view. */\r\n  get periodButtonText(): string {\r\n    if (this.calendar.currentView == 'month') {\r\n      return this._dateAdapter\r\n        .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\r\n        .toLocaleUpperCase();\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\r\n    }\r\n\r\n    return this._intl.formatYearRange(...this._formatMinAndMaxYearLabels());\r\n  }\r\n\r\n  /** The aria description for the current calendar view. */\r\n  get periodButtonDescription(): string {\r\n    if (this.calendar.currentView == 'month') {\r\n      return this._dateAdapter\r\n        .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\r\n        .toLocaleUpperCase();\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\r\n    }\r\n\r\n    // Format a label for the window of years displayed in the multi-year calendar view. Use\r\n    // `formatYearRangeLabel` because it is TTS friendly.\r\n    return this._intl.formatYearRangeLabel(...this._formatMinAndMaxYearLabels());\r\n  }\r\n\r\n  /** The `aria-label` for changing the calendar view. */\r\n  get periodButtonLabel(): string {\r\n    return this.calendar.currentView == 'month'\r\n      ? this._intl.switchToMultiYearViewLabel\r\n      : this._intl.switchToMonthViewLabel;\r\n  }\r\n\r\n  /** The label for the previous button. */\r\n  get prevButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.prevMonthLabel,\r\n      'year': this._intl.prevYearLabel,\r\n      'multi-year': this._intl.prevMultiYearLabel,\r\n    }[this.calendar.currentView];\r\n  }\r\n\r\n  /** The label for the next button. */\r\n  get nextButtonLabel(): string {\r\n    return {\r\n      'month': this._intl.nextMonthLabel,\r\n      'year': this._intl.nextYearLabel,\r\n      'multi-year': this._intl.nextMultiYearLabel,\r\n    }[this.calendar.currentView];\r\n  }\r\n\r\n  /** Handles user clicks on the period label. */\r\n  currentPeriodClicked(): void {\r\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\r\n  }\r\n\r\n  /** Handles user clicks on the previous button. */\r\n  previousClicked(): void {\r\n    this.calendar.activeDate =\r\n      this.calendar.currentView == 'month'\r\n        ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1)\r\n        : this._dateAdapter.addCalendarYears(\r\n          this.calendar.activeDate,\r\n          this.calendar.currentView == 'year' ? -1 : -yearsPerPage,\r\n        );\r\n  }\r\n\r\n  /** Handles user clicks on the next button. */\r\n  nextClicked(): void {\r\n    this.calendar.activeDate =\r\n      this.calendar.currentView == 'month'\r\n        ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1)\r\n        : this._dateAdapter.addCalendarYears(\r\n          this.calendar.activeDate,\r\n          this.calendar.currentView == 'year' ? 1 : yearsPerPage,\r\n        );\r\n  }\r\n\r\n  /** Whether the previous period button is enabled. */\r\n  previousEnabled(): boolean {\r\n    if (!this.calendar.minDate) {\r\n      return true;\r\n    }\r\n    return (\r\n      !this.calendar.minDate || !this._isSameView(this.calendar.activeDate, this.calendar.minDate)\r\n    );\r\n  }\r\n\r\n  /** Whether the next period button is enabled. */\r\n  nextEnabled(): boolean {\r\n    return (\r\n      !this.calendar.maxDate || !this._isSameView(this.calendar.activeDate, this.calendar.maxDate)\r\n    );\r\n  }\r\n\r\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\r\n  private _isSameView(date1: D, date2: D): boolean {\r\n    if (this.calendar.currentView == 'month') {\r\n      return (\r\n        this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\r\n        this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2)\r\n      );\r\n    }\r\n    if (this.calendar.currentView == 'year') {\r\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\r\n    }\r\n    // Otherwise we are in 'multi-year' view.\r\n    return isSameMultiYearView(\r\n      this._dateAdapter,\r\n      date1,\r\n      date2,\r\n      this.calendar.minDate,\r\n      this.calendar.maxDate,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Format two individual labels for the minimum year and maximum year available in the multi-year\r\n   * calendar view. Returns an array of two strings where the first string is the formatted label\r\n   * for the minimum year, and the second string is the formatted label for the maximum year.\r\n   */\r\n  private _formatMinAndMaxYearLabels(): [minYearLabel: string, maxYearLabel: string] {\r\n    // The offset from the active year to the \"slot\" for the starting year is the\r\n    // *actual* first rendered year in the multi-year view, and the last year is\r\n    // just yearsPerPage - 1 away.\r\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\r\n    const minYearOfPage =\r\n      activeYear -\r\n      getActiveOffset(\r\n        this._dateAdapter,\r\n        this.calendar.activeDate,\r\n        this.calendar.minDate,\r\n        this.calendar.maxDate,\r\n      );\r\n    const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\r\n    const minYearLabel = this._dateAdapter.getYearName(\r\n      this._dateAdapter.createDate(minYearOfPage, 0, 1),\r\n    );\r\n    const maxYearLabel = this._dateAdapter.getYearName(\r\n      this._dateAdapter.createDate(maxYearOfPage, 0, 1),\r\n    );\r\n\r\n    return [minYearLabel, maxYearLabel];\r\n  }\r\n\r\n  private _id = `mat-calendar-header-${calendarHeaderId++}`;\r\n\r\n  _periodButtonLabelId = `${this._id}-period-label`;\r\n}\r\n\r\n/** A calendar that is used as part of the datepicker. */\r\n@Component({\r\n  selector: 'ngx-mat-calendar',\r\n  templateUrl: 'calendar.html',\r\n  styleUrls: ['calendar.scss'],\r\n  host: {\r\n    'class': 'mat-calendar',\r\n  },\r\n  exportAs: 'ngxMatCalendar',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [NGX_MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER],\r\n})\r\nexport class NgxMatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\r\n  /** An input indicating the type of the header component, if set. */\r\n  @Input() headerComponent: ComponentType<any>;\r\n\r\n  /** A portal containing the header component type for this calendar. */\r\n  _calendarHeaderPortal: Portal<any>;\r\n\r\n  private _intlChanges: Subscription;\r\n\r\n  /**\r\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\r\n   * We need to schedule it, rather than do it immediately, because we have to wait\r\n   * for Angular to re-evaluate the view children.\r\n   */\r\n  private _moveFocusOnNextTick = false;\r\n\r\n  /** A date representing the period (month or year) to start the calendar in. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    return this._startAt;\r\n  }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** Whether the calendar should be started in month or year view. */\r\n  @Input() startView: NgxMatCalendarView = 'month';\r\n\r\n  /** The currently selected date. */\r\n  @Input()\r\n  get selected(): NgxDateRange<D> | D | null {\r\n    return this._selected;\r\n  }\r\n  set selected(value: NgxDateRange<D> | D | null) {\r\n    if (value instanceof NgxDateRange) {\r\n      this._selected = value;\r\n    } else {\r\n      this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n    }\r\n  }\r\n  private _selected: NgxDateRange<D> | D | null;\r\n\r\n  /** The minimum selectable date. */\r\n  @Input()\r\n  get minDate(): D | null {\r\n    return this._minDate;\r\n  }\r\n  set minDate(value: D | null) {\r\n    this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _minDate: D | null;\r\n\r\n  /** The maximum selectable date. */\r\n  @Input()\r\n  get maxDate(): D | null {\r\n    return this._maxDate;\r\n  }\r\n  set maxDate(value: D | null) {\r\n    this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _maxDate: D | null;\r\n\r\n  /** Function used to filter which dates are selectable. */\r\n  @Input() dateFilter: (date: D) => boolean;\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: NgxMatCalendarCellClassFunction<D>;\r\n\r\n  /** Start of the comparison range. */\r\n  @Input() comparisonStart: D | null;\r\n\r\n  /** End of the comparison range. */\r\n  @Input() comparisonEnd: D | null;\r\n\r\n  /** ARIA Accessible name of the `<input matStartDate/>` */\r\n  @Input() startDateAccessibleName: string | null;\r\n\r\n  /** ARIA Accessible name of the `<input matEndDate/>` */\r\n  @Input() endDateAccessibleName: string | null;\r\n\r\n  /** Emits when the currently selected date changes. */\r\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\r\n\r\n  /**\r\n   * Emits the year chosen in multiyear view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits the month chosen in year view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits when the current view changes.\r\n   */\r\n  @Output() readonly viewChanged: EventEmitter<NgxMatCalendarView> = new EventEmitter<NgxMatCalendarView>(\r\n    true,\r\n  );\r\n\r\n  /** Emits when any date is selected. */\r\n  @Output() readonly _userSelection: EventEmitter<NgxMatCalendarUserEvent<D | null>> =\r\n    new EventEmitter<NgxMatCalendarUserEvent<D | null>>();\r\n\r\n  /** Emits a new date range value when the user completes a drag drop operation. */\r\n  @Output() readonly _userDragDrop = new EventEmitter<NgxMatCalendarUserEvent<NgxDateRange<D>>>();\r\n\r\n  /** Reference to the current month view component. */\r\n  @ViewChild(NgxMatMonthView) monthView: NgxMatMonthView<D>;\r\n\r\n  /** Reference to the current year view component. */\r\n  @ViewChild(NgxMatYearView) yearView: NgxMatYearView<D>;\r\n\r\n  /** Reference to the current multi-year view component. */\r\n  @ViewChild(NgxMatMultiYearView) multiYearView: NgxMatMultiYearView<D>;\r\n\r\n  /**\r\n   * The current active date. This determines which time period is shown and which date is\r\n   * highlighted when using keyboard navigation.\r\n   */\r\n  get activeDate(): D {\r\n    return this._clampedActiveDate;\r\n  }\r\n  set activeDate(value: D) {\r\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\r\n    this.stateChanges.next();\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n  private _clampedActiveDate: D;\r\n\r\n  /** Whether the calendar is in month view. */\r\n  get currentView(): NgxMatCalendarView {\r\n    return this._currentView;\r\n  }\r\n  set currentView(value: NgxMatCalendarView) {\r\n    const viewChangedResult = this._currentView !== value ? value : null;\r\n    this._currentView = value;\r\n    this._moveFocusOnNextTick = true;\r\n    this._changeDetectorRef.markForCheck();\r\n    if (viewChangedResult) {\r\n      this.viewChanged.emit(viewChangedResult);\r\n    }\r\n  }\r\n  private _currentView: NgxMatCalendarView;\r\n\r\n  /** Origin of active drag, or null when dragging is not active. */\r\n  protected _activeDrag: NgxMatCalendarUserEvent<D> | null = null;\r\n\r\n  /**\r\n   * Emits whenever there is a state change that the header may need to respond to.\r\n   */\r\n  readonly stateChanges = new Subject<void>();\r\n\r\n  constructor(\r\n    _intl: NgxMatDatepickerIntl,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n    }\r\n\r\n\r\n    this._intlChanges = _intl.changes.subscribe(() => {\r\n      _changeDetectorRef.markForCheck();\r\n      this.stateChanges.next();\r\n    });\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || NgxMatCalendarHeader);\r\n    this.activeDate = this.startAt || this._dateAdapter.today();\r\n\r\n    // Assign to the private property since we don't want to move focus on init.\r\n    this._currentView = this.startView;\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    if (this._moveFocusOnNextTick) {\r\n      this._moveFocusOnNextTick = false;\r\n      this.focusActiveCell();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._intlChanges.unsubscribe();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    // Ignore date changes that are at a different time on the same day. This fixes issues where\r\n    // the calendar re-renders when there is no meaningful change to [minDate] or [maxDate]\r\n    // (#24435).\r\n    const minDateChange: SimpleChange | undefined =\r\n      changes['minDate'] &&\r\n        !this._dateAdapter.sameDate(changes['minDate'].previousValue, changes['minDate'].currentValue)\r\n        ? changes['minDate']\r\n        : undefined;\r\n    const maxDateChange: SimpleChange | undefined =\r\n      changes['maxDate'] &&\r\n        !this._dateAdapter.sameDate(changes['maxDate'].previousValue, changes['maxDate'].currentValue)\r\n        ? changes['maxDate']\r\n        : undefined;\r\n\r\n    const change = minDateChange || maxDateChange || changes['dateFilter'];\r\n\r\n    if (change && !change.firstChange) {\r\n      const view = this._getCurrentViewComponent();\r\n\r\n      if (view) {\r\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\r\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\r\n        this._changeDetectorRef.detectChanges();\r\n        view._init();\r\n      }\r\n    }\r\n\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Focuses the active date. */\r\n  focusActiveCell() {\r\n    this._getCurrentViewComponent()._focusActiveCell(false);\r\n  }\r\n\r\n  /** Updates today's date after an update of the active date */\r\n  updateTodaysDate() {\r\n    this._getCurrentViewComponent()._init();\r\n  }\r\n\r\n  /** Handles date selection in the month view. */\r\n  _dateSelected(event: NgxMatCalendarUserEvent<D | null>): void {\r\n\r\n    if (event.value && this.selected) {\r\n      this._dateAdapter.copyTime(event.value as D, this.selected as D);\r\n    }\r\n\r\n    const date = event.value;\r\n\r\n    if (\r\n      this.selected instanceof NgxDateRange ||\r\n      (date && !this._dateAdapter.sameDate(date, this.selected))\r\n    ) {\r\n      this.selectedChange.emit(date);\r\n    }\r\n\r\n    this._userSelection.emit(event);\r\n  }\r\n\r\n  /** Handles year selection in the multiyear view. */\r\n  _yearSelectedInMultiYearView(normalizedYear: D) {\r\n    this.yearSelected.emit(normalizedYear);\r\n  }\r\n\r\n  /** Handles month selection in the year view. */\r\n  _monthSelectedInYearView(normalizedMonth: D) {\r\n    this.monthSelected.emit(normalizedMonth);\r\n  }\r\n\r\n  /** Handles year/month selection in the multi-year/year views. */\r\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\r\n    this.activeDate = date;\r\n    this.currentView = view;\r\n  }\r\n\r\n  /** Called when the user starts dragging to change a date range. */\r\n  _dragStarted(event: NgxMatCalendarUserEvent<D>) {\r\n    this._activeDrag = event;\r\n  }\r\n\r\n  /**\r\n   * Called when a drag completes. It may end in cancelation or in the selection\r\n   * of a new range.\r\n   */\r\n  _dragEnded(event: NgxMatCalendarUserEvent<NgxDateRange<D> | null>) {\r\n    if (!this._activeDrag) return;\r\n\r\n    if (event.value) {\r\n      this._userDragDrop.emit(event as NgxMatCalendarUserEvent<NgxDateRange<D>>);\r\n    }\r\n\r\n    this._activeDrag = null;\r\n  }\r\n\r\n  /** Returns the component instance that corresponds to the current calendar view. */\r\n  private _getCurrentViewComponent(): NgxMatMonthView<D> | NgxMatYearView<D> | NgxMatMultiYearView<D> {\r\n    // The return type is explicitly written as a union to ensure that the Closure compiler does\r\n    // not optimize calls to _init(). Without the explicit return type, TypeScript narrows it to\r\n    // only the first component type. See https://github.com/angular/components/issues/22996.\r\n    return this.monthView || this.yearView || this.multiYearView;\r\n  }\r\n}\r\n","<div class=\"mat-calendar-header\">\r\n  <div class=\"mat-calendar-controls\">\r\n    <button mat-button type=\"button\" class=\"mat-calendar-period-button\"\r\n            (click)=\"currentPeriodClicked()\" [attr.aria-label]=\"periodButtonLabel\"\r\n            [attr.aria-describedby]=\"_periodButtonLabelId\" aria-live=\"polite\">\r\n      <span aria-hidden=\"true\">{{periodButtonText}}</span>\r\n      <svg class=\"mat-calendar-arrow\" [class.mat-calendar-invert]=\"calendar.currentView !== 'month'\"\r\n           viewBox=\"0 0 10 5\" focusable=\"false\" aria-hidden=\"true\">\r\n           <polygon points=\"0,0 5,5 10,0\"/>\r\n      </svg>\r\n    </button>\r\n\r\n    <div class=\"mat-calendar-spacer\"></div>\r\n\r\n    <ng-content></ng-content>\r\n\r\n    <button mat-icon-button type=\"button\" class=\"mat-calendar-previous-button\"\r\n            [disabled]=\"!previousEnabled()\" (click)=\"previousClicked()\"\r\n            [attr.aria-label]=\"prevButtonLabel\">\r\n    </button>\r\n\r\n    <button mat-icon-button type=\"button\" class=\"mat-calendar-next-button\"\r\n            [disabled]=\"!nextEnabled()\" (click)=\"nextClicked()\"\r\n            [attr.aria-label]=\"nextButtonLabel\">\r\n    </button>\r\n  </div>\r\n</div>\r\n<label [id]=\"_periodButtonLabelId\" class=\"mat-calendar-hidden-label\">{{periodButtonDescription}}</label>\r\n","<ng-template [cdkPortalOutlet]=\"_calendarHeaderPortal\"></ng-template>\r\n\r\n<div class=\"mat-calendar-content\" [ngSwitch]=\"currentView\" cdkMonitorSubtreeFocus tabindex=\"-1\">\r\n  <ngx-mat-month-view\r\n      *ngSwitchCase=\"'month'\"\r\n      [(activeDate)]=\"activeDate\"\r\n      [selected]=\"selected\"\r\n      [dateFilter]=\"dateFilter\"\r\n      [maxDate]=\"maxDate\"\r\n      [minDate]=\"minDate\"\r\n      [dateClass]=\"dateClass\"\r\n      [comparisonStart]=\"comparisonStart\"\r\n      [comparisonEnd]=\"comparisonEnd\"\r\n      [startDateAccessibleName]=\"startDateAccessibleName\"\r\n      [endDateAccessibleName]=\"endDateAccessibleName\"\r\n      (_userSelection)=\"_dateSelected($event)\"\r\n      (dragStarted)=\"_dragStarted($event)\"\r\n      (dragEnded)=\"_dragEnded($event)\"\r\n      [activeDrag]=\"_activeDrag\"\r\n      >\r\n  </ngx-mat-month-view>\r\n\r\n  <ngx-mat-year-view\r\n      *ngSwitchCase=\"'year'\"\r\n      [(activeDate)]=\"activeDate\"\r\n      [selected]=\"selected\"\r\n      [dateFilter]=\"dateFilter\"\r\n      [maxDate]=\"maxDate\"\r\n      [minDate]=\"minDate\"\r\n      [dateClass]=\"dateClass\"\r\n      (monthSelected)=\"_monthSelectedInYearView($event)\"\r\n      (selectedChange)=\"_goToDateInView($event, 'month')\">\r\n  </ngx-mat-year-view>\r\n\r\n  <ngx-mat-multi-year-view\r\n      *ngSwitchCase=\"'multi-year'\"\r\n      [(activeDate)]=\"activeDate\"\r\n      [selected]=\"selected\"\r\n      [dateFilter]=\"dateFilter\"\r\n      [maxDate]=\"maxDate\"\r\n      [minDate]=\"minDate\"\r\n      [dateClass]=\"dateClass\"\r\n      (yearSelected)=\"_yearSelectedInMultiYearView($event)\"\r\n      (selectedChange)=\"_goToDateInView($event, 'year')\">\r\n  </ngx-mat-multi-year-view>\r\n</div>\r\n","\r\n\r\nimport { Platform } from '@angular/cdk/platform';\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { MAT_DATE_LOCALE } from '@angular/material/core';\r\nimport { NgxMatDateAdapter } from './date-adapter';\r\n\r\n// TODO(mmalerba): Remove when we no longer support safari 9.\r\n/** Whether the browser supports the Intl API. */\r\nlet SUPPORTS_INTL_API: boolean;\r\n\r\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\r\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\r\n// the consumer is providing a polyfilled `Map`. See:\r\n// https://github.com/Microsoft/ChakraCore/issues/3189\r\n// https://github.com/angular/components/issues/15687\r\ntry {\r\n  SUPPORTS_INTL_API = typeof Intl != 'undefined';\r\n} catch {\r\n  SUPPORTS_INTL_API = false;\r\n}\r\n\r\n/** The default month names to use if Intl API is not available. */\r\nconst DEFAULT_MONTH_NAMES = {\r\n  'long': [\r\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\r\n    'October', 'November', 'December'\r\n  ],\r\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\r\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\r\n};\r\n\r\n\r\n/** The default date names to use if Intl API is not available. */\r\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\r\n\r\n\r\n/** The default day of the week names to use if Intl API is not available. */\r\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\r\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\r\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\r\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\r\n};\r\n\r\n\r\n/**\r\n * Matches strings that have the form of a valid RFC 3339 string\r\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\r\n * because the regex will match strings an with out of bounds month, date, etc.\r\n */\r\nconst ISO_8601_REGEX =\r\n  /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\r\n\r\n\r\n/** Creates an array and fills it with values. */\r\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\r\n  const valuesArray = Array(length);\r\n  for (let i = 0; i < length; i++) {\r\n    valuesArray[i] = valueFunction(i);\r\n  }\r\n  return valuesArray;\r\n}\r\n\r\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\r\n@Injectable()\r\nexport class NgxMatNativeDateAdapter extends NgxMatDateAdapter<Date> {\r\n\r\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\r\n  private readonly _clampDate: boolean;\r\n\r\n  /**\r\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\r\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\r\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\r\n   * will produce `'8/13/1800'`.\r\n   *\r\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\r\n   * getting the string representation of a Date object from its utc representation. We're keeping\r\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\r\n   * though.\r\n   */\r\n  useUtcForDisplay: boolean = true;\r\n\r\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\r\n    super();\r\n    super.setLocale(matDateLocale);\r\n\r\n    // IE does its own time zone correction, so we disable this on IE.\r\n    this.useUtcForDisplay = !platform.TRIDENT;\r\n    this._clampDate = platform.TRIDENT || platform.EDGE;\r\n  }\r\n\r\n  getYear(date: Date): number {\r\n    return date.getFullYear();\r\n  }\r\n\r\n  getMonth(date: Date): number {\r\n    return date.getMonth();\r\n  }\r\n\r\n  getDate(date: Date): number {\r\n    return date.getDate();\r\n  }\r\n\r\n  getDayOfWeek(date: Date): number {\r\n    return date.getDay();\r\n  }\r\n\r\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { month: style, timeZone: 'utc' });\r\n      return range(12, i =>\r\n        this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\r\n    }\r\n    return DEFAULT_MONTH_NAMES[style];\r\n  }\r\n\r\n  getDateNames(): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { day: 'numeric', timeZone: 'utc' });\r\n      return range(31, i => this._stripDirectionalityCharacters(\r\n        this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DATE_NAMES;\r\n  }\r\n\r\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { weekday: style, timeZone: 'utc' });\r\n      return range(7, i => this._stripDirectionalityCharacters(\r\n        this._format(dtf, new Date(2017, 0, i + 1))));\r\n    }\r\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\r\n  }\r\n\r\n  getYearName(date: Date): string {\r\n    if (SUPPORTS_INTL_API) {\r\n      const dtf = new Intl.DateTimeFormat(this.locale, { year: 'numeric', timeZone: 'utc' });\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return String(this.getYear(date));\r\n  }\r\n\r\n  getFirstDayOfWeek(): number {\r\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\r\n    return 0;\r\n  }\r\n\r\n  getNumDaysInMonth(date: Date): number {\r\n    return this.getDate(this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date) + 1, 0));\r\n  }\r\n\r\n  clone(date: Date): Date {\r\n    return new Date(date.getTime());\r\n  }\r\n\r\n  createDate(year: number, month: number, date: number): Date {\r\n    // Check for invalid month and date (except upper bound on date which we have to check after\r\n    // creating the Date).\r\n    if (month < 0 || month > 11) {\r\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\r\n    }\r\n\r\n    if (date < 1) {\r\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\r\n    }\r\n\r\n    let result = this._createDateWithOverflow(year, month, date);\r\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\r\n    if (result.getMonth() != month) {\r\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  today(): Date {\r\n    return new Date();\r\n  }\r\n\r\n  parse(value: any): Date | null {\r\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\r\n    // parameters.\r\n    if (typeof value == 'number') {\r\n      return new Date(value);\r\n    }\r\n    return value ? new Date(Date.parse(value)) : null;\r\n  }\r\n\r\n  format(date: Date, displayFormat: Object): string {\r\n    if (!this.isValid(date)) {\r\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\r\n    }\r\n\r\n    if (SUPPORTS_INTL_API) {\r\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\r\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\r\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\r\n        date = this.clone(date);\r\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\r\n      }\r\n\r\n      displayFormat = { ...displayFormat, timeZone: 'utc' };\r\n\r\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\r\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\r\n    }\r\n    return this._stripDirectionalityCharacters(date.toDateString());\r\n  }\r\n\r\n  addCalendarYears(date: Date, years: number): Date {\r\n    return this.addCalendarMonths(date, years * 12);\r\n  }\r\n\r\n  addCalendarMonths(date: Date, months: number): Date {\r\n    let newDate = this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date) + months, this.getDate(date));\r\n\r\n    // It's possible to wind up in the wrong month if the original month has more days than the new\r\n    // month. In this case we want to go to the last day of the desired month.\r\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\r\n    // guarantee this.\r\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\r\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\r\n    }\r\n\r\n    return newDate;\r\n  }\r\n\r\n  addCalendarDays(date: Date, days: number): Date {\r\n    return this._createDateWithOverflow(\r\n      this.getYear(date), this.getMonth(date), this.getDate(date) + days);\r\n  }\r\n\r\n  toIso8601(date: Date): string {\r\n    return [\r\n      date.getUTCFullYear(),\r\n      this._2digit(date.getUTCMonth() + 1),\r\n      this._2digit(date.getUTCDate())\r\n    ].join('-');\r\n  }\r\n\r\n  /**\r\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\r\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\r\n   * invalid date for all other values.\r\n   */\r\n  deserialize(value: any): Date | null {\r\n    if (typeof value === 'string') {\r\n      if (!value) {\r\n        return null;\r\n      }\r\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\r\n      // string is the right format first.\r\n      if (ISO_8601_REGEX.test(value)) {\r\n        let date = new Date(value);\r\n        if (this.isValid(date)) {\r\n          return date;\r\n        }\r\n      }\r\n    }\r\n    return super.deserialize(value);\r\n  }\r\n\r\n  isDateInstance(obj: any) {\r\n    return obj instanceof Date;\r\n  }\r\n\r\n  isValid(date: Date) {\r\n    return !isNaN(date.getTime());\r\n  }\r\n\r\n  invalid(): Date {\r\n    return new Date(NaN);\r\n  }\r\n\r\n  getHour(date: Date): number {\r\n    return date.getHours();\r\n  }\r\n  getMinute(date: Date): number {\r\n    return date.getMinutes();\r\n  }\r\n  getSecond(date: Date): number {\r\n    return date.getSeconds()\r\n  }\r\n\r\n  setHour(date: Date, value: number): void {\r\n    date.setHours(value);\r\n  }\r\n  setMinute(date: Date, value: number): void {\r\n    date.setMinutes(value);\r\n  }\r\n  setSecond(date: Date, value: number): void {\r\n    date.setSeconds(value);\r\n  }\r\n\r\n  /** Creates a date but allows the month and date to overflow. */\r\n  private _createDateWithOverflow(year: number, month: number, date: number) {\r\n    const result = new Date(year, month, date);\r\n\r\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\r\n    // abbreviations for 19xx.\r\n    if (year >= 0 && year < 100) {\r\n      result.setFullYear(this.getYear(result) - 1900);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Pads a number to make it two digits.\r\n   * @param n The number to pad.\r\n   * @returns The padded number.\r\n   */\r\n  private _2digit(n: number) {\r\n    return ('00' + n).slice(-2);\r\n  }\r\n\r\n  /**\r\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\r\n   * other browsers do not. We remove them to make output consistent and because they interfere with\r\n   * date parsing.\r\n   * @param str The string to strip direction characters from.\r\n   * @returns The stripped string.\r\n   */\r\n  private _stripDirectionalityCharacters(str: string) {\r\n    return str.replace(/[\\u200e\\u200f]/g, '');\r\n  }\r\n\r\n  /**\r\n   * When converting Date object to string, javascript built-in functions may return wrong\r\n   * results because it applies its internal DST rules. The DST rules around the world change\r\n   * very frequently, and the current valid rule is not always valid in previous years though.\r\n   * We work around this problem building a new Date object which has its internal UTC\r\n   * representation with the local date and time.\r\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\r\n   *    timeZone set to 'utc' to work fine.\r\n   * @param date Date from which we want to get the string representation according to dtf\r\n   * @returns A Date object with its UTC representation based on the passed in date info\r\n   */\r\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\r\n    // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\r\n    // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\r\n    const d = new Date();\r\n    d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\r\n    d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\r\n    return dtf.format(d);\r\n  }\r\n}\r\n","import { NgxMatDateFormats } from './date-formats';\r\n\r\n\r\nconst DEFAULT_DATE_INPUT = {\r\n  year: 'numeric', month: 'numeric', day: 'numeric',\r\n  hour12: false, hour: \"2-digit\", minute: \"2-digit\", second: \"2-digit\"\r\n}\r\n\r\nexport const NGX_MAT_NATIVE_DATE_FORMATS: NgxMatDateFormats = {\r\n  parse: {\r\n    dateInput: DEFAULT_DATE_INPUT,\r\n  },\r\n  display: {\r\n    dateInput: DEFAULT_DATE_INPUT,\r\n    monthYearLabel: { year: 'numeric', month: 'short' },\r\n    dateA11yLabel: { year: 'numeric', month: 'long', day: 'numeric' },\r\n    monthYearA11yLabel: { year: 'numeric', month: 'long' },\r\n  }\r\n};\r\n","\r\n\r\nimport { PlatformModule } from '@angular/cdk/platform';\r\nimport { NgModule } from '@angular/core';\r\nimport { NgxMatDateAdapter } from './date-adapter';\r\nimport { NgxMatNativeDateAdapter } from './native-date-adapter';\r\nimport { NGX_MAT_NATIVE_DATE_FORMATS } from './native-date-formats';\r\nimport { NGX_MAT_DATE_FORMATS } from './date-formats';\r\n\r\n\r\n@NgModule({\r\n    imports: [PlatformModule],\r\n    providers: [\r\n        { provide: NgxMatDateAdapter, useClass: NgxMatNativeDateAdapter },\r\n    ],\r\n})\r\nexport class NgxNativeDateModule { }\r\n\r\n@NgModule({\r\n    imports: [NgxNativeDateModule],\r\n    providers: [{ provide: NGX_MAT_DATE_FORMATS, useValue: NGX_MAT_NATIVE_DATE_FORMATS }],\r\n})\r\nexport class NgxMatNativeDateModule { }\r\n","\r\n\r\n// This file contains the `_computeAriaAccessibleName` function, which computes what the *expected*\r\n// ARIA accessible name would be for a given element. Implements a subset of ARIA specification\r\n// [Accessible Name and Description Computation 1.2](https://www.w3.org/TR/accname-1.2/).\r\n//\r\n// Specification accname-1.2 can be summarized by returning the result of the first method\r\n// available.\r\n//\r\n//  1. `aria-labelledby` attribute\r\n//     ```\r\n//       <!-- example using aria-labelledby-->\r\n//       <label id='label-id'>Start Date</label>\r\n//       <input aria-labelledby='label-id'/>\r\n//     ```\r\n//  2. `aria-label` attribute (e.g. `<input aria-label=\"Departure\"/>`)\r\n//  3. Label with `for`/`id`\r\n//     ```\r\n//       <!-- example using for/id -->\r\n//       <label for=\"current-node\">Label</label>\r\n//       <input id=\"current-node\"/>\r\n//     ```\r\n//  4. `placeholder` attribute (e.g. `<input placeholder=\"06/03/1990\"/>`)\r\n//  5. `title` attribute (e.g. `<input title=\"Check-In\"/>`)\r\n//  6. text content\r\n//     ```\r\n//       <!-- example using text content -->\r\n//       <label for=\"current-node\"><span>Departure</span> Date</label>\r\n//       <input id=\"current-node\"/>\r\n//     ```\r\n\r\n/**\r\n * Computes the *expected* ARIA accessible name for argument element based on [accname-1.2\r\n * specification](https://www.w3.org/TR/accname-1.2/). Implements a subset of accname-1.2,\r\n * and should only be used for the Datepicker's specific use case.\r\n *\r\n * Intended use:\r\n * This is not a general use implementation. Only implements the parts of accname-1.2 that are\r\n * required for the Datepicker's specific use case. This function is not intended for any other\r\n * use.\r\n *\r\n * Limitations:\r\n *  - Only covers the needs of `matStartDate` and `matEndDate`. Does not support other use cases.\r\n *  - See NOTES's in implementation for specific details on what parts of the accname-1.2\r\n *  specification are not implemented.\r\n *\r\n *  @param element {HTMLInputElement} native &lt;input/&gt; element of `matStartDate` or\r\n *  `matEndDate` component. Corresponds to the 'Root Element' from accname-1.2\r\n *\r\n *  @return expected ARIA accessible name of argument &lt;input/&gt;\r\n */\r\nexport function _computeAriaAccessibleName(\r\n  element: HTMLInputElement | HTMLTextAreaElement,\r\n): string {\r\n  return _computeAriaAccessibleNameInternal(element, true);\r\n}\r\n\r\n/**\r\n * Determine if argument node is an Element based on `nodeType` property. This function is safe to\r\n * use with server-side rendering.\r\n */\r\nfunction ssrSafeIsElement(node: Node): node is Element {\r\n  return node.nodeType === Node.ELEMENT_NODE;\r\n}\r\n\r\n/**\r\n * Determine if argument node is an HTMLInputElement based on `nodeName` property. This funciton is\r\n * safe to use with server-side rendering.\r\n */\r\nfunction ssrSafeIsHTMLInputElement(node: Node): node is HTMLInputElement {\r\n  return node.nodeName === 'INPUT';\r\n}\r\n\r\n/**\r\n * Determine if argument node is an HTMLTextAreaElement based on `nodeName` property. This\r\n * funciton is safe to use with server-side rendering.\r\n */\r\nfunction ssrSafeIsHTMLTextAreaElement(node: Node): node is HTMLTextAreaElement {\r\n  return node.nodeName === 'TEXTAREA';\r\n}\r\n\r\n/**\r\n * Calculate the expected ARIA accessible name for given DOM Node. Given DOM Node may be either the\r\n * \"Root node\" passed to `_computeAriaAccessibleName` or \"Current node\" as result of recursion.\r\n *\r\n * @return the accessible name of argument DOM Node\r\n *\r\n * @param currentNode node to determine accessible name of\r\n * @param isDirectlyReferenced true if `currentNode` is the root node to calculate ARIA accessible\r\n * name of. False if it is a result of recursion.\r\n */\r\nfunction _computeAriaAccessibleNameInternal(\r\n  currentNode: Node,\r\n  isDirectlyReferenced: boolean,\r\n): string {\r\n  // NOTE: this differs from accname-1.2 specification.\r\n  //  - Does not implement Step 1. of accname-1.2: '''If `currentNode`'s role prohibits naming,\r\n  //    return the empty string (\"\")'''.\r\n  //  - Does not implement Step 2.A. of accname-1.2: '''if current node is hidden and not directly\r\n  //    referenced by aria-labelledby... return the empty string.'''\r\n\r\n  // acc-name-1.2 Step 2.B.: aria-labelledby\r\n  if (ssrSafeIsElement(currentNode) && isDirectlyReferenced) {\r\n    const labelledbyIds: string[] =\r\n      currentNode.getAttribute?.('aria-labelledby')?.split(/\\s+/g) || [];\r\n    const validIdRefs: HTMLElement[] = labelledbyIds.reduce((validIds, id) => {\r\n      const elem = document.getElementById(id);\r\n      if (elem) {\r\n        validIds.push(elem);\r\n      }\r\n      return validIds;\r\n    }, [] as HTMLElement[]);\r\n\r\n    if (validIdRefs.length) {\r\n      return validIdRefs\r\n        .map(idRef => {\r\n          return _computeAriaAccessibleNameInternal(idRef, false);\r\n        })\r\n        .join(' ');\r\n    }\r\n  }\r\n\r\n  // acc-name-1.2 Step 2.C.: aria-label\r\n  if (ssrSafeIsElement(currentNode)) {\r\n    const ariaLabel = currentNode.getAttribute('aria-label')?.trim();\r\n\r\n    if (ariaLabel) {\r\n      return ariaLabel;\r\n    }\r\n  }\r\n\r\n  // acc-name-1.2 Step 2.D. attribute or element that defines a text alternative\r\n  //\r\n  // NOTE: this differs from accname-1.2 specification.\r\n  // Only implements Step 2.D. for `<label>`,`<input/>`, and `<textarea/>` element. Does not\r\n  // implement other elements that have an attribute or element that defines a text alternative.\r\n  if (ssrSafeIsHTMLInputElement(currentNode) || ssrSafeIsHTMLTextAreaElement(currentNode)) {\r\n    // use label with a `for` attribute referencing the current node\r\n    if (currentNode.labels?.length) {\r\n      return Array.from(currentNode.labels)\r\n        .map(x => _computeAriaAccessibleNameInternal(x, false))\r\n        .join(' ');\r\n    }\r\n\r\n    // use placeholder if available\r\n    const placeholder = currentNode.getAttribute('placeholder')?.trim();\r\n    if (placeholder) {\r\n      return placeholder;\r\n    }\r\n\r\n    // use title if available\r\n    const title = currentNode.getAttribute('title')?.trim();\r\n    if (title) {\r\n      return title;\r\n    }\r\n  }\r\n\r\n  // NOTE: this differs from accname-1.2 specification.\r\n  //  - does not implement acc-name-1.2 Step 2.E.: '''if the current node is a control embedded\r\n  //     within the label... then include the embedded control as part of the text alternative in\r\n  //     the following manner...'''. Step 2E applies to embedded controls such as textbox, listbox,\r\n  //     range, etc.\r\n  //  - does not implement acc-name-1.2 step 2.F.: check that '''role allows name from content''',\r\n  //    which applies to `currentNode` and its children.\r\n  //  - does not implement acc-name-1.2 Step 2.F.ii.: '''Check for CSS generated textual content'''\r\n  //    (e.g. :before and :after).\r\n  //  - does not implement acc-name-1.2 Step 2.I.: '''if the current node has a Tooltip attribute,\r\n  //    return its value'''\r\n\r\n  // Return text content with whitespace collapsed into a single space character. Accomplish\r\n  // acc-name-1.2 steps 2F, 2G, and 2H.\r\n  return (currentNode.textContent || '').replace(/\\s+/g, ' ').trim();\r\n}\r\n","\r\n\r\nimport { ListKeyManagerModifierKey } from '@angular/cdk/a11y';\r\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport { DOWN_ARROW, hasModifierKey } from '@angular/cdk/keycodes';\r\nimport {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n} from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NGX_MAT_DATE_FORMATS, NgxMatDateFormats } from './core/date-formats';\r\nimport {\r\n  NgxDateSelectionModelChange,\r\n  NgxExtractDateTypeFromSelection,\r\n  NgxMatDateSelectionModel,\r\n} from './date-selection-model';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\n\r\n/**\r\n * An event used for datepicker input and change events. We don't always have access to a native\r\n * input or change event because the event may have been triggered by the user clicking on the\r\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\r\n */\r\nexport class NgxMatDatepickerInputEvent<D, S = unknown> {\r\n  /** The new value for the target datepicker input. */\r\n  value: D | null;\r\n\r\n  constructor(\r\n    /** Reference to the datepicker input component that emitted the event. */\r\n    public target: NgxMatDatepickerInputBase<S, D>,\r\n    /** Reference to the native input element associated with the datepicker input. */\r\n    public targetElement: HTMLElement,\r\n  ) {\r\n    this.value = this.target.value;\r\n  }\r\n}\r\n\r\n/** Function that can be used to filter out dates from a calendar. */\r\nexport type NgxDateFilterFn<D> = (date: D | null) => boolean;\r\n\r\n/**\r\n * Partial representation of `MatFormField` that is used for backwards-compatibility\r\n * between the legacy and non-legacy variants.\r\n */\r\nexport interface _NgxMatFormFieldPartial {\r\n  getConnectedOverlayOrigin(): ElementRef;\r\n  getLabelId(): string | null;\r\n  color: ThemePalette;\r\n  _elementRef: ElementRef;\r\n  _shouldLabelFloat(): boolean;\r\n  _hasFloatingLabel(): boolean;\r\n  _labelId: string;\r\n}\r\n\r\n/** Base class for datepicker inputs. */\r\n@Directive()\r\nexport abstract class NgxMatDatepickerInputBase<S, D = NgxExtractDateTypeFromSelection<S>>\r\n  implements ControlValueAccessor, AfterViewInit, OnChanges, OnDestroy, Validator {\r\n  /** Whether the component has been initialized. */\r\n  private _isInitialized: boolean;\r\n\r\n  /** The value of the input. */\r\n  @Input()\r\n  get value(): D | null {\r\n    return this._model ? this._getValueFromModel(this._model.selection) : this._pendingValue;\r\n  }\r\n  set value(value: any) {\r\n    this._assignValueProgrammatically(value);\r\n  }\r\n  protected _model: NgxMatDateSelectionModel<S, D> | undefined;\r\n\r\n  /** Whether the datepicker-input is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return !!this._disabled || this._parentDisabled();\r\n  }\r\n  set disabled(value: BooleanInput) {\r\n    const newValue = coerceBooleanProperty(value);\r\n    const element = this._elementRef.nativeElement;\r\n\r\n    if (this._disabled !== newValue) {\r\n      this._disabled = newValue;\r\n      this.stateChanges.next(undefined);\r\n    }\r\n\r\n    // We need to null check the `blur` method, because it's undefined during SSR.\r\n    // In Ivy static bindings are invoked earlier, before the element is attached to the DOM.\r\n    // This can cause an error to be thrown in some browsers (IE/Edge) which assert that the\r\n    // element has been inserted.\r\n    if (newValue && this._isInitialized && element.blur) {\r\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\r\n      // is problematic, because it would mean that it triggers another change detection cycle,\r\n      // which then causes a changed after checked error if the input element was focused before.\r\n      element.blur();\r\n    }\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Emits when a `change` event is fired on this `<input>`. */\r\n  @Output() readonly dateChange: EventEmitter<NgxMatDatepickerInputEvent<D, S>> = new EventEmitter<\r\n    NgxMatDatepickerInputEvent<D, S>\r\n  >();\r\n\r\n  /** Emits when an `input` event is fired on this `<input>`. */\r\n  @Output() readonly dateInput: EventEmitter<NgxMatDatepickerInputEvent<D, S>> = new EventEmitter<\r\n    NgxMatDatepickerInputEvent<D, S>\r\n  >();\r\n\r\n  /** Emits when the internal state has changed */\r\n  readonly stateChanges = new Subject<void>();\r\n\r\n  _onTouched = () => { };\r\n  _validatorOnChange = () => { };\r\n\r\n  private _cvaOnChange: (value: any) => void = () => { };\r\n  private _valueChangesSubscription = Subscription.EMPTY;\r\n  private _localeSubscription = Subscription.EMPTY;\r\n\r\n  /**\r\n   * Since the value is kept on the model which is assigned in an Input,\r\n   * we might get a value before we have a model. This property keeps track\r\n   * of the value until we have somewhere to assign it.\r\n   */\r\n  private _pendingValue: D | null;\r\n\r\n  /** The form control validator for whether the input parses. */\r\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\r\n    return this._lastValueValid\r\n      ? null\r\n      : { 'matDatepickerParse': { 'text': this._elementRef.nativeElement.value } };\r\n  };\r\n\r\n  /** The form control validator for the date filter. */\r\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._dateAdapter.getValidDateOrNull(\r\n      this._dateAdapter.deserialize(control.value),\r\n    );\r\n    return !controlValue || this._matchesFilter(controlValue)\r\n      ? null\r\n      : { 'matDatepickerFilter': true };\r\n  };\r\n\r\n  /** The form control validator for the min date. */\r\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._dateAdapter.getValidDateOrNull(\r\n      this._dateAdapter.deserialize(control.value),\r\n    );\r\n    const min = this._getMinDate();\r\n    return !min || !controlValue || this._dateAdapter.compareDateWithTime(min, controlValue) <= 0\r\n      ? null\r\n      : { 'matDatetimePickerMin': { 'min': min, 'actual': controlValue } };\r\n  };\r\n\r\n  /** The form control validator for the max date. */\r\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const controlValue = this._dateAdapter.getValidDateOrNull(\r\n      this._dateAdapter.deserialize(control.value),\r\n    );\r\n    const max = this._getMaxDate();\r\n    return !max || !controlValue || this._dateAdapter.compareDateWithTime(max, controlValue) >= 0\r\n      ? null\r\n      : { 'matDatetimePickerMax': { 'max': max, 'actual': controlValue } };\r\n  };\r\n\r\n  /** Gets the base validator functions. */\r\n  protected _getValidators(): ValidatorFn[] {\r\n    return [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator];\r\n  }\r\n\r\n  /** Gets the minimum date for the input. Used for validation. */\r\n  abstract _getMinDate(): D | null;\r\n\r\n  /** Gets the maximum date for the input. Used for validation. */\r\n  abstract _getMaxDate(): D | null;\r\n\r\n  /** Gets the date filter function. Used for validation. */\r\n  protected abstract _getDateFilter(): NgxDateFilterFn<D> | undefined;\r\n\r\n  /** Registers a date selection model with the input. */\r\n  _registerModel(model: NgxMatDateSelectionModel<S, D>): void {\r\n    this._model = model;\r\n    this._valueChangesSubscription.unsubscribe();\r\n\r\n    if (this._pendingValue) {\r\n      this._assignValue(this._pendingValue);\r\n    }\r\n\r\n    this._valueChangesSubscription = this._model.selectionChanged.subscribe(event => {\r\n      if (this._shouldHandleChangeEvent(event)) {\r\n        const value = this._getValueFromModel(event.selection);\r\n        this._lastValueValid = this._isValidValue(value);\r\n        this._cvaOnChange(value);\r\n        this._onTouched();\r\n        this._formatValue(value);\r\n        this.dateInput.emit(new NgxMatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n        this.dateChange.emit(new NgxMatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Opens the popup associated with the input. */\r\n  protected abstract _openPopup(): void;\r\n\r\n  /** Assigns a value to the input's model. */\r\n  protected abstract _assignValueToModel(model: D | null): void;\r\n\r\n  /** Converts a value from the model into a native value for the input. */\r\n  protected abstract _getValueFromModel(modelValue: S): D | null;\r\n\r\n  /** Combined form control validator for this input. */\r\n  protected abstract _validator: ValidatorFn | null;\r\n\r\n  /** Predicate that determines whether the input should handle a particular change event. */\r\n  protected abstract _shouldHandleChangeEvent(event: NgxDateSelectionModelChange<S>): boolean;\r\n\r\n  /** Whether the last value set on the input was valid. */\r\n  protected _lastValueValid = false;\r\n\r\n  constructor(\r\n    protected _elementRef: ElementRef<HTMLInputElement>,\r\n    @Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) private _dateFormats: NgxMatDateFormats,\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw createMissingDateImplError('NGX_MAT_DATE_FORMATS');\r\n    }\r\n\r\n    // Update the displayed date when the locale changes.\r\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\r\n      this._assignValueProgrammatically(this.value);\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._isInitialized = true;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (dateInputsHaveChanged(changes, this._dateAdapter)) {\r\n      this.stateChanges.next(undefined);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._valueChangesSubscription.unsubscribe();\r\n    this._localeSubscription.unsubscribe();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  /** @docs-private */\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this._validatorOnChange = fn;\r\n  }\r\n\r\n  /** @docs-private */\r\n  validate(c: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(c) : null;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  writeValue(value: D): void {\r\n    this._assignValueProgrammatically(value);\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._cvaOnChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor.\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    const ctrlShiftMetaModifiers: ListKeyManagerModifierKey[] = ['ctrlKey', 'shiftKey', 'metaKey'];\r\n    const isAltDownArrow =\r\n      hasModifierKey(event, 'altKey') &&\r\n      event.keyCode === DOWN_ARROW &&\r\n      ctrlShiftMetaModifiers.every((modifier: ListKeyManagerModifierKey) => !hasModifierKey(event, modifier));\r\n\r\n    if (isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\r\n      this._openPopup();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  _onInput(value: string) {\r\n    const lastValueWasValid = this._lastValueValid;\r\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n    this._lastValueValid = this._isValidValue(date);\r\n    date = this._dateAdapter.getValidDateOrNull(date);\r\n\r\n    const isSameTime = this._dateAdapter.isSameTime(date, this.value);\r\n    const isSameDate = this._dateAdapter.sameDate(date, this.value);\r\n    const isSame = isSameDate && isSameTime;\r\n\r\n    const hasChanged = !isSame;\r\n\r\n    // We need to fire the CVA change event for all\r\n    // nulls, otherwise the validators won't run.\r\n    if (!date || hasChanged) {\r\n      this._cvaOnChange(date);\r\n    } else {\r\n      // Call the CVA change handler for invalid values\r\n      // since this is what marks the control as dirty.\r\n      if (value && !this.value) {\r\n        this._cvaOnChange(date);\r\n      }\r\n\r\n      if (lastValueWasValid !== this._lastValueValid) {\r\n        this._validatorOnChange();\r\n      }\r\n    }\r\n\r\n    if (hasChanged) {\r\n      this._assignValue(date);\r\n      this.dateInput.emit(new NgxMatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n    }\r\n  }\r\n\r\n  _onChange() {\r\n    this.dateChange.emit(new NgxMatDatepickerInputEvent(this, this._elementRef.nativeElement));\r\n  }\r\n\r\n  /** Handles blur events on the input. */\r\n  _onBlur() {\r\n    // Reformat the input only if we have a valid value.\r\n    if (this.value) {\r\n      this._formatValue(this.value);\r\n    }\r\n\r\n    this._onTouched();\r\n  }\r\n\r\n  /** Formats a value and sets it on the input element. */\r\n  protected _formatValue(value: D | null) {\r\n    this._elementRef.nativeElement.value =\r\n      value != null ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\r\n  }\r\n\r\n  /** Assigns a value to the model. */\r\n  private _assignValue(value: D | null) {\r\n    // We may get some incoming values before the model was\r\n    // assigned. Save the value so that we can assign it later.\r\n    if (this._model) {\r\n      this._assignValueToModel(value);\r\n      this._pendingValue = null;\r\n    } else {\r\n      this._pendingValue = value;\r\n    }\r\n  }\r\n\r\n  /** Whether a value is considered valid. */\r\n  private _isValidValue(value: D | null): boolean {\r\n    return !value || this._dateAdapter.isValid(value);\r\n  }\r\n\r\n  /**\r\n   * Checks whether a parent control is disabled. This is in place so that it can be overridden\r\n   * by inputs extending this one which can be placed inside of a group that can be disabled.\r\n   */\r\n  protected _parentDisabled() {\r\n    return false;\r\n  }\r\n\r\n  /** Programmatically assigns a value to the input. */\r\n  protected _assignValueProgrammatically(value: D | null) {\r\n    value = this._dateAdapter.deserialize(value);\r\n    this._lastValueValid = this._isValidValue(value);\r\n    value = this._dateAdapter.getValidDateOrNull(value);\r\n    this._assignValue(value);\r\n    this._formatValue(value);\r\n  }\r\n\r\n  /** Gets whether a value matches the current date filter. */\r\n  _matchesFilter(value: D | null): boolean {\r\n    const filter = this._getDateFilter();\r\n    return !filter || filter(value);\r\n  }\r\n}\r\n\r\n/**\r\n * Checks whether the `SimpleChanges` object from an `ngOnChanges`\r\n * callback has any changes, accounting for date objects.\r\n */\r\nexport function dateInputsHaveChanged(\r\n  changes: SimpleChanges,\r\n  adapter: NgxMatDateAdapter<unknown>,\r\n): boolean {\r\n  const keys = Object.keys(changes);\r\n\r\n  for (let key of keys) {\r\n    const { previousValue, currentValue } = changes[key];\r\n\r\n    if (adapter.isDateInstance(previousValue) && adapter.isDateInstance(currentValue)) {\r\n      if (!adapter.sameDate(previousValue, currentValue)) {\r\n        return true;\r\n      }\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n","import { Directionality } from '@angular/cdk/bidi';\r\nimport { BACKSPACE, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\r\nimport {\r\n  Directive,\r\n  DoCheck,\r\n  ElementRef,\r\n  Inject,\r\n  InjectionToken,\r\n  Injector,\r\n  OnInit,\r\n  Optional,\r\n  inject,\r\n} from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormGroupDirective,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  NgControl,\r\n  NgForm,\r\n  ValidationErrors,\r\n  ValidatorFn,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport {\r\n  CanUpdateErrorState,\r\n  ErrorStateMatcher,\r\n  MAT_DATE_FORMATS,\r\n  MatDateFormats,\r\n  mixinErrorState\r\n} from '@angular/material/core';\r\nimport { _computeAriaAccessibleName } from './aria-accessible-name';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NGX_MAT_DATE_FORMATS, NgxMatDateFormats } from './core/date-formats';\r\nimport { NgxDateRange, NgxDateSelectionModelChange } from './date-selection-model';\r\nimport { NgxDateFilterFn, NgxMatDatepickerInputBase } from './datepicker-input-base';\r\n\r\n/** Parent component that should be wrapped around `MatStartDate` and `MatEndDate`. */\r\nexport interface NgxMatDateRangeInputParent<D> {\r\n  id: string;\r\n  min: D | null;\r\n  max: D | null;\r\n  dateFilter: NgxDateFilterFn<D>;\r\n  rangePicker: {\r\n    opened: boolean;\r\n    id: string;\r\n  };\r\n  _startInput: NgxMatDateRangeInputPartBase<D>;\r\n  _endInput: NgxMatDateRangeInputPartBase<D>;\r\n  _groupDisabled: boolean;\r\n  _handleChildValueChange(): void;\r\n  _openDatepicker(): void;\r\n}\r\n\r\n/**\r\n * Used to provide the date range input wrapper component\r\n * to the parts without circular dependencies.\r\n */\r\nexport const NGX_MAT_DATE_RANGE_INPUT_PARENT = new InjectionToken<NgxMatDateRangeInputParent<unknown>>(\r\n  'NGX_MAT_DATE_RANGE_INPUT_PARENT',\r\n);\r\n\r\n/**\r\n * Base class for the individual inputs that can be projected inside a `mat-date-range-input`.\r\n */\r\n@Directive()\r\nabstract class NgxMatDateRangeInputPartBase<D>\r\n  extends NgxMatDatepickerInputBase<NgxDateRange<D>>\r\n  implements OnInit, DoCheck {\r\n  /**\r\n   * Form control bound to this input part.\r\n   * @docs-private\r\n   */\r\n  ngControl: NgControl;\r\n\r\n  /** @docs-private */\r\n  abstract updateErrorState(): void;\r\n\r\n  protected abstract override _validator: ValidatorFn | null;\r\n  protected abstract override _assignValueToModel(value: D | null): void;\r\n  protected abstract override _getValueFromModel(modelValue: NgxDateRange<D>): D | null;\r\n\r\n  protected readonly _dir = inject(Directionality, { optional: true });\r\n\r\n  constructor(\r\n    @Inject(NGX_MAT_DATE_RANGE_INPUT_PARENT) public _rangeInput: NgxMatDateRangeInputParent<D>,\r\n    public override _elementRef: ElementRef<HTMLInputElement>,\r\n    public _defaultErrorStateMatcher: ErrorStateMatcher,\r\n    private _injector: Injector,\r\n    @Optional() public _parentForm: NgForm,\r\n    @Optional() public _parentFormGroup: FormGroupDirective,\r\n    @Optional() dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) dateFormats: NgxMatDateFormats,\r\n  ) {\r\n    super(_elementRef, dateAdapter, dateFormats);\r\n  }\r\n\r\n  ngOnInit() {\r\n    // We need the date input to provide itself as a `ControlValueAccessor` and a `Validator`, while\r\n    // injecting its `NgControl` so that the error state is handled correctly. This introduces a\r\n    // circular dependency, because both `ControlValueAccessor` and `Validator` depend on the input\r\n    // itself. Usually we can work around it for the CVA, but there's no API to do it for the\r\n    // validator. We work around it here by injecting the `NgControl` in `ngOnInit`, after\r\n    // everything has been resolved.\r\n    // tslint:disable-next-line:no-bitwise\r\n    const ngControl = this._injector.get(NgControl, null, { optional: true, self: true });\r\n\r\n    if (ngControl) {\r\n      this.ngControl = ngControl;\r\n    }\r\n  }\r\n\r\n  ngDoCheck() {\r\n    if (this.ngControl) {\r\n      // We need to re-evaluate this on every change detection cycle, because there are some\r\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\r\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\r\n      this.updateErrorState();\r\n    }\r\n  }\r\n\r\n  /** Gets whether the input is empty. */\r\n  isEmpty(): boolean {\r\n    return this._elementRef.nativeElement.value.length === 0;\r\n  }\r\n\r\n  /** Gets the placeholder of the input. */\r\n  _getPlaceholder() {\r\n    return this._elementRef.nativeElement.placeholder;\r\n  }\r\n\r\n  /** Focuses the input. */\r\n  focus(): void {\r\n    this._elementRef.nativeElement.focus();\r\n  }\r\n\r\n  /** Gets the value that should be used when mirroring the input's size. */\r\n  getMirrorValue(): string {\r\n    const element = this._elementRef.nativeElement;\r\n    const value = element.value;\r\n    return value.length > 0 ? value : element.placeholder;\r\n  }\r\n\r\n  /** Handles `input` events on the input element. */\r\n  override _onInput(value: string) {\r\n    super._onInput(value);\r\n    this._rangeInput._handleChildValueChange();\r\n  }\r\n\r\n  /** Opens the datepicker associated with the input. */\r\n  protected _openPopup(): void {\r\n    this._rangeInput._openDatepicker();\r\n  }\r\n\r\n  /** Gets the minimum date from the range input. */\r\n  _getMinDate() {\r\n    return this._rangeInput.min;\r\n  }\r\n\r\n  /** Gets the maximum date from the range input. */\r\n  _getMaxDate() {\r\n    return this._rangeInput.max;\r\n  }\r\n\r\n  /** Gets the date filter function from the range input. */\r\n  protected _getDateFilter() {\r\n    return this._rangeInput.dateFilter;\r\n  }\r\n\r\n  protected override _parentDisabled() {\r\n    return this._rangeInput._groupDisabled;\r\n  }\r\n\r\n  protected _shouldHandleChangeEvent({ source }: NgxDateSelectionModelChange<NgxDateRange<D>>): boolean {\r\n    return source !== this._rangeInput._startInput && source !== this._rangeInput._endInput;\r\n  }\r\n\r\n  protected override _assignValueProgrammatically(value: D | null) {\r\n    super._assignValueProgrammatically(value);\r\n    const opposite = (\r\n      this === this._rangeInput._startInput\r\n        ? this._rangeInput._endInput\r\n        : this._rangeInput._startInput\r\n    ) as NgxMatDateRangeInputPartBase<D> | undefined;\r\n    opposite?._validatorOnChange();\r\n  }\r\n\r\n  /** return the ARIA accessible name of the input element */\r\n  _getAccessibleName(): string {\r\n    return _computeAriaAccessibleName(this._elementRef.nativeElement);\r\n  }\r\n}\r\n\r\nconst _NgxMatDateRangeInputBase = mixinErrorState(NgxMatDateRangeInputPartBase);\r\n\r\n/** Input for entering the start date in a `mat-date-range-input`. */\r\n@Directive({\r\n  selector: 'input[ngxMatStartDate]',\r\n  host: {\r\n    'class': 'mat-start-date mat-date-range-input-inner',\r\n    '[disabled]': 'disabled',\r\n    '(input)': '_onInput($event.target.value)',\r\n    '(change)': '_onChange()',\r\n    '(keydown)': '_onKeydown($event)',\r\n    '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\r\n    '[attr.aria-owns]': '(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null',\r\n    '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null',\r\n    '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null',\r\n    '(blur)': '_onBlur()',\r\n    'type': 'text',\r\n  },\r\n  providers: [\r\n    { provide: NG_VALUE_ACCESSOR, useExisting: NgxMatStartDate, multi: true },\r\n    { provide: NG_VALIDATORS, useExisting: NgxMatStartDate, multi: true },\r\n  ],\r\n  // These need to be specified explicitly, because some tooling doesn't\r\n  // seem to pick them up from the base class. See #20932.\r\n  outputs: ['dateChange', 'dateInput'],\r\n  inputs: ['errorStateMatcher'],\r\n})\r\nexport class NgxMatStartDate<D> extends _NgxMatDateRangeInputBase<D> implements CanUpdateErrorState {\r\n  /** Validator that checks that the start date isn't after the end date. */\r\n  private _startValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const start = this._dateAdapter.getValidDateOrNull(\r\n      this._dateAdapter.deserialize(control.value),\r\n    );\r\n    const end = this._model ? this._model.selection.end : null;\r\n    return !start || !end || this._dateAdapter.compareDate(start, end) <= 0\r\n      ? null\r\n      : { 'matStartDateInvalid': { 'end': end, 'actual': start } };\r\n  };\r\n\r\n  constructor(\r\n    @Inject(NGX_MAT_DATE_RANGE_INPUT_PARENT) rangeInput: NgxMatDateRangeInputParent<D>,\r\n    elementRef: ElementRef<HTMLInputElement>,\r\n    defaultErrorStateMatcher: ErrorStateMatcher,\r\n    injector: Injector,\r\n    @Optional() parentForm: NgForm,\r\n    @Optional() parentFormGroup: FormGroupDirective,\r\n    @Optional() dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) dateFormats: NgxMatDateFormats,\r\n  ) {\r\n    super(\r\n      rangeInput,\r\n      elementRef,\r\n      defaultErrorStateMatcher,\r\n      injector,\r\n      parentForm,\r\n      parentFormGroup,\r\n      dateAdapter,\r\n      dateFormats,\r\n    );\r\n  }\r\n\r\n  protected _validator = Validators.compose([...super._getValidators(), this._startValidator]);\r\n\r\n  protected _getValueFromModel(modelValue: NgxDateRange<D>) {\r\n    return modelValue.start;\r\n  }\r\n\r\n  protected override _shouldHandleChangeEvent(\r\n    change: NgxDateSelectionModelChange<NgxDateRange<D>>,\r\n  ): boolean {\r\n    if (!super._shouldHandleChangeEvent(change)) {\r\n      return false;\r\n    } else {\r\n      return !change.oldValue?.start\r\n        ? !!change.selection.start\r\n        : !change.selection.start ||\r\n        !!this._dateAdapter.compareDate(change.oldValue.start, change.selection.start);\r\n    }\r\n  }\r\n\r\n  protected _assignValueToModel(value: D | null) {\r\n    if (this._model) {\r\n      const range = new NgxDateRange(value, this._model.selection.end);\r\n      this._model.updateSelection(range, this);\r\n    }\r\n  }\r\n\r\n  protected override _formatValue(value: D | null) {\r\n    super._formatValue(value);\r\n\r\n    // Any time the input value is reformatted we need to tell the parent.\r\n    this._rangeInput._handleChildValueChange();\r\n  }\r\n\r\n  override _onKeydown(event: KeyboardEvent) {\r\n    const endInput = this._rangeInput._endInput;\r\n    const element = this._elementRef.nativeElement;\r\n    const isLtr = this._dir?.value !== 'rtl';\r\n\r\n    // If the user hits RIGHT (LTR) when at the end of the input (and no\r\n    // selection), move the cursor to the start of the end input.\r\n    if (\r\n      ((event.keyCode === RIGHT_ARROW && isLtr) || (event.keyCode === LEFT_ARROW && !isLtr)) &&\r\n      element.selectionStart === element.value.length &&\r\n      element.selectionEnd === element.value.length\r\n    ) {\r\n      event.preventDefault();\r\n      endInput._elementRef.nativeElement.setSelectionRange(0, 0);\r\n      endInput.focus();\r\n    } else {\r\n      super._onKeydown(event);\r\n    }\r\n  }\r\n}\r\n\r\n/** Input for entering the end date in a `mat-date-range-input`. */\r\n@Directive({\r\n  selector: 'input[ngxMatEndDate]',\r\n  host: {\r\n    'class': 'mat-end-date mat-date-range-input-inner',\r\n    '[disabled]': 'disabled',\r\n    '(input)': '_onInput($event.target.value)',\r\n    '(change)': '_onChange()',\r\n    '(keydown)': '_onKeydown($event)',\r\n    '[attr.aria-haspopup]': '_rangeInput.rangePicker ? \"dialog\" : null',\r\n    '[attr.aria-owns]': '(_rangeInput.rangePicker?.opened && _rangeInput.rangePicker.id) || null',\r\n    '[attr.min]': '_getMinDate() ? _dateAdapter.toIso8601(_getMinDate()) : null',\r\n    '[attr.max]': '_getMaxDate() ? _dateAdapter.toIso8601(_getMaxDate()) : null',\r\n    '(blur)': '_onBlur()',\r\n    'type': 'text',\r\n  },\r\n  providers: [\r\n    { provide: NG_VALUE_ACCESSOR, useExisting: NgxMatEndDate, multi: true },\r\n    { provide: NG_VALIDATORS, useExisting: NgxMatEndDate, multi: true },\r\n  ],\r\n  // These need to be specified explicitly, because some tooling doesn't\r\n  // seem to pick them up from the base class. See #20932.\r\n  outputs: ['dateChange', 'dateInput'],\r\n  inputs: ['errorStateMatcher'],\r\n})\r\nexport class NgxMatEndDate<D> extends _NgxMatDateRangeInputBase<D> implements CanUpdateErrorState {\r\n  /** Validator that checks that the end date isn't before the start date. */\r\n  private _endValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    const end = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\r\n    const start = this._model ? this._model.selection.start : null;\r\n    return !end || !start || this._dateAdapter.compareDate(end, start) >= 0\r\n      ? null\r\n      : { 'matEndDateInvalid': { 'start': start, 'actual': end } };\r\n  };\r\n\r\n  constructor(\r\n    @Inject(NGX_MAT_DATE_RANGE_INPUT_PARENT) rangeInput: NgxMatDateRangeInputParent<D>,\r\n    elementRef: ElementRef<HTMLInputElement>,\r\n    defaultErrorStateMatcher: ErrorStateMatcher,\r\n    injector: Injector,\r\n    @Optional() parentForm: NgForm,\r\n    @Optional() parentFormGroup: FormGroupDirective,\r\n    @Optional() dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) dateFormats: NgxMatDateFormats,\r\n  ) {\r\n    super(\r\n      rangeInput,\r\n      elementRef,\r\n      defaultErrorStateMatcher,\r\n      injector,\r\n      parentForm,\r\n      parentFormGroup,\r\n      dateAdapter,\r\n      dateFormats,\r\n    );\r\n  }\r\n\r\n  protected _validator = Validators.compose([...super._getValidators(), this._endValidator]);\r\n\r\n  protected _getValueFromModel(modelValue: NgxDateRange<D>) {\r\n    return modelValue.end;\r\n  }\r\n\r\n  protected override _shouldHandleChangeEvent(\r\n    change: NgxDateSelectionModelChange<NgxDateRange<D>>,\r\n  ): boolean {\r\n    if (!super._shouldHandleChangeEvent(change)) {\r\n      return false;\r\n    } else {\r\n      return !change.oldValue?.end\r\n        ? !!change.selection.end\r\n        : !change.selection.end ||\r\n        !!this._dateAdapter.compareDate(change.oldValue.end, change.selection.end);\r\n    }\r\n  }\r\n\r\n  protected _assignValueToModel(value: D | null) {\r\n    if (this._model) {\r\n      const range = new NgxDateRange(this._model.selection.start, value);\r\n      this._model.updateSelection(range, this);\r\n    }\r\n  }\r\n\r\n  override _onKeydown(event: KeyboardEvent) {\r\n    const startInput = this._rangeInput._startInput;\r\n    const element = this._elementRef.nativeElement;\r\n    const isLtr = this._dir?.value !== 'rtl';\r\n\r\n    // If the user is pressing backspace on an empty end input, move focus back to the start.\r\n    if (event.keyCode === BACKSPACE && !element.value) {\r\n      startInput.focus();\r\n    }\r\n    // If the user hits LEFT (LTR) when at the start of the input (and no\r\n    // selection), move the cursor to the end of the start input.\r\n    else if (\r\n      ((event.keyCode === LEFT_ARROW && isLtr) || (event.keyCode === RIGHT_ARROW && !isLtr)) &&\r\n      element.selectionStart === 0 &&\r\n      element.selectionEnd === 0\r\n    ) {\r\n      event.preventDefault();\r\n      const endPosition = startInput._elementRef.nativeElement.value.length;\r\n      startInput._elementRef.nativeElement.setSelectionRange(endPosition, endPosition);\r\n      startInput.focus();\r\n    } else {\r\n      super._onKeydown(event);\r\n    }\r\n  }\r\n}\r\n","import { FocusOrigin } from '@angular/cdk/a11y';\r\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  Optional,\r\n  Self,\r\n  SimpleChanges,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { ControlContainer, NgControl, Validators } from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { MAT_FORM_FIELD, MatFormFieldControl } from '@angular/material/form-field';\r\nimport { Subject, Subscription, merge } from 'rxjs';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport {\r\n  NGX_MAT_DATE_RANGE_INPUT_PARENT,\r\n  NgxMatDateRangeInputParent,\r\n  NgxMatEndDate,\r\n  NgxMatStartDate,\r\n} from './date-range-input-parts';\r\nimport { NgxMatDateRangePickerInput } from './date-range-picker';\r\nimport { NgxDateRange, NgxMatDateSelectionModel } from './date-selection-model';\r\nimport { NgxMatDatepickerControl, NgxMatDatepickerPanel } from './datepicker-base';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\nimport { NgxDateFilterFn, _NgxMatFormFieldPartial, dateInputsHaveChanged } from './datepicker-input-base';\r\n\r\nlet nextUniqueId = 0;\r\n\r\n@Component({\r\n  selector: 'ngx-mat-date-range-input',\r\n  templateUrl: 'date-range-input.html',\r\n  styleUrls: ['date-range-input.scss'],\r\n  exportAs: 'ngxMatDateRangeInput',\r\n  host: {\r\n    'class': 'mat-date-range-input',\r\n    '[class.mat-date-range-input-hide-placeholders]': '_shouldHidePlaceholders()',\r\n    '[class.mat-date-range-input-required]': 'required',\r\n    '[attr.id]': 'id',\r\n    'role': 'group',\r\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\r\n    '[attr.aria-describedby]': '_ariaDescribedBy',\r\n    // Used by the test harness to tie this input to its calendar. We can't depend on\r\n    // `aria-owns` for this, because it's only defined while the calendar is open.\r\n    '[attr.data-mat-calendar]': 'rangePicker ? rangePicker.id : null',\r\n  },\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    { provide: MatFormFieldControl, useExisting: NgxMatDateRangeInput },\r\n    { provide: NGX_MAT_DATE_RANGE_INPUT_PARENT, useExisting: NgxMatDateRangeInput },\r\n  ],\r\n})\r\nexport class NgxMatDateRangeInput<D>\r\n  implements\r\n  MatFormFieldControl<NgxDateRange<D>>,\r\n  NgxMatDatepickerControl<D>,\r\n  NgxMatDateRangeInputParent<D>,\r\n  NgxMatDateRangePickerInput<D>,\r\n  AfterContentInit,\r\n  OnChanges,\r\n  OnDestroy {\r\n  private _closedSubscription = Subscription.EMPTY;\r\n\r\n  /** Current value of the range input. */\r\n  get value() {\r\n    return this._model ? this._model.selection : null;\r\n  }\r\n\r\n  /** Unique ID for the group. */\r\n  id = `mat-date-range-input-${nextUniqueId++}`;\r\n\r\n  /** Whether the control is focused. */\r\n  focused = false;\r\n\r\n  /** Whether the control's label should float. */\r\n  get shouldLabelFloat(): boolean {\r\n    return this.focused || !this.empty;\r\n  }\r\n\r\n  /** Name of the form control. */\r\n  controlType = 'mat-date-range-input';\r\n\r\n  /**\r\n   * Implemented as a part of `MatFormFieldControl`.\r\n   * Set the placeholder attribute on `matStartDate` and `matEndDate`.\r\n   * @docs-private\r\n   */\r\n  get placeholder() {\r\n    const start = this._startInput?._getPlaceholder() || '';\r\n    const end = this._endInput?._getPlaceholder() || '';\r\n    return start || end ? `${start} ${this.separator} ${end}` : '';\r\n  }\r\n\r\n  /** The range picker that this input is associated with. */\r\n  @Input()\r\n  get rangePicker() {\r\n    return this._rangePicker;\r\n  }\r\n  set rangePicker(rangePicker: NgxMatDatepickerPanel<NgxMatDatepickerControl<D>, NgxDateRange<D>, D>) {\r\n    if (rangePicker) {\r\n      this._model = rangePicker.registerInput(this);\r\n      this._rangePicker = rangePicker;\r\n      this._closedSubscription.unsubscribe();\r\n      this._closedSubscription = rangePicker.closedStream.subscribe(() => {\r\n        this._startInput?._onTouched();\r\n        this._endInput?._onTouched();\r\n      });\r\n      this._registerModel(this._model!);\r\n    }\r\n  }\r\n  private _rangePicker: NgxMatDatepickerPanel<NgxMatDatepickerControl<D>, NgxDateRange<D>, D>;\r\n\r\n  /** Whether the input is required. */\r\n  @Input()\r\n  get required(): boolean {\r\n    return (\r\n      this._required ??\r\n      (this._isTargetRequired(this) ||\r\n        this._isTargetRequired(this._startInput) ||\r\n        this._isTargetRequired(this._endInput)) ??\r\n      false\r\n    );\r\n  }\r\n  set required(value: BooleanInput) {\r\n    this._required = coerceBooleanProperty(value);\r\n  }\r\n  private _required: boolean | undefined;\r\n\r\n  /** Function that can be used to filter out dates within the date range picker. */\r\n  @Input()\r\n  get dateFilter() {\r\n    return this._dateFilter;\r\n  }\r\n  set dateFilter(value: NgxDateFilterFn<D>) {\r\n    const start = this._startInput;\r\n    const end = this._endInput;\r\n    const wasMatchingStart = start && start._matchesFilter(start.value);\r\n    const wasMatchingEnd = end && end._matchesFilter(start.value);\r\n    this._dateFilter = value;\r\n\r\n    if (start && start._matchesFilter(start.value) !== wasMatchingStart) {\r\n      start._validatorOnChange();\r\n    }\r\n\r\n    if (end && end._matchesFilter(end.value) !== wasMatchingEnd) {\r\n      end._validatorOnChange();\r\n    }\r\n  }\r\n  private _dateFilter: NgxDateFilterFn<D>;\r\n\r\n  /** The minimum valid date. */\r\n  @Input()\r\n  get min(): D | null {\r\n    return this._min;\r\n  }\r\n  set min(value: D | null) {\r\n    const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n\r\n    if (!this._dateAdapter.sameDate(validValue, this._min)) {\r\n      this._min = validValue;\r\n      this._revalidate();\r\n    }\r\n  }\r\n  private _min: D | null;\r\n\r\n  /** The maximum valid date. */\r\n  @Input()\r\n  get max(): D | null {\r\n    return this._max;\r\n  }\r\n  set max(value: D | null) {\r\n    const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n\r\n    if (!this._dateAdapter.sameDate(validValue, this._max)) {\r\n      this._max = validValue;\r\n      this._revalidate();\r\n    }\r\n  }\r\n  private _max: D | null;\r\n\r\n  /** Whether the input is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._startInput && this._endInput\r\n      ? this._startInput.disabled && this._endInput.disabled\r\n      : this._groupDisabled;\r\n  }\r\n  set disabled(value: BooleanInput) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._groupDisabled) {\r\n      this._groupDisabled = newValue;\r\n      this.stateChanges.next(undefined);\r\n    }\r\n  }\r\n  _groupDisabled = false;\r\n\r\n  /** Whether the input is in an error state. */\r\n  get errorState(): boolean {\r\n    if (this._startInput && this._endInput) {\r\n      return this._startInput.errorState || this._endInput.errorState;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /** Whether the datepicker input is empty. */\r\n  get empty(): boolean {\r\n    const startEmpty = this._startInput ? this._startInput.isEmpty() : false;\r\n    const endEmpty = this._endInput ? this._endInput.isEmpty() : false;\r\n    return startEmpty && endEmpty;\r\n  }\r\n\r\n  /** Value for the `aria-describedby` attribute of the inputs. */\r\n  _ariaDescribedBy: string | null = null;\r\n\r\n  /** Date selection model currently registered with the input. */\r\n  private _model: NgxMatDateSelectionModel<NgxDateRange<D>> | undefined;\r\n\r\n  /** Separator text to be shown between the inputs. */\r\n  @Input() separator = '–';\r\n\r\n  /** Start of the comparison range that should be shown in the calendar. */\r\n  @Input() comparisonStart: D | null = null;\r\n\r\n  /** End of the comparison range that should be shown in the calendar. */\r\n  @Input() comparisonEnd: D | null = null;\r\n\r\n  @ContentChild(NgxMatStartDate) _startInput: NgxMatStartDate<D>;\r\n  @ContentChild(NgxMatEndDate) _endInput: NgxMatEndDate<D>;\r\n\r\n  /**\r\n   * Implemented as a part of `MatFormFieldControl`.\r\n   * TODO(crisbeto): change type to `AbstractControlDirective` after #18206 lands.\r\n   * @docs-private\r\n   */\r\n  ngControl: NgControl | null;\r\n\r\n  /** Emits when the input's state has changed. */\r\n  readonly stateChanges = new Subject<void>();\r\n\r\n  constructor(\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _elementRef: ElementRef<HTMLElement>,\r\n    @Optional() @Self() control: ControlContainer,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(MAT_FORM_FIELD) private _formField?: _NgxMatFormFieldPartial,\r\n  ) {\r\n    if (!_dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n\r\n    // The datepicker module can be used both with MDC and non-MDC form fields. We have\r\n    // to conditionally add the MDC input class so that the range picker looks correctly.\r\n    if (_formField?._elementRef.nativeElement.classList.contains('mat-mdc-form-field')) {\r\n      _elementRef.nativeElement.classList.add(\r\n        'mat-mdc-input-element',\r\n        'mat-mdc-form-field-input-control',\r\n        'mdc-text-field__input',\r\n      );\r\n    }\r\n\r\n    // TODO(crisbeto): remove `as any` after #18206 lands.\r\n    this.ngControl = control as any;\r\n  }\r\n\r\n  /**\r\n   * Implemented as a part of `MatFormFieldControl`.\r\n   * @docs-private\r\n   */\r\n  setDescribedByIds(ids: string[]): void {\r\n    this._ariaDescribedBy = ids.length ? ids.join(' ') : null;\r\n  }\r\n\r\n  /**\r\n   * Implemented as a part of `MatFormFieldControl`.\r\n   * @docs-private\r\n   */\r\n  onContainerClick(): void {\r\n    if (!this.focused && !this.disabled) {\r\n      if (!this._model || !this._model.selection.start) {\r\n        this._startInput.focus();\r\n      } else {\r\n        this._endInput.focus();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    if (!this._startInput) {\r\n      throw Error('mat-date-range-input must contain a matStartDate input');\r\n    }\r\n\r\n    if (!this._endInput) {\r\n      throw Error('mat-date-range-input must contain a matEndDate input');\r\n    }\r\n\r\n    if (this._model) {\r\n      this._registerModel(this._model);\r\n    }\r\n\r\n    // We don't need to unsubscribe from this, because we\r\n    // know that the input streams will be completed on destroy.\r\n    merge(this._startInput.stateChanges, this._endInput.stateChanges).subscribe(() => {\r\n      this.stateChanges.next(undefined);\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (dateInputsHaveChanged(changes, this._dateAdapter)) {\r\n      this.stateChanges.next(undefined);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._closedSubscription.unsubscribe();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  /** Gets the date at which the calendar should start. */\r\n  getStartValue(): D | null {\r\n    return this.value ? this.value.start : null;\r\n  }\r\n\r\n  /** Gets the input's theme palette. */\r\n  getThemePalette(): ThemePalette {\r\n    return this._formField ? this._formField.color : undefined;\r\n  }\r\n\r\n  /** Gets the element to which the calendar overlay should be attached. */\r\n  getConnectedOverlayOrigin(): ElementRef {\r\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n  }\r\n\r\n  /** Gets the ID of an element that should be used a description for the calendar overlay. */\r\n  getOverlayLabelId(): string | null {\r\n    return this._formField ? this._formField.getLabelId() : null;\r\n  }\r\n\r\n  /** Gets the value that is used to mirror the state input. */\r\n  _getInputMirrorValue(part: 'start' | 'end') {\r\n    const input = part === 'start' ? this._startInput : this._endInput;\r\n    return input ? input.getMirrorValue() : '';\r\n  }\r\n\r\n  /** Whether the input placeholders should be hidden. */\r\n  _shouldHidePlaceholders() {\r\n    return this._startInput ? !this._startInput.isEmpty() : false;\r\n  }\r\n\r\n  /** Handles the value in one of the child inputs changing. */\r\n  _handleChildValueChange() {\r\n    this.stateChanges.next(undefined);\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  /** Opens the date range picker associated with the input. */\r\n  _openDatepicker() {\r\n    if (this._rangePicker) {\r\n      this._rangePicker.open();\r\n    }\r\n  }\r\n\r\n  /** Whether the separate text should be hidden. */\r\n  _shouldHideSeparator() {\r\n    return (\r\n      (!this._formField ||\r\n        (this._formField.getLabelId() && !this._formField._shouldLabelFloat())) &&\r\n      this.empty\r\n    );\r\n  }\r\n\r\n  /** Gets the value for the `aria-labelledby` attribute of the inputs. */\r\n  _getAriaLabelledby() {\r\n    const formField = this._formField;\r\n    return formField && formField._hasFloatingLabel() ? formField._labelId : null;\r\n  }\r\n\r\n  _getStartDateAccessibleName(): string {\r\n    return this._startInput._getAccessibleName();\r\n  }\r\n\r\n  _getEndDateAccessibleName(): string {\r\n    return this._endInput._getAccessibleName();\r\n  }\r\n\r\n  /** Updates the focused state of the range input. */\r\n  _updateFocus(origin: FocusOrigin) {\r\n    this.focused = origin !== null;\r\n    this.stateChanges.next();\r\n  }\r\n\r\n  /** Re-runs the validators on the start/end inputs. */\r\n  private _revalidate() {\r\n    if (this._startInput) {\r\n      this._startInput._validatorOnChange();\r\n    }\r\n\r\n    if (this._endInput) {\r\n      this._endInput._validatorOnChange();\r\n    }\r\n  }\r\n\r\n  /** Registers the current date selection model with the start/end inputs. */\r\n  private _registerModel(model: NgxMatDateSelectionModel<NgxDateRange<D>>) {\r\n    if (this._startInput) {\r\n      this._startInput._registerModel(model);\r\n    }\r\n\r\n    if (this._endInput) {\r\n      this._endInput._registerModel(model);\r\n    }\r\n  }\r\n\r\n  /** Checks whether a specific range input directive is required. */\r\n  private _isTargetRequired(target: { ngControl: NgControl | null } | null): boolean | undefined {\r\n    return target?.ngControl?.control?.hasValidator(Validators.required);\r\n  }\r\n}\r\n","<div\r\n  class=\"mat-date-range-input-container\"\r\n  cdkMonitorSubtreeFocus\r\n  (cdkFocusChange)=\"_updateFocus($event)\">\r\n  <div class=\"mat-date-range-input-wrapper\">\r\n    <ng-content select=\"input[matStartDate]\"></ng-content>\r\n    <span\r\n      class=\"mat-date-range-input-mirror\"\r\n      aria-hidden=\"true\">{{_getInputMirrorValue('start')}}</span>\r\n  </div>\r\n\r\n  <span\r\n    class=\"mat-date-range-input-separator\"\r\n    [class.mat-date-range-input-separator-hidden]=\"_shouldHideSeparator()\">{{separator}}</span>\r\n\r\n  <div class=\"mat-date-range-input-wrapper mat-date-range-input-end-wrapper\">\r\n    <ng-content select=\"input[matEndDate]\"></ng-content>\r\n    <span\r\n      class=\"mat-date-range-input-mirror\"\r\n      aria-hidden=\"true\">{{_getInputMirrorValue('end')}}</span>\r\n  </div>\r\n</div>\r\n\r\n","\r\nimport {\r\n  animate,\r\n  state,\r\n  style,\r\n  transition,\r\n  trigger,\r\n  keyframes,\r\n  AnimationTriggerMetadata,\r\n} from '@angular/animations';\r\n\r\n/**\r\n * Animations used by the Material datepicker.\r\n * @docs-private\r\n */\r\nexport const ngxMatDatepickerAnimations: {\r\n  readonly transformPanel: AnimationTriggerMetadata;\r\n  readonly fadeInCalendar: AnimationTriggerMetadata;\r\n} = {\r\n  /** Transforms the height of the datepicker's calendar. */\r\n  transformPanel: trigger('transformPanel', [\r\n    transition(\r\n      'void => enter-dropdown',\r\n      animate(\r\n        '120ms cubic-bezier(0, 0, 0.2, 1)',\r\n        keyframes([\r\n          style({opacity: 0, transform: 'scale(1, 0.8)'}),\r\n          style({opacity: 1, transform: 'scale(1, 1)'}),\r\n        ]),\r\n      ),\r\n    ),\r\n    transition(\r\n      'void => enter-dialog',\r\n      animate(\r\n        '150ms cubic-bezier(0, 0, 0.2, 1)',\r\n        keyframes([\r\n          style({opacity: 0, transform: 'scale(0.7)'}),\r\n          style({transform: 'none', opacity: 1}),\r\n        ]),\r\n      ),\r\n    ),\r\n    transition('* => void', animate('100ms linear', style({opacity: 0}))),\r\n  ]),\r\n\r\n  /** Fades in the content of the calendar. */\r\n  fadeInCalendar: trigger('fadeInCalendar', [\r\n    state('void', style({opacity: 0})),\r\n    state('enter', style({opacity: 1})),\r\n\r\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\r\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\r\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')),\r\n  ]),\r\n};\r\n","export const LIMIT_TIMES = {\r\n    minHour: 0,\r\n    maxHour: 24,\r\n    minMinute: 0,\r\n    maxMinute: 60,\r\n    minSecond: 0,\r\n    maxSecond: 60,\r\n    meridian: 12\r\n}\r\n\r\nexport const MERIDIANS = {\r\n    AM: 'AM',\r\n    PM: 'PM'\r\n}\r\n\r\nexport const DEFAULT_STEP = 1;\r\nexport const NUMERIC_REGEX = /[^0-9]/g;\r\n\r\nexport const PATTERN_INPUT_HOUR = /^(2[0-3]|[0-1][0-9]|[0-9])$/;\r\nexport const PATTERN_INPUT_MINUTE = /^([0-5][0-9]|[0-9])$/;\r\nexport const PATTERN_INPUT_SECOND = /^([0-5][0-9]|[0-9])$/;\r\n\r\nexport function formatTwoDigitTimeValue(val: number) {\r\n    const txt = val.toString();\r\n    return txt.length > 1 ? txt : `0${txt}`;\r\n}\r\n\r\nexport function createMissingDateImplError(provider: string) {\r\n    return Error(\r\n        `NgxMatDatetimePicker: No provider found for ${provider}. You must import one of the following ` +\r\n        `modules at your application root: NgxMatNativeDateModule, NgxMatMomentModule, or provide a ` +\r\n        `custom implementation.`);\r\n}\r\n\r\n/** Formats a range of years. */\r\nexport function formatYearRange(start: string, end: string): string {\r\n    return `${start} \\u2013 ${end}`;\r\n}\r\n\r\n","import { ChangeDetectorRef, Component, forwardRef, Input, OnChanges, OnInit, Optional, SimpleChanges, ViewEncapsulation } from '@angular/core';\r\nimport { ControlValueAccessor, FormBuilder, FormGroup, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';\r\nimport { ThemePalette } from '@angular/material/core';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime, takeUntil } from 'rxjs/operators';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport {\r\n  createMissingDateImplError, DEFAULT_STEP, formatTwoDigitTimeValue,\r\n  LIMIT_TIMES, MERIDIANS, NUMERIC_REGEX, PATTERN_INPUT_HOUR, PATTERN_INPUT_MINUTE, PATTERN_INPUT_SECOND\r\n} from './utils/date-utils';\r\n\r\n@Component({\r\n  selector: 'ngx-mat-timepicker',\r\n  templateUrl: './timepicker.component.html',\r\n  styleUrls: ['./timepicker.component.scss'],\r\n  host: {\r\n    'class': 'ngx-mat-timepicker'\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => NgxMatTimepickerComponent),\r\n      multi: true\r\n    }\r\n  ],\r\n  exportAs: 'ngxMatTimepicker',\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class NgxMatTimepickerComponent<D> implements ControlValueAccessor, OnInit, OnChanges {\r\n\r\n  public form: FormGroup;\r\n\r\n  @Input() disabled = false;\r\n  @Input() showSpinners = true;\r\n  @Input() stepHour: number = DEFAULT_STEP;\r\n  @Input() stepMinute: number = DEFAULT_STEP;\r\n  @Input() stepSecond: number = DEFAULT_STEP;\r\n  @Input() showSeconds = false;\r\n  @Input() disableMinute = false;\r\n  @Input() enableMeridian = false;\r\n  @Input() defaultTime: number[];\r\n  @Input() color: ThemePalette = 'primary';\r\n\r\n  public meridian: string = MERIDIANS.AM;\r\n\r\n  /** Hour */\r\n  private get hour() {\r\n    let val = Number(this.form.controls['hour'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  private get minute() {\r\n    let val = Number(this.form.controls['minute'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  private get second() {\r\n    let val = Number(this.form.controls['second'].value);\r\n    return isNaN(val) ? 0 : val;\r\n  };\r\n\r\n  /** Whether or not the form is valid */\r\n  public get valid(): boolean {\r\n    return this.form.valid;\r\n  }\r\n\r\n  private _onChange: any = () => { };\r\n  private _onTouched: any = () => { };\r\n  private _disabled: boolean;\r\n  private _model: D;\r\n\r\n  private _destroyed: Subject<void> = new Subject<void>();\r\n\r\n  public pattern = PATTERN_INPUT_HOUR;\r\n\r\n  constructor(@Optional() public _dateAdapter: NgxMatDateAdapter<D>,\r\n    private cd: ChangeDetectorRef, private formBuilder: FormBuilder) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n    this.form = this.formBuilder.group(\r\n      {\r\n        hour: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_HOUR)]],\r\n        minute: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_MINUTE)]],\r\n        second: [{ value: null, disabled: this.disabled }, [Validators.required, Validators.pattern(PATTERN_INPUT_SECOND)]]\r\n      });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.form.valueChanges.pipe(takeUntil(this._destroyed), debounceTime(400)).subscribe(val => {\r\n      this._updateModel();\r\n    })\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.disabled || changes.disableMinute) {\r\n      this._setDisableStates();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyed.next();\r\n    this._destroyed.complete();\r\n  }\r\n\r\n  /**\r\n   * Writes a new value to the element.\r\n   * @param obj\r\n   */\r\n  writeValue(val: D): void {\r\n    if (val != null) {\r\n      this._model = val;\r\n      this._updateHourMinuteSecond();\r\n    }\r\n\r\n  }\r\n\r\n  /** Registers a callback function that is called when the control's value changes in the UI. */\r\n  registerOnChange(fn: (_: any) => {}): void {\r\n    this._onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called when the control receives a touch event.\r\n   */\r\n  registerOnTouched(fn: () => {}): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  /** Enables or disables the appropriate DOM element */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this._disabled = isDisabled;\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  /**\r\n   * Format input\r\n   * @param input \r\n   */\r\n  public formatInput(input: HTMLInputElement) {\r\n    input.value = input.value.replace(NUMERIC_REGEX, '');\r\n  }\r\n\r\n  /** Toggle meridian */\r\n  public toggleMeridian() {\r\n    this.meridian = (this.meridian === MERIDIANS.AM) ? MERIDIANS.PM : MERIDIANS.AM;\r\n    this.change('hour');\r\n  }\r\n\r\n  /** Change property of time */\r\n  public change(prop: string, up?: boolean) {\r\n    const next = this._getNextValueByProp(prop, up);\r\n    this.form.controls[prop].setValue(formatTwoDigitTimeValue(next), { onlySelf: false, emitEvent: false });\r\n    this._updateModel();\r\n  }\r\n\r\n  /** Update controls of form by model */\r\n  private _updateHourMinuteSecond() {\r\n    let _hour = this._dateAdapter.getHour(this._model);\r\n    const _minute = this._dateAdapter.getMinute(this._model);\r\n    const _second = this._dateAdapter.getSecond(this._model);\r\n\r\n    if (this.enableMeridian) {\r\n      if (_hour >= LIMIT_TIMES.meridian) {\r\n        _hour = _hour - LIMIT_TIMES.meridian;\r\n        this.meridian = MERIDIANS.PM;\r\n      } else {\r\n        this.meridian = MERIDIANS.AM;\r\n      }\r\n      if (_hour === 0) {\r\n        _hour = LIMIT_TIMES.meridian;\r\n      }\r\n    }\r\n\r\n    this.form.patchValue({\r\n      hour: formatTwoDigitTimeValue(_hour),\r\n      minute: formatTwoDigitTimeValue(_minute),\r\n      second: formatTwoDigitTimeValue(_second)\r\n    }, {\r\n      emitEvent: false\r\n    })\r\n\r\n  }\r\n\r\n  /** Update model */\r\n  private _updateModel() {\r\n    let _hour = this.hour;\r\n\r\n    if (this.enableMeridian) {\r\n      if (this.meridian === MERIDIANS.AM && _hour === LIMIT_TIMES.meridian) {\r\n        _hour = 0;\r\n      } else if (this.meridian === MERIDIANS.PM && _hour !== LIMIT_TIMES.meridian) {\r\n        _hour = _hour + LIMIT_TIMES.meridian;\r\n      }\r\n    }\r\n\r\n    if (this._model) {\r\n      const clonedModel = this._dateAdapter.clone(this._model);\r\n\r\n      this._dateAdapter.setHour(clonedModel, _hour);\r\n      this._dateAdapter.setMinute(clonedModel, this.minute);\r\n      this._dateAdapter.setSecond(clonedModel, this.second);\r\n      this._onChange(clonedModel);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get next value by property\r\n   * @param prop \r\n   * @param up\r\n   */\r\n  private _getNextValueByProp(prop: string, up?: boolean): number {\r\n    const keyProp = prop[0].toUpperCase() + prop.slice(1);\r\n    const min = LIMIT_TIMES[`min${keyProp}`];\r\n    let max = LIMIT_TIMES[`max${keyProp}`];\r\n\r\n    if (prop === 'hour' && this.enableMeridian) {\r\n      max = LIMIT_TIMES.meridian;\r\n    }\r\n\r\n    let next;\r\n    if (up == null) {\r\n      next = this[prop] % (max);\r\n      if (prop === 'hour' && this.enableMeridian) {\r\n        if (next === 0) next = max;\r\n      }\r\n    } else {\r\n      next = up ? this[prop] + this[`step${keyProp}`] : this[prop] - this[`step${keyProp}`];\r\n      if (prop === 'hour' && this.enableMeridian) {\r\n        next = next % (max + 1);\r\n        if (next === 0) next = up ? 1 : max;\r\n      } else {\r\n        next = next % max;\r\n      }\r\n      if (up) {\r\n        next = next > max ? (next - max + min) : next;\r\n      } else {\r\n        next = next < min ? (next - min + max) : next;\r\n      }\r\n\r\n    }\r\n\r\n    return next;\r\n  }\r\n\r\n  /**\r\n   * Set disable states\r\n   */\r\n  private _setDisableStates() {\r\n    if (this.disabled) {\r\n      this.form.disable();\r\n    }\r\n    else {\r\n      this.form.enable();\r\n      if (this.disableMinute) {\r\n        this.form.get('minute').disable();\r\n        if (this.showSeconds) {\r\n          this.form.get('second').disable();\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","<form [formGroup]=\"form\">\r\n  <table class=\"ngx-mat-timepicker-table\">\r\n    <tbody class=\"ngx-mat-timepicker-tbody\">\r\n      <tr *ngIf=\"showSpinners\">\r\n        <td>\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_less icon\" (click)=\"change('hour', true)\"\r\n            [disabled]=\"disabled\">\r\n            <mat-icon>expand_less</mat-icon>\r\n          </button>\r\n        </td>\r\n        <td></td>\r\n        <td>\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_less icon\" (click)=\"change('minute', true)\"\r\n            [disabled]=\"disabled || disableMinute\">\r\n            <mat-icon>expand_less</mat-icon>\r\n          </button> </td>\r\n        <td></td>\r\n        <td *ngIf=\"showSeconds\">\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_less icon\" (click)=\"change('second', true)\"\r\n            [disabled]=\"disabled || disableMinute\">\r\n            <mat-icon>expand_less</mat-icon>\r\n          </button>\r\n        </td>\r\n        <td *ngIf=\"enableMeridian\" class=\"ngx-mat-timepicker-spacer\"></td>\r\n        <td *ngIf=\"enableMeridian\"></td>\r\n      </tr>\r\n\r\n      <tr>\r\n        <td>\r\n          <mat-form-field appearance=\"fill\" [color]=\"color\">\r\n            <input type=\"text\" matInput (input)=\"formatInput($any($event).target)\" maxlength=\"2\" formControlName=\"hour\"\r\n              (keydown.ArrowUp)=\"change('hour', true); $event.preventDefault()\"\r\n              (keydown.ArrowDown)=\"change('hour', false); $event.preventDefault()\" (blur)=\"change('hour')\">\r\n          </mat-form-field>\r\n        </td>\r\n        <td class=\"ngx-mat-timepicker-spacer\">&#58;</td>\r\n        <td>\r\n          <mat-form-field appearance=\"fill\" [color]=\"color\">\r\n            <input type=\"text\" matInput (input)=\"formatInput($any($event).target)\" maxlength=\"2\"\r\n              formControlName=\"minute\" (keydown.ArrowUp)=\"change('minute', true); $event.preventDefault()\"\r\n              (keydown.ArrowDown)=\"change('minute', false); $event.preventDefault()\" (blur)=\"change('minute')\">\r\n          </mat-form-field>\r\n        </td>\r\n        <td *ngIf=\"showSeconds\" class=\"ngx-mat-timepicker-spacer\">&#58;</td>\r\n        <td *ngIf=\"showSeconds\">\r\n          <mat-form-field appearance=\"fill\" [color]=\"color\">\r\n            <input type=\"text\" matInput (input)=\"formatInput($any($event).target)\" maxlength=\"2\"\r\n              formControlName=\"second\" (keydown.ArrowUp)=\"change('second', true); $event.preventDefault()\"\r\n              (keydown.ArrowDown)=\"change('second', false); $event.preventDefault()\" (blur)=\"change('second')\">\r\n          </mat-form-field>\r\n        </td>\r\n\r\n        <td *ngIf=\"enableMeridian\" class=\"ngx-mat-timepicker-spacer\"></td>\r\n        <td *ngIf=\"enableMeridian\" class=\"ngx-mat-timepicker-meridian\">\r\n          <button mat-button (click)=\"toggleMeridian()\" mat-stroked-button [color]=\"color\" [disabled]=\"disabled\">\r\n            {{meridian}}\r\n          </button>\r\n        </td>\r\n      </tr>\r\n\r\n      <tr *ngIf=\"showSpinners\">\r\n        <td>\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_more icon\" (click)=\"change('hour', false)\"\r\n            [disabled]=\"disabled\">\r\n            <mat-icon>expand_more</mat-icon>\r\n          </button> </td>\r\n        <td></td>\r\n        <td>\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_more icon\" (click)=\"change('minute', false)\"\r\n            [disabled]=\"disabled || disableMinute\">\r\n            <mat-icon>expand_more</mat-icon>\r\n          </button> </td>\r\n        <td *ngIf=\"showSeconds\"></td>\r\n        <td *ngIf=\"showSeconds\">\r\n          <button type=\"button\" mat-icon-button aria-label=\"expand_more icon\" (click)=\"change('second', false)\"\r\n            [disabled]=\"disabled || disableMinute\">\r\n            <mat-icon>expand_more</mat-icon>\r\n          </button>\r\n        </td>\r\n        <td *ngIf=\"enableMeridian\" class=\"ngx-mat-timepicker-spacer\"></td>\r\n        <td *ngIf=\"enableMeridian\"></td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</form>","import { AnimationEvent } from '@angular/animations';\r\nimport { ListKeyManagerModifierKey } from '@angular/cdk/a11y';\r\nimport { Directionality } from '@angular/cdk/bidi';\r\nimport { BooleanInput, coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\r\nimport {\r\n  DOWN_ARROW,\r\n  ESCAPE,\r\n  LEFT_ARROW,\r\n  PAGE_DOWN,\r\n  PAGE_UP,\r\n  RIGHT_ARROW,\r\n  UP_ARROW,\r\n  hasModifierKey,\r\n} from '@angular/cdk/keycodes';\r\nimport {\r\n  FlexibleConnectedPositionStrategy,\r\n  Overlay,\r\n  OverlayConfig,\r\n  OverlayRef,\r\n  ScrollStrategy,\r\n} from '@angular/cdk/overlay';\r\nimport { _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\r\nimport { ComponentPortal, ComponentType, TemplatePortal } from '@angular/cdk/portal';\r\nimport { DOCUMENT } from '@angular/common';\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ComponentRef,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Inject,\r\n  InjectionToken,\r\n  Input,\r\n  NgZone,\r\n  OnChanges,\r\n  OnDestroy,\r\n  OnInit,\r\n  Optional,\r\n  Output,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n  inject,\r\n} from '@angular/core';\r\nimport { CanColor, ThemePalette, mixinColor } from '@angular/material/core';\r\nimport { Observable, Subject, Subscription, merge } from 'rxjs';\r\nimport { filter, take } from 'rxjs/operators';\r\nimport { NgxMatCalendar, NgxMatCalendarView } from './calendar';\r\nimport { NgxMatCalendarCellClassFunction, NgxMatCalendarUserEvent } from './calendar-body';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport {\r\n  NGX_MAT_DATE_RANGE_SELECTION_STRATEGY,\r\n  NgxMatDateRangeSelectionStrategy,\r\n} from './date-range-selection-strategy';\r\nimport {\r\n  NgxDateRange,\r\n  NgxExtractDateTypeFromSelection,\r\n  NgxMatDateSelectionModel,\r\n} from './date-selection-model';\r\nimport { ngxMatDatepickerAnimations } from './datepicker-animations';\r\nimport { createMissingDateImplError } from './datepicker-errors';\r\nimport { NgxDateFilterFn } from './datepicker-input-base';\r\nimport { NgxMatDatepickerIntl } from './datepicker-intl';\r\nimport { DEFAULT_STEP } from './utils/date-utils';\r\n\r\n/** Used to generate a unique ID for each datepicker instance. */\r\nlet datepickerUid = 0;\r\n\r\n/** Injection token that determines the scroll handling while the calendar is open. */\r\nexport const NGX_MAT_DATEPICKER_SCROLL_STRATEGY = new InjectionToken<() => ScrollStrategy>(\r\n  'ngx-mat-datepicker-scroll-strategy',\r\n);\r\n\r\n/** @docs-private */\r\nexport function NGX_MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\r\n  return () => overlay.scrollStrategies.reposition();\r\n}\r\n\r\n/** Possible positions for the datepicker dropdown along the X axis. */\r\nexport type NgxDatepickerDropdownPositionX = 'start' | 'end';\r\n\r\n/** Possible positions for the datepicker dropdown along the Y axis. */\r\nexport type NgxDatepickerDropdownPositionY = 'above' | 'below';\r\n\r\n/** @docs-private */\r\nexport const NGX_MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\r\n  provide: NGX_MAT_DATEPICKER_SCROLL_STRATEGY,\r\n  deps: [Overlay],\r\n  useFactory: NGX_MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\r\n};\r\n\r\n// Boilerplate for applying mixins to MatDatepickerContent.\r\n/** @docs-private */\r\nconst _NgxMatDatepickerContentBase = mixinColor(\r\n  class {\r\n    constructor(public _elementRef: ElementRef) { }\r\n  },\r\n);\r\n\r\n/**\r\n * Component used as the content for the datepicker overlay. We use this instead of using\r\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\r\n * place to put additional features of the overlay that are not part of the calendar itself in the\r\n * future. (e.g. confirmation buttons).\r\n * @docs-private\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-datepicker-content',\r\n  templateUrl: 'datepicker-content.html',\r\n  styleUrls: ['datepicker-content.scss'],\r\n  host: {\r\n    'class': 'mat-datepicker-content',\r\n    '[@transformPanel]': '_animationState',\r\n    '(@transformPanel.start)': '_handleAnimationEvent($event)',\r\n    '(@transformPanel.done)': '_handleAnimationEvent($event)',\r\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\r\n    '[class.mat-datepicker-content-touch-with-time]': '!datepicker.hideTime',\r\n  },\r\n  animations: [ngxMatDatepickerAnimations.transformPanel, ngxMatDatepickerAnimations.fadeInCalendar],\r\n  exportAs: 'ngxMatDatepickerContent',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  inputs: ['color'],\r\n})\r\nexport class NgxMatDatepickerContent<S, D = NgxExtractDateTypeFromSelection<S>>\r\n  extends _NgxMatDatepickerContentBase\r\n  implements OnInit, AfterViewInit, OnDestroy, CanColor {\r\n  private _subscriptions = new Subscription();\r\n  private _model: NgxMatDateSelectionModel<S, D>;\r\n  /** Reference to the internal calendar component. */\r\n  @ViewChild(NgxMatCalendar) _calendar: NgxMatCalendar<D>;\r\n\r\n  /** Reference to the datepicker that created the overlay. */\r\n  datepicker: NgxMatDatepickerBase<any, S, D>;\r\n\r\n  /** Start of the comparison range. */\r\n  comparisonStart: D | null;\r\n\r\n  /** End of the comparison range. */\r\n  comparisonEnd: D | null;\r\n\r\n  /** ARIA Accessible name of the `<input matStartDate/>` */\r\n  startDateAccessibleName: string | null;\r\n\r\n  /** ARIA Accessible name of the `<input matEndDate/>` */\r\n  endDateAccessibleName: string | null;\r\n\r\n  /** Whether the datepicker is above or below the input. */\r\n  _isAbove: boolean;\r\n\r\n  /** Current state of the animation. */\r\n  _animationState: 'enter-dropdown' | 'enter-dialog' | 'void';\r\n\r\n  /** Emits when an animation has finished. */\r\n  readonly _animationDone = new Subject<void>();\r\n\r\n  /** Whether there is an in-progress animation. */\r\n  _isAnimating = false;\r\n\r\n  /** Text for the close button. */\r\n  _closeButtonText: string;\r\n\r\n  /** Whether the close button currently has focus. */\r\n  _closeButtonFocused: boolean;\r\n\r\n  /** Portal with projected action buttons. */\r\n  _actionsPortal: TemplatePortal | null = null;\r\n\r\n  /** Id of the label for the `role=\"dialog\"` element. */\r\n  _dialogLabelId: string | null;\r\n\r\n  get isViewMonth(): boolean {\r\n    if (!this._calendar || this._calendar.currentView == null) return true;\r\n    return this._calendar.currentView == 'month';\r\n  }\r\n\r\n  _modelTime: D | null;\r\n\r\n  constructor(\r\n    elementRef: ElementRef,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    private _globalModel: NgxMatDateSelectionModel<S, D>,\r\n    private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional()\r\n    @Inject(NGX_MAT_DATE_RANGE_SELECTION_STRATEGY)\r\n    private _rangeSelectionStrategy: NgxMatDateRangeSelectionStrategy<D>,\r\n    intl: NgxMatDatepickerIntl,\r\n  ) {\r\n    super(elementRef);\r\n    this._closeButtonText = intl.closeCalendarLabel;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this._animationState = this.datepicker.touchUi ? 'enter-dialog' : 'enter-dropdown';\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this._subscriptions.add(\r\n      this.datepicker.stateChanges.subscribe(() => {\r\n        this._changeDetectorRef.markForCheck();\r\n      }),\r\n    );\r\n    this._calendar.focusActiveCell();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._subscriptions.unsubscribe();\r\n    this._animationDone.complete();\r\n  }\r\n\r\n  onTimeChanged(selectedDateWithTime: D | null) {\r\n    const userEvent: NgxMatCalendarUserEvent<D | null> = {\r\n      value: selectedDateWithTime,\r\n      event: null\r\n    };\r\n\r\n    this._updateUserSelectionWithCalendarUserEvent(userEvent);\r\n  }\r\n\r\n  _handleUserSelection(event: NgxMatCalendarUserEvent<D | null>) {\r\n    this._updateUserSelectionWithCalendarUserEvent(event);\r\n\r\n    // Delegate closing the overlay to the actions.\r\n    if (this.datepicker.hideTime) {\r\n      if ((!this._model || this._model.isComplete()) && !this._actionsPortal) {\r\n        this.datepicker.close();\r\n      }\r\n    }\r\n  }\r\n\r\n  private _updateUserSelectionWithCalendarUserEvent(event: NgxMatCalendarUserEvent<D | null>) {\r\n    const selection = this._model.selection;\r\n    const value = event.value;\r\n    const isRange = selection instanceof NgxDateRange;\r\n\r\n    // If we're selecting a range and we have a selection strategy, always pass the value through\r\n    // there. Otherwise don't assign null values to the model, unless we're selecting a range.\r\n    // A null value when picking a range means that the user cancelled the selection (e.g. by\r\n    // pressing escape), whereas when selecting a single value it means that the value didn't\r\n    // change. This isn't very intuitive, but it's here for backwards-compatibility.\r\n    if (isRange && this._rangeSelectionStrategy) {\r\n      const newSelection = this._rangeSelectionStrategy.selectionFinished(\r\n        value,\r\n        selection as unknown as NgxDateRange<D>,\r\n        event.event,\r\n      );\r\n      this._model.updateSelection(newSelection as unknown as S, this);\r\n    } else {\r\n      const isSameTime = this._dateAdapter.isSameTime(selection as unknown as D, value);\r\n      const isSameDate = this._dateAdapter.sameDate(value, selection as unknown as D);\r\n      const isSame = isSameDate && isSameTime;\r\n\r\n      if (value &&\r\n        (isRange || !isSame)\r\n      ) {\r\n        this._model.add(value);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  _handleUserDragDrop(event: NgxMatCalendarUserEvent<NgxDateRange<D>>) {\r\n    this._model.updateSelection(event.value as unknown as S, this);\r\n  }\r\n\r\n  _startExitAnimation() {\r\n    this._animationState = 'void';\r\n    this._changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  _handleAnimationEvent(event: AnimationEvent) {\r\n    this._isAnimating = event.phaseName === 'start';\r\n\r\n    if (!this._isAnimating) {\r\n      this._animationDone.next();\r\n    }\r\n  }\r\n\r\n  _getSelected() {\r\n    this._modelTime = this._model.selection as unknown as D;\r\n    return this._model.selection as unknown as D | NgxDateRange<D> | null;\r\n  }\r\n\r\n  /** Applies the current pending selection to the global model. */\r\n  _applyPendingSelection() {\r\n    if (this._model !== this._globalModel) {\r\n      this._globalModel.updateSelection(this._model.selection, this);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assigns a new portal containing the datepicker actions.\r\n   * @param portal Portal with the actions to be assigned.\r\n   * @param forceRerender Whether a re-render of the portal should be triggered. This isn't\r\n   * necessary if the portal is assigned during initialization, but it may be required if it's\r\n   * added at a later point.\r\n   */\r\n  _assignActions(portal: TemplatePortal<any> | null, forceRerender: boolean) {\r\n    // If we have actions, clone the model so that we have the ability to cancel the selection,\r\n    // otherwise update the global model directly. Note that we want to assign this as soon as\r\n    // possible, but `_actionsPortal` isn't available in the constructor so we do it in `ngOnInit`.\r\n    this._model = portal ? this._globalModel.clone() : this._globalModel;\r\n    this._actionsPortal = portal;\r\n\r\n    if (forceRerender) {\r\n      this._changeDetectorRef.detectChanges();\r\n    }\r\n  }\r\n}\r\n\r\n/** Form control that can be associated with a datepicker. */\r\nexport interface NgxMatDatepickerControl<D> {\r\n  getStartValue(): D | null;\r\n  getThemePalette(): ThemePalette;\r\n  min: D | null;\r\n  max: D | null;\r\n  disabled: boolean;\r\n  dateFilter: NgxDateFilterFn<D>;\r\n  getConnectedOverlayOrigin(): ElementRef;\r\n  getOverlayLabelId(): string | null;\r\n  stateChanges: Observable<void>;\r\n}\r\n\r\n/** A datepicker that can be attached to a {@link NgxMatDatepickerControl}. */\r\nexport interface NgxMatDatepickerPanel<\r\n  C extends NgxMatDatepickerControl<D>,\r\n  S,\r\n  D = NgxExtractDateTypeFromSelection<S>,\r\n> {\r\n  /** Stream that emits whenever the date picker is closed. */\r\n  closedStream: EventEmitter<void>;\r\n  /** Color palette to use on the datepicker's calendar. */\r\n  color: ThemePalette;\r\n  /** The input element the datepicker is associated with. */\r\n  datepickerInput: C;\r\n  /** Whether the datepicker pop-up should be disabled. */\r\n  disabled: boolean;\r\n  /** The id for the datepicker's calendar. */\r\n  id: string;\r\n  /** Whether the datepicker is open. */\r\n  opened: boolean;\r\n  /** Stream that emits whenever the date picker is opened. */\r\n  openedStream: EventEmitter<void>;\r\n  /** Emits when the datepicker's state changes. */\r\n  stateChanges: Subject<void>;\r\n  /** Opens the datepicker. */\r\n  open(): void;\r\n  /** Register an input with the datepicker. */\r\n  registerInput(input: C): NgxMatDateSelectionModel<S, D>;\r\n}\r\n\r\n/** Base class for a datepicker. */\r\n@Directive()\r\nexport abstract class NgxMatDatepickerBase<\r\n  C extends NgxMatDatepickerControl<D>,\r\n  S,\r\n  D = NgxExtractDateTypeFromSelection<S>,\r\n> implements NgxMatDatepickerPanel<C, S, D>, OnDestroy, OnChanges {\r\n  private _scrollStrategy: () => ScrollStrategy;\r\n  private _inputStateChanges = Subscription.EMPTY;\r\n  private _document = inject(DOCUMENT);\r\n\r\n  /** An input indicating the type of the custom header component for the calendar, if set. */\r\n  @Input() calendarHeaderComponent: ComponentType<any>;\r\n\r\n  /** The date to open the calendar to initially. */\r\n  @Input()\r\n  get startAt(): D | null {\r\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\r\n    // selected value is.\r\n    return this._startAt || (this.datepickerInput ? this.datepickerInput.getStartValue() : null);\r\n  }\r\n  set startAt(value: D | null) {\r\n    this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n  }\r\n  private _startAt: D | null;\r\n\r\n  /** The view that the calendar should start in. */\r\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\r\n\r\n  /** Color palette to use on the datepicker's calendar. */\r\n  @Input()\r\n  get color(): ThemePalette {\r\n    return (\r\n      this._color || (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined)\r\n    );\r\n  }\r\n  set color(value: ThemePalette) {\r\n    this._color = value;\r\n  }\r\n  _color: ThemePalette;\r\n\r\n  /**\r\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\r\n   * than a dropdown and elements have more padding to allow for bigger touch targets.\r\n   */\r\n  @Input()\r\n  get touchUi(): boolean {\r\n    return this._touchUi;\r\n  }\r\n  set touchUi(value: BooleanInput) {\r\n    this._touchUi = coerceBooleanProperty(value);\r\n  }\r\n  private _touchUi = false;\r\n\r\n  @Input()\r\n  get hideTime(): boolean { return this._hideTime; }\r\n  set hideTime(value: boolean) {\r\n    this._hideTime = coerceBooleanProperty(value);\r\n  }\r\n  public _hideTime = false;\r\n\r\n  /** Whether the datepicker pop-up should be disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    return this._disabled === undefined && this.datepickerInput\r\n      ? this.datepickerInput.disabled\r\n      : !!this._disabled;\r\n  }\r\n  set disabled(value: BooleanInput) {\r\n    const newValue = coerceBooleanProperty(value);\r\n\r\n    if (newValue !== this._disabled) {\r\n      this._disabled = newValue;\r\n      this.stateChanges.next(undefined);\r\n    }\r\n  }\r\n  public _disabled: boolean;\r\n\r\n  /** Preferred position of the datepicker in the X axis. */\r\n  @Input()\r\n  xPosition: NgxDatepickerDropdownPositionX = 'start';\r\n\r\n  /** Preferred position of the datepicker in the Y axis. */\r\n  @Input()\r\n  yPosition: NgxDatepickerDropdownPositionY = 'below';\r\n\r\n  /**\r\n   * Whether to restore focus to the previously-focused element when the calendar is closed.\r\n   * Note that automatic focus restoration is an accessibility feature and it is recommended that\r\n   * you provide your own equivalent, if you decide to turn it off.\r\n   */\r\n  @Input()\r\n  get restoreFocus(): boolean {\r\n    return this._restoreFocus;\r\n  }\r\n  set restoreFocus(value: BooleanInput) {\r\n    this._restoreFocus = coerceBooleanProperty(value);\r\n  }\r\n  private _restoreFocus = true;\r\n\r\n  /**\r\n   * Emits selected year in multiyear view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits selected month in year view.\r\n   * This doesn't imply a change on the selected date.\r\n   */\r\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\r\n\r\n  /**\r\n   * Emits when the current view changes.\r\n   */\r\n  @Output() readonly viewChanged: EventEmitter<NgxMatCalendarView> = new EventEmitter<NgxMatCalendarView>(\r\n    true,\r\n  );\r\n\r\n  /** Function that can be used to add custom CSS classes to dates. */\r\n  @Input() dateClass: NgxMatCalendarCellClassFunction<D>;\r\n\r\n  /** Emits when the datepicker has been opened. */\r\n  @Output('opened') readonly openedStream = new EventEmitter<void>();\r\n\r\n  /** Emits when the datepicker has been closed. */\r\n  @Output('closed') readonly closedStream = new EventEmitter<void>();\r\n\r\n  /**\r\n   * Classes to be passed to the date picker panel.\r\n   * Supports string and string array values, similar to `ngClass`.\r\n   */\r\n  @Input()\r\n  get panelClass(): string | string[] {\r\n    return this._panelClass;\r\n  }\r\n  set panelClass(value: string | string[]) {\r\n    this._panelClass = coerceStringArray(value);\r\n  }\r\n  private _panelClass: string[];\r\n\r\n  /** Whether the calendar is open. */\r\n  @Input()\r\n  get opened(): boolean {\r\n    return this._opened;\r\n  }\r\n  set opened(value: BooleanInput) {\r\n    coerceBooleanProperty(value) ? this.open() : this.close();\r\n  }\r\n  private _opened = false;\r\n\r\n  /** Whether the timepicker'spinners is shown. */\r\n  @Input()\r\n  get showSpinners(): boolean { return this._showSpinners; }\r\n  set showSpinners(value: boolean) { this._showSpinners = value; }\r\n  public _showSpinners = true;\r\n\r\n  /** Whether the second part is disabled. */\r\n  @Input()\r\n  get showSeconds(): boolean { return this._showSeconds; }\r\n  set showSeconds(value: boolean) { this._showSeconds = value; }\r\n  public _showSeconds = false;\r\n\r\n  /** Step hour */\r\n  @Input()\r\n  get stepHour(): number { return this._stepHour; }\r\n  set stepHour(value: number) { this._stepHour = value; }\r\n  public _stepHour: number = DEFAULT_STEP;\r\n\r\n  /** Step minute */\r\n  @Input()\r\n  get stepMinute(): number { return this._stepMinute; }\r\n  set stepMinute(value: number) { this._stepMinute = value; }\r\n  public _stepMinute: number = DEFAULT_STEP;\r\n\r\n  /** Step second */\r\n  @Input()\r\n  get stepSecond(): number { return this._stepSecond; }\r\n  set stepSecond(value: number) { this._stepSecond = value; }\r\n  public _stepSecond: number = DEFAULT_STEP;\r\n\r\n  /** Enable meridian */\r\n  @Input()\r\n  get enableMeridian(): boolean { return this._enableMeridian; }\r\n  set enableMeridian(value: boolean) { this._enableMeridian = value; }\r\n  public _enableMeridian: boolean = false;\r\n\r\n  /** disable minute */\r\n  @Input()\r\n  get disableMinute(): boolean { return this._disableMinute; }\r\n  set disableMinute(value: boolean) { this._disableMinute = value; }\r\n  public _disableMinute: boolean;\r\n\r\n  /** Step second */\r\n  @Input()\r\n  get defaultTime(): number[] { return this._defaultTime; }\r\n  set defaultTime(value: number[]) { this._defaultTime = value; }\r\n  public _defaultTime: number[];\r\n\r\n  /** The id for the datepicker calendar. */\r\n  id: string = `mat-datepicker-${datepickerUid++}`;\r\n\r\n  /** The minimum selectable date. */\r\n  _getMinDate(): D | null {\r\n    return this.datepickerInput && this.datepickerInput.min;\r\n  }\r\n\r\n  /** The maximum selectable date. */\r\n  _getMaxDate(): D | null {\r\n    return this.datepickerInput && this.datepickerInput.max;\r\n  }\r\n\r\n  _getDateFilter(): NgxDateFilterFn<D> {\r\n    return this.datepickerInput && this.datepickerInput.dateFilter;\r\n  }\r\n\r\n  /** A reference to the overlay into which we've rendered the calendar. */\r\n  private _overlayRef: OverlayRef | null;\r\n\r\n  /** Reference to the component instance rendered in the overlay. */\r\n  private _componentRef: ComponentRef<NgxMatDatepickerContent<S, D>> | null;\r\n\r\n  /** The element that was focused before the datepicker was opened. */\r\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\r\n\r\n  /** Unique class that will be added to the backdrop so that the test harnesses can look it up. */\r\n  private _backdropHarnessClass = `${this.id}-backdrop`;\r\n\r\n  /** Currently-registered actions portal. */\r\n  private _actionsPortal: TemplatePortal | null;\r\n\r\n  /** The input element this datepicker is associated with. */\r\n  datepickerInput: C;\r\n\r\n  /** Emits when the datepicker's state changes. */\r\n  readonly stateChanges = new Subject<void>();\r\n\r\n  constructor(\r\n    private _overlay: Overlay,\r\n    private _ngZone: NgZone,\r\n    private _viewContainerRef: ViewContainerRef,\r\n    @Inject(NGX_MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\r\n    @Optional() private _dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() private _dir: Directionality,\r\n    private _model: NgxMatDateSelectionModel<S, D>,\r\n  ) {\r\n    if (!this._dateAdapter) {\r\n      throw createMissingDateImplError('NgxMatDateAdapter');\r\n    }\r\n\r\n    this._scrollStrategy = scrollStrategy;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const positionChange = changes['xPosition'] || changes['yPosition'];\r\n\r\n    if (positionChange && !positionChange.firstChange && this._overlayRef) {\r\n      const positionStrategy = this._overlayRef.getConfig().positionStrategy;\r\n\r\n      if (positionStrategy instanceof FlexibleConnectedPositionStrategy) {\r\n        this._setConnectedPositions(positionStrategy);\r\n\r\n        if (this.opened) {\r\n          this._overlayRef.updatePosition();\r\n        }\r\n      }\r\n    }\r\n\r\n    this.stateChanges.next(undefined);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._destroyOverlay();\r\n    this.close();\r\n    this._inputStateChanges.unsubscribe();\r\n    this.stateChanges.complete();\r\n  }\r\n\r\n  /** Selects the given date */\r\n  select(date: D): void {\r\n    this._model.add(date);\r\n  }\r\n\r\n  /** Emits the selected year in multiyear view */\r\n  _selectYear(normalizedYear: D): void {\r\n    this.yearSelected.emit(normalizedYear);\r\n  }\r\n\r\n  /** Emits selected month in year view */\r\n  _selectMonth(normalizedMonth: D): void {\r\n    this.monthSelected.emit(normalizedMonth);\r\n  }\r\n\r\n  /** Emits changed view */\r\n  _viewChanged(view: NgxMatCalendarView): void {\r\n    this.viewChanged.emit(view);\r\n  }\r\n\r\n  /**\r\n   * Register an input with this datepicker.\r\n   * @param input The datepicker input to register with this datepicker.\r\n   * @returns Selection model that the input should hook itself up to.\r\n   */\r\n  registerInput(input: C): NgxMatDateSelectionModel<S, D> {\r\n    if (this.datepickerInput) {\r\n      throw Error('A MatDatepicker can only be associated with a single input.');\r\n    }\r\n    this._inputStateChanges.unsubscribe();\r\n    this.datepickerInput = input;\r\n    this._inputStateChanges = input.stateChanges.subscribe(() => this.stateChanges.next(undefined));\r\n    return this._model;\r\n  }\r\n\r\n  /**\r\n   * Registers a portal containing action buttons with the datepicker.\r\n   * @param portal Portal to be registered.\r\n   */\r\n  registerActions(portal: TemplatePortal): void {\r\n    if (this._actionsPortal) {\r\n      throw Error('A MatDatepicker can only be associated with a single actions row.');\r\n    }\r\n    this._actionsPortal = portal;\r\n    this._componentRef?.instance._assignActions(portal, true);\r\n  }\r\n\r\n  /**\r\n   * Removes a portal containing action buttons from the datepicker.\r\n   * @param portal Portal to be removed.\r\n   */\r\n  removeActions(portal: TemplatePortal): void {\r\n    if (portal === this._actionsPortal) {\r\n      this._actionsPortal = null;\r\n      this._componentRef?.instance._assignActions(null, true);\r\n    }\r\n  }\r\n\r\n  /** Open the calendar. */\r\n  open(): void {\r\n    // Skip reopening if there's an in-progress animation to avoid overlapping\r\n    // sequences which can cause \"changed after checked\" errors. See #25837.\r\n    if (this._opened || this.disabled || this._componentRef?.instance._isAnimating) {\r\n      return;\r\n    }\r\n\r\n    if (!this.datepickerInput) {\r\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\r\n    }\r\n\r\n    this._focusedElementBeforeOpen = _getFocusedElementPierceShadowDom();\r\n    this._openOverlay();\r\n    this._opened = true;\r\n    this.openedStream.emit();\r\n  }\r\n\r\n  /** Close the calendar. */\r\n  close(): void {\r\n    // Skip reopening if there's an in-progress animation to avoid overlapping\r\n    // sequences which can cause \"changed after checked\" errors. See #25837.\r\n    if (!this._opened || this._componentRef?.instance._isAnimating) {\r\n      return;\r\n    }\r\n\r\n    const canRestoreFocus =\r\n      this._restoreFocus &&\r\n      this._focusedElementBeforeOpen &&\r\n      typeof this._focusedElementBeforeOpen.focus === 'function';\r\n\r\n    const completeClose = () => {\r\n      // The `_opened` could've been reset already if\r\n      // we got two events in quick succession.\r\n      if (this._opened) {\r\n        this._opened = false;\r\n        this.closedStream.emit();\r\n      }\r\n    };\r\n\r\n    if (this._componentRef) {\r\n      const { instance, location } = this._componentRef;\r\n      instance._startExitAnimation();\r\n      instance._animationDone.pipe(take(1)).subscribe(() => {\r\n        const activeElement = this._document.activeElement;\r\n\r\n        // Since we restore focus after the exit animation, we have to check that\r\n        // the user didn't move focus themselves inside the `close` handler.\r\n        if (\r\n          canRestoreFocus &&\r\n          (!activeElement ||\r\n            activeElement === this._document.activeElement ||\r\n            location.nativeElement.contains(activeElement))\r\n        ) {\r\n          this._focusedElementBeforeOpen!.focus();\r\n        }\r\n\r\n        this._focusedElementBeforeOpen = null;\r\n        this._destroyOverlay();\r\n      });\r\n    }\r\n\r\n    if (canRestoreFocus) {\r\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\r\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\r\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\r\n      // able to close the calendar at all. We work around it by making the logic, that marks\r\n      // the datepicker as closed, async as well.\r\n      setTimeout(completeClose);\r\n    } else {\r\n      completeClose();\r\n    }\r\n  }\r\n\r\n  /** Applies the current pending selection on the overlay to the model. */\r\n  _applyPendingSelection() {\r\n    this._componentRef?.instance?._applyPendingSelection();\r\n  }\r\n\r\n  /** Forwards relevant values from the datepicker to the datepicker content inside the overlay. */\r\n  protected _forwardContentValues(instance: NgxMatDatepickerContent<S, D>) {\r\n    instance.datepicker = this;\r\n    instance.color = this.color;\r\n    instance._dialogLabelId = this.datepickerInput.getOverlayLabelId();\r\n    instance._assignActions(this._actionsPortal, false);\r\n  }\r\n\r\n  /** Opens the overlay with the calendar. */\r\n  private _openOverlay(): void {\r\n    this._destroyOverlay();\r\n\r\n    const isDialog = this.touchUi;\r\n    const portal = new ComponentPortal<NgxMatDatepickerContent<S, D>>(\r\n      NgxMatDatepickerContent,\r\n      this._viewContainerRef,\r\n    );\r\n    const overlayRef = (this._overlayRef = this._overlay.create(\r\n      new OverlayConfig({\r\n        positionStrategy: isDialog ? this._getDialogStrategy() : this._getDropdownStrategy(),\r\n        hasBackdrop: true,\r\n        backdropClass: [\r\n          isDialog ? 'cdk-overlay-dark-backdrop' : 'mat-overlay-transparent-backdrop',\r\n          this._backdropHarnessClass,\r\n        ],\r\n        direction: this._dir,\r\n        scrollStrategy: isDialog ? this._overlay.scrollStrategies.block() : this._scrollStrategy(),\r\n        panelClass: `mat-datepicker-${isDialog ? 'dialog' : 'popup'}`,\r\n      }),\r\n    ));\r\n\r\n    this._getCloseStream(overlayRef).subscribe(event => {\r\n      if (event) {\r\n        event.preventDefault();\r\n      }\r\n      this.close();\r\n    });\r\n\r\n    // The `preventDefault` call happens inside the calendar as well, however focus moves into\r\n    // it inside a timeout which can give browsers a chance to fire off a keyboard event in-between\r\n    // that can scroll the page (see #24969). Always block default actions of arrow keys for the\r\n    // entire overlay so the page doesn't get scrolled by accident.\r\n    overlayRef.keydownEvents().subscribe(event => {\r\n      const keyCode = event.keyCode;\r\n\r\n      if (\r\n        keyCode === UP_ARROW ||\r\n        keyCode === DOWN_ARROW ||\r\n        keyCode === LEFT_ARROW ||\r\n        keyCode === RIGHT_ARROW ||\r\n        keyCode === PAGE_UP ||\r\n        keyCode === PAGE_DOWN\r\n      ) {\r\n        event.preventDefault();\r\n      }\r\n    });\r\n\r\n    this._componentRef = overlayRef.attach(portal);\r\n    this._forwardContentValues(this._componentRef.instance);\r\n\r\n    // Update the position once the calendar has rendered. Only relevant in dropdown mode.\r\n    if (!isDialog) {\r\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => overlayRef.updatePosition());\r\n    }\r\n  }\r\n\r\n  /** Destroys the current overlay. */\r\n  private _destroyOverlay() {\r\n    if (this._overlayRef) {\r\n      this._overlayRef.dispose();\r\n      this._overlayRef = this._componentRef = null;\r\n    }\r\n  }\r\n\r\n  /** Gets a position strategy that will open the calendar as a dropdown. */\r\n  private _getDialogStrategy() {\r\n    return this._overlay.position().global().centerHorizontally().centerVertically();\r\n  }\r\n\r\n  /** Gets a position strategy that will open the calendar as a dropdown. */\r\n  private _getDropdownStrategy() {\r\n    const strategy = this._overlay\r\n      .position()\r\n      .flexibleConnectedTo(this.datepickerInput.getConnectedOverlayOrigin())\r\n      .withTransformOriginOn('.mat-datepicker-content')\r\n      .withFlexibleDimensions(false)\r\n      .withViewportMargin(8)\r\n      .withLockedPosition();\r\n\r\n    return this._setConnectedPositions(strategy);\r\n  }\r\n\r\n  /** Sets the positions of the datepicker in dropdown mode based on the current configuration. */\r\n  private _setConnectedPositions(strategy: FlexibleConnectedPositionStrategy) {\r\n    const primaryX = this.xPosition === 'end' ? 'end' : 'start';\r\n    const secondaryX = primaryX === 'start' ? 'end' : 'start';\r\n    const primaryY = this.yPosition === 'above' ? 'bottom' : 'top';\r\n    const secondaryY = primaryY === 'top' ? 'bottom' : 'top';\r\n\r\n    return strategy.withPositions([\r\n      {\r\n        originX: primaryX,\r\n        originY: secondaryY,\r\n        overlayX: primaryX,\r\n        overlayY: primaryY,\r\n      },\r\n      {\r\n        originX: primaryX,\r\n        originY: primaryY,\r\n        overlayX: primaryX,\r\n        overlayY: secondaryY,\r\n      },\r\n      {\r\n        originX: secondaryX,\r\n        originY: secondaryY,\r\n        overlayX: secondaryX,\r\n        overlayY: primaryY,\r\n      },\r\n      {\r\n        originX: secondaryX,\r\n        originY: primaryY,\r\n        overlayX: secondaryX,\r\n        overlayY: secondaryY,\r\n      },\r\n    ]);\r\n  }\r\n\r\n  /** Gets an observable that will emit when the overlay is supposed to be closed. */\r\n  private _getCloseStream(overlayRef: OverlayRef) {\r\n    const ctrlShiftMetaModifiers: ListKeyManagerModifierKey[] = ['ctrlKey', 'shiftKey', 'metaKey'];\r\n    return merge(\r\n      overlayRef.backdropClick(),\r\n      overlayRef.detachments(),\r\n      overlayRef.keydownEvents().pipe(\r\n        filter(event => {\r\n          // Closing on alt + up is only valid when there's an input associated with the datepicker.\r\n          return (\r\n            (event.keyCode === ESCAPE && !hasModifierKey(event)) ||\r\n            (this.datepickerInput &&\r\n              hasModifierKey(event, 'altKey') &&\r\n              event.keyCode === UP_ARROW &&\r\n              ctrlShiftMetaModifiers.every(\r\n                (modifier: ListKeyManagerModifierKey) => !hasModifierKey(event, modifier),\r\n              ))\r\n          );\r\n        }),\r\n      ),\r\n    );\r\n  }\r\n}\r\n","<div cdkTrapFocus role=\"dialog\" [attr.aria-modal]=\"true\" [attr.aria-labelledby]=\"_dialogLabelId ?? undefined\"\r\n  class=\"mat-datepicker-content-container\"\r\n  [class.mat-datepicker-content-container-with-custom-header]=\"datepicker.calendarHeaderComponent\"\r\n  [class.mat-datepicker-content-container-with-actions]=\"_actionsPortal\"\r\n  [class.mat-datepicker-content-container-with-time]=\"!datepicker._hideTime\"\r\n  >\r\n  <ngx-mat-calendar [id]=\"datepicker.id\" [ngClass]=\"datepicker.panelClass\" [startAt]=\"datepicker.startAt\"\r\n    [startView]=\"datepicker.startView\" [minDate]=\"datepicker._getMinDate()\" [maxDate]=\"datepicker._getMaxDate()\"\r\n    [dateFilter]=\"datepicker._getDateFilter()\" [headerComponent]=\"datepicker.calendarHeaderComponent\"\r\n    [selected]=\"_getSelected()\" [dateClass]=\"datepicker.dateClass\" [comparisonStart]=\"comparisonStart\"\r\n    [comparisonEnd]=\"comparisonEnd\" [@fadeInCalendar]=\"'enter'\" [startDateAccessibleName]=\"startDateAccessibleName\"\r\n    [endDateAccessibleName]=\"endDateAccessibleName\" (yearSelected)=\"datepicker._selectYear($event)\"\r\n    (monthSelected)=\"datepicker._selectMonth($event)\" (viewChanged)=\"datepicker._viewChanged($event)\"\r\n    (_userSelection)=\"_handleUserSelection($event)\" (_userDragDrop)=\"_handleUserDragDrop($event)\"></ngx-mat-calendar>\r\n\r\n  <ng-container *ngIf=\"isViewMonth\">\r\n    <div *ngIf=\"!datepicker._hideTime\" class=\"time-container\" [class.disable-seconds]=\"!datepicker._showSeconds\">\r\n      <ngx-mat-timepicker [showSpinners]=\"datepicker._showSpinners\" [showSeconds]=\"datepicker._showSeconds\"\r\n        [disabled]=\"datepicker._disabled || !_modelTime\" [stepHour]=\"datepicker._stepHour\"\r\n        [stepMinute]=\"datepicker._stepMinute\" [stepSecond]=\"datepicker._stepSecond\" [(ngModel)]=\"_modelTime\"\r\n        [color]=\"datepicker._color\" [enableMeridian]=\"datepicker._enableMeridian\"\r\n        [disableMinute]=\"datepicker._disableMinute\" (ngModelChange)=\"onTimeChanged($event)\">\r\n      </ngx-mat-timepicker>\r\n    </div>\r\n  </ng-container>\r\n\r\n  <ng-template [cdkPortalOutlet]=\"_actionsPortal\"></ng-template>\r\n\r\n  <!-- Invisible close button for screen reader users. -->\r\n  <button type=\"button\" mat-raised-button [color]=\"color || 'primary'\" class=\"mat-datepicker-close-button\"\r\n    [class.cdk-visually-hidden]=\"!_closeButtonFocused\" (focus)=\"_closeButtonFocused = true\"\r\n    (blur)=\"_closeButtonFocused = false\" (click)=\"datepicker.close()\">{{ _closeButtonText }}\r\n  </button>\r\n</div>","import {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\r\nimport {NgxMatDatepickerBase, NgxMatDatepickerContent, NgxMatDatepickerControl} from './datepicker-base';\r\nimport {NGX_MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, NgxDateRange} from './date-selection-model';\r\nimport {NGX_MAT_CALENDAR_RANGE_STRATEGY_PROVIDER} from './date-range-selection-strategy';\r\n\r\n/**\r\n * Input that can be associated with a date range picker.\r\n * @docs-private\r\n */\r\nexport interface NgxMatDateRangePickerInput<D> extends NgxMatDatepickerControl<D> {\r\n  _getEndDateAccessibleName(): string | null;\r\n  _getStartDateAccessibleName(): string | null;\r\n  comparisonStart: D | null;\r\n  comparisonEnd: D | null;\r\n}\r\n\r\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\r\n// template reference variables (e.g. #d vs #d=\"matDateRangePicker\"). We can change this to a\r\n// directive if angular adds support for `exportAs: '$implicit'` on directives.\r\n/** Component responsible for managing the date range picker popup/dialog. */\r\n@Component({\r\n  selector: 'ngx-mat-date-range-picker',\r\n  template: '',\r\n  exportAs: 'ngxMatDateRangePicker',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    NGX_MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER,\r\n    NGX_MAT_CALENDAR_RANGE_STRATEGY_PROVIDER,\r\n    {provide: NgxMatDatepickerBase, useExisting: NgxMatDateRangePicker},\r\n  ],\r\n})\r\nexport class NgxMatDateRangePicker<D> extends NgxMatDatepickerBase<\r\n  NgxMatDateRangePickerInput<D>,\r\n  NgxDateRange<D>,\r\n  D\r\n> {\r\n  protected override _forwardContentValues(instance: NgxMatDatepickerContent<NgxDateRange<D>, D>) {\r\n    super._forwardContentValues(instance);\r\n\r\n    const input = this.datepickerInput;\r\n\r\n    if (input) {\r\n      instance.comparisonStart = input.comparisonStart;\r\n      instance.comparisonEnd = input.comparisonEnd;\r\n      instance.startDateAccessibleName = input._getStartDateAccessibleName();\r\n      instance.endDateAccessibleName = input._getEndDateAccessibleName();\r\n    }\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, ViewEncapsulation } from '@angular/core';\r\nimport { NGX_MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER } from './date-selection-model';\r\nimport { NgxMatDatepickerBase, NgxMatDatepickerControl } from './datepicker-base';\r\n\r\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\r\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\r\n// if angular adds support for `exportAs: '$implicit'` on directives.\r\n/** Component responsible for managing the datepicker popup/dialog. */\r\n@Component({\r\n  selector: 'ngx-mat-datetime-picker',\r\n  template: '',\r\n  exportAs: 'ngxMatDatetimePicker',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    NGX_MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER,\r\n    { provide: NgxMatDatepickerBase, useExisting: NgxMatDatetimepicker },\r\n  ],\r\n})\r\nexport class NgxMatDatetimepicker<D> extends NgxMatDatepickerBase<NgxMatDatepickerControl<D>, D | null, D> { }\r\n","\r\n\r\nimport {\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Directive,\r\n  OnDestroy,\r\n  TemplateRef,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport {TemplatePortal} from '@angular/cdk/portal';\r\nimport {NgxMatDatepickerBase, NgxMatDatepickerControl} from './datepicker-base';\r\n\r\n/** Button that will close the datepicker and assign the current selection to the data model. */\r\n@Directive({\r\n  selector: '[ngxMatDatepickerApply], [ngxMatDateRangePickerApply]',\r\n  host: {'(click)': '_applySelection()'},\r\n})\r\nexport class NgxMatDatepickerApply {\r\n  constructor(private _datepicker: NgxMatDatepickerBase<NgxMatDatepickerControl<any>, unknown>) {}\r\n\r\n  _applySelection() {\r\n    this._datepicker._applyPendingSelection();\r\n    this._datepicker.close();\r\n  }\r\n}\r\n\r\n/** Button that will close the datepicker and discard the current selection. */\r\n@Directive({\r\n  selector: '[ngxMatDatepickerCancel], [ngxMatDateRangePickerCancel]',\r\n  host: {'(click)': '_datepicker.close()'},\r\n})\r\nexport class NgxMatDatepickerCancel {\r\n  constructor(public _datepicker: NgxMatDatepickerBase<NgxMatDatepickerControl<any>, unknown>) {}\r\n}\r\n\r\n/**\r\n * Container that can be used to project a row of action buttons\r\n * to the bottom of a datepicker or date range picker.\r\n */\r\n@Component({\r\n  selector: 'ngx-mat-datepicker-actions, ngx-mat-date-range-picker-actions',\r\n  styleUrls: ['datepicker-actions.scss'],\r\n  template: `\r\n    <ng-template>\r\n      <div class=\"mat-datepicker-actions\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </ng-template>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class NgxMatDatepickerActions implements AfterViewInit, OnDestroy {\r\n  @ViewChild(TemplateRef) _template: TemplateRef<unknown>;\r\n  private _portal: TemplatePortal;\r\n\r\n  constructor(\r\n    private _datepicker: NgxMatDatepickerBase<NgxMatDatepickerControl<any>, unknown>,\r\n    private _viewContainerRef: ViewContainerRef,\r\n  ) {}\r\n\r\n  ngAfterViewInit() {\r\n    this._portal = new TemplatePortal(this._template, this._viewContainerRef);\r\n    this._datepicker.registerActions(this._portal);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._datepicker.removeActions(this._portal);\r\n\r\n    // Needs to be null checked since we initialize it in `ngAfterViewInit`.\r\n    if (this._portal && this._portal.isAttached) {\r\n      this._portal?.detach();\r\n    }\r\n  }\r\n}\r\n","\r\n\r\nimport { Directive, ElementRef, forwardRef, Inject, Input, OnDestroy, Optional } from '@angular/core';\r\nimport { NG_VALIDATORS, NG_VALUE_ACCESSOR, ValidatorFn, Validators } from '@angular/forms';\r\nimport { MAT_DATE_FORMATS, MatDateFormats, ThemePalette } from '@angular/material/core';\r\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\r\nimport { MAT_INPUT_VALUE_ACCESSOR } from '@angular/material/input';\r\nimport { Subscription } from 'rxjs';\r\nimport { NgxMatDateAdapter } from './core/date-adapter';\r\nimport { NgxDateSelectionModelChange } from './date-selection-model';\r\nimport { NgxMatDatepickerControl, NgxMatDatepickerPanel } from './datepicker-base';\r\nimport { _NgxMatFormFieldPartial, NgxDateFilterFn, NgxMatDatepickerInputBase } from './datepicker-input-base';\r\nimport { NGX_MAT_DATE_FORMATS, NgxMatDateFormats } from './core/date-formats';\r\n\r\n/** @docs-private */\r\nexport const NGX_MAT_DATEPICKER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => NgxMatDatepickerInput),\r\n  multi: true,\r\n};\r\n\r\n/** @docs-private */\r\nexport const NGX_MAT_DATEPICKER_VALIDATORS: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => NgxMatDatepickerInput),\r\n  multi: true,\r\n};\r\n\r\n/** Directive used to connect an input to a MatDatepicker. */\r\n@Directive({\r\n  selector: 'input[ngxMatDatetimePicker]',\r\n  providers: [\r\n    NGX_MAT_DATEPICKER_VALUE_ACCESSOR,\r\n    NGX_MAT_DATEPICKER_VALIDATORS,\r\n    { provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: NgxMatDatepickerInput },\r\n  ],\r\n  host: {\r\n    'class': 'mat-datepicker-input',\r\n    '[attr.aria-haspopup]': '_datepicker ? \"dialog\" : null',\r\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\r\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\r\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\r\n    // Used by the test harness to tie this input to its calendar. We can't depend on\r\n    // `aria-owns` for this, because it's only defined while the calendar is open.\r\n    '[attr.data-mat-calendar]': '_datepicker ? _datepicker.id : null',\r\n    '[disabled]': 'disabled',\r\n    '(input)': '_onInput($event.target.value)',\r\n    '(change)': '_onChange()',\r\n    '(blur)': '_onBlur()',\r\n    '(keydown)': '_onKeydown($event)',\r\n  },\r\n  exportAs: 'ngxMatDatepickerInput',\r\n})\r\nexport class NgxMatDatepickerInput<D>\r\n  extends NgxMatDatepickerInputBase<D | null, D>\r\n  implements NgxMatDatepickerControl<D | null>, OnDestroy {\r\n  private _closedSubscription = Subscription.EMPTY;\r\n\r\n  /** The datepicker that this input is associated with. */\r\n  @Input()\r\n  set ngxMatDatetimePicker(datepicker: NgxMatDatepickerPanel<NgxMatDatepickerControl<D>, D | null, D>) {\r\n    if (datepicker) {\r\n      this._datepicker = datepicker;\r\n      this._closedSubscription = datepicker.closedStream.subscribe(() => this._onTouched());\r\n      this._registerModel(datepicker.registerInput(this));\r\n    }\r\n  }\r\n  _datepicker: NgxMatDatepickerPanel<NgxMatDatepickerControl<D>, D | null, D>;\r\n\r\n  /** The minimum valid date. */\r\n  @Input()\r\n  get min(): D | null {\r\n    return this._min;\r\n  }\r\n  set min(value: D | null) {\r\n    const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n\r\n    if (!this._dateAdapter.sameDate(validValue, this._min)) {\r\n      this._min = validValue;\r\n      this._validatorOnChange();\r\n    }\r\n  }\r\n  private _min: D | null;\r\n\r\n  /** The maximum valid date. */\r\n  @Input()\r\n  get max(): D | null {\r\n    return this._max;\r\n  }\r\n  set max(value: D | null) {\r\n    const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\r\n\r\n    if (!this._dateAdapter.sameDate(validValue, this._max)) {\r\n      this._max = validValue;\r\n      this._validatorOnChange();\r\n    }\r\n  }\r\n  private _max: D | null;\r\n\r\n  /** Function that can be used to filter out dates within the datepicker. */\r\n  @Input('matDatepickerFilter')\r\n  get dateFilter() {\r\n    return this._dateFilter;\r\n  }\r\n  set dateFilter(value: NgxDateFilterFn<D | null>) {\r\n    const wasMatchingValue = this._matchesFilter(this.value);\r\n    this._dateFilter = value;\r\n\r\n    if (this._matchesFilter(this.value) !== wasMatchingValue) {\r\n      this._validatorOnChange();\r\n    }\r\n  }\r\n  private _dateFilter: NgxDateFilterFn<D | null>;\r\n\r\n  /** The combined form control validator for this input. */\r\n  protected _validator: ValidatorFn | null;\r\n\r\n  constructor(\r\n    elementRef: ElementRef<HTMLInputElement>,\r\n    @Optional() dateAdapter: NgxMatDateAdapter<D>,\r\n    @Optional() @Inject(NGX_MAT_DATE_FORMATS) dateFormats: NgxMatDateFormats,\r\n    @Optional() @Inject(MAT_FORM_FIELD) private _formField?: _NgxMatFormFieldPartial,\r\n  ) {\r\n    super(elementRef, dateAdapter, dateFormats);\r\n    this._validator = Validators.compose(super._getValidators());\r\n  }\r\n\r\n  /**\r\n   * Gets the element that the datepicker popup should be connected to.\r\n   * @return The element to connect the popup to.\r\n   */\r\n  getConnectedOverlayOrigin(): ElementRef {\r\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\r\n  }\r\n\r\n  /** Gets the ID of an element that should be used a description for the calendar overlay. */\r\n  getOverlayLabelId(): string | null {\r\n    if (this._formField) {\r\n      return this._formField.getLabelId();\r\n    }\r\n\r\n    return this._elementRef.nativeElement.getAttribute('aria-labelledby');\r\n  }\r\n\r\n  /** Returns the palette used by the input's form field, if any. */\r\n  getThemePalette(): ThemePalette {\r\n    return this._formField ? this._formField.color : undefined;\r\n  }\r\n\r\n  /** Gets the value at which the calendar should start. */\r\n  getStartValue(): D | null {\r\n    return this.value;\r\n  }\r\n\r\n  override ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n    this._closedSubscription.unsubscribe();\r\n  }\r\n\r\n  /** Opens the associated datepicker. */\r\n  protected _openPopup(): void {\r\n    if (this._datepicker) {\r\n      this._datepicker.open();\r\n    }\r\n  }\r\n\r\n  protected _getValueFromModel(modelValue: D | null): D | null {\r\n    return modelValue;\r\n  }\r\n\r\n  protected _assignValueToModel(value: D | null): void {\r\n    if (this._model) {\r\n      this._model.updateSelection(value, this);\r\n    }\r\n  }\r\n\r\n  /** Gets the input's minimum date. */\r\n  _getMinDate() {\r\n    return this._min;\r\n  }\r\n\r\n  /** Gets the input's maximum date. */\r\n  _getMaxDate() {\r\n    return this._max;\r\n  }\r\n\r\n  /** Gets the input's date filtering function. */\r\n  protected _getDateFilter() {\r\n    return this._dateFilter;\r\n  }\r\n\r\n  protected _shouldHandleChangeEvent(event: NgxDateSelectionModelChange<D>) {\r\n    return event.source !== this;\r\n  }\r\n}\r\n","\r\n\r\nimport { BooleanInput, coerceBooleanProperty } from '@angular/cdk/coercion';\r\nimport {\r\n  AfterContentInit,\r\n  Attribute,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  Directive,\r\n  Input,\r\n  OnChanges,\r\n  OnDestroy,\r\n  SimpleChanges,\r\n  ViewChild,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { MatButton } from '@angular/material/button';\r\nimport { Observable, Subscription, merge, of as observableOf } from 'rxjs';\r\nimport { NgxMatDatepickerControl, NgxMatDatepickerPanel } from './datepicker-base';\r\nimport { NgxMatDatepickerIntl } from './datepicker-intl';\r\n\r\n/** Can be used to override the icon of a `matDatepickerToggle`. */\r\n@Directive({\r\n  selector: '[ngxMatDatepickerToggleIcon]',\r\n})\r\nexport class NgxMatDatepickerToggleIcon { }\r\n\r\n@Component({\r\n  selector: 'ngx-mat-datepicker-toggle',\r\n  templateUrl: 'datepicker-toggle.html',\r\n  styleUrls: ['datepicker-toggle.scss'],\r\n  host: {\r\n    'class': 'mat-datepicker-toggle',\r\n    '[attr.tabindex]': 'null',\r\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\r\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\r\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\r\n    // Used by the test harness to tie this toggle to its datepicker.\r\n    '[attr.data-mat-calendar]': 'datepicker ? datepicker.id : null',\r\n    // Bind the `click` on the host, rather than the inner `button`, so that we can call\r\n    // `stopPropagation` on it without affecting the user's `click` handlers. We need to stop\r\n    // it so that the input doesn't get focused automatically by the form field (See #21836).\r\n    '(click)': '_open($event)',\r\n  },\r\n  exportAs: 'ngxMatDatepickerToggle',\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class NgxMatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\r\n  private _stateChanges = Subscription.EMPTY;\r\n\r\n  /** Datepicker instance that the button will toggle. */\r\n  @Input('for') datepicker: NgxMatDatepickerPanel<NgxMatDatepickerControl<any>, D>;\r\n\r\n  /** Tabindex for the toggle. */\r\n  @Input() tabIndex: number | null;\r\n\r\n  /** Screen-reader label for the button. */\r\n  @Input('aria-label') ariaLabel: string;\r\n\r\n  /** Whether the toggle button is disabled. */\r\n  @Input()\r\n  get disabled(): boolean {\r\n    if (this._disabled === undefined && this.datepicker) {\r\n      return this.datepicker.disabled;\r\n    }\r\n\r\n    return !!this._disabled;\r\n  }\r\n  set disabled(value: BooleanInput) {\r\n    this._disabled = coerceBooleanProperty(value);\r\n  }\r\n  private _disabled: boolean;\r\n\r\n  /** Whether ripples on the toggle should be disabled. */\r\n  @Input() disableRipple: boolean;\r\n\r\n  /** Custom icon set by the consumer. */\r\n  @ContentChild(NgxMatDatepickerToggleIcon) _customIcon: NgxMatDatepickerToggleIcon;\r\n\r\n  /** Underlying button element. */\r\n  @ViewChild('button') _button: MatButton;\r\n\r\n  constructor(\r\n    public _intl: NgxMatDatepickerIntl,\r\n    private _changeDetectorRef: ChangeDetectorRef,\r\n    @Attribute('tabindex') defaultTabIndex: string,\r\n  ) {\r\n    const parsedTabIndex = Number(defaultTabIndex);\r\n    this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['datepicker']) {\r\n      this._watchStateChanges();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._stateChanges.unsubscribe();\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    this._watchStateChanges();\r\n  }\r\n\r\n  _open(event: Event): void {\r\n    if (this.datepicker && !this.disabled) {\r\n      this.datepicker.open();\r\n      event.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _watchStateChanges() {\r\n    const datepickerStateChanged = this.datepicker ? this.datepicker.stateChanges : observableOf();\r\n    const inputStateChanged =\r\n      this.datepicker && this.datepicker.datepickerInput\r\n        ? this.datepicker.datepickerInput.stateChanges\r\n        : observableOf();\r\n    const datepickerToggled = this.datepicker\r\n      ? merge(this.datepicker.openedStream, this.datepicker.closedStream)\r\n      : observableOf();\r\n\r\n    this._stateChanges.unsubscribe();\r\n    this._stateChanges = merge(\r\n      this._intl.changes,\r\n      datepickerStateChanged as Observable<void>,\r\n      inputStateChanged,\r\n      datepickerToggled,\r\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\r\n  }\r\n}\r\n","<button\r\n  #button\r\n  mat-icon-button\r\n  type=\"button\"\r\n  [attr.aria-haspopup]=\"datepicker ? 'dialog' : null\"\r\n  [attr.aria-label]=\"ariaLabel || _intl.openCalendarLabel\"\r\n  [attr.tabindex]=\"disabled ? -1 : tabIndex\"\r\n  [disabled]=\"disabled\"\r\n  [disableRipple]=\"disableRipple\">\r\n\r\n  <svg\r\n    *ngIf=\"!_customIcon\"\r\n    class=\"mat-datepicker-toggle-default-icon\"\r\n    viewBox=\"0 0 24 24\"\r\n    width=\"24px\"\r\n    height=\"24px\"\r\n    fill=\"currentColor\"\r\n    focusable=\"false\">\r\n    <path d=\"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"/>\r\n  </svg>\r\n\r\n  <ng-content select=\"[ngxMatDatepickerToggleIcon]\"></ng-content>\r\n</button>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { NgxMatTimepickerComponent } from './timepicker.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatInputModule,\r\n    ReactiveFormsModule,\r\n    FormsModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n  ],\r\n  exports: [\r\n    NgxMatTimepickerComponent\r\n  ],\r\n  declarations: [\r\n    NgxMatTimepickerComponent\r\n  ]\r\n})\r\nexport class NgxMatTimepickerModule { }\r\n","import { A11yModule } from '@angular/cdk/a11y';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCommonModule } from '@angular/material/core';\r\nimport { NgxMatCalendar, NgxMatCalendarHeader } from './calendar';\r\nimport { NgxMatCalendarBody } from './calendar-body';\r\nimport { NgxMatDateRangeInput } from './date-range-input';\r\nimport { NgxMatEndDate, NgxMatStartDate } from './date-range-input-parts';\r\nimport { NgxMatDateRangePicker } from './date-range-picker';\r\nimport { NgxMatDatetimepicker } from './datepicker';\r\nimport { NgxMatDatepickerActions, NgxMatDatepickerApply, NgxMatDatepickerCancel } from './datepicker-actions';\r\nimport {\r\n  NGX_MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\r\n  NgxMatDatepickerContent,\r\n} from './datepicker-base';\r\nimport { NgxMatDatepickerInput } from './datepicker-input';\r\nimport { NgxMatDatepickerIntl } from './datepicker-intl';\r\nimport { NgxMatDatepickerToggleIcon, NgxMatDatepickerToggle } from './datepicker-toggle';\r\nimport { NgxMatMonthView } from './month-view';\r\nimport { NgxMatMultiYearView } from './multi-year-view';\r\nimport { NgxMatYearView } from './year-view';\r\nimport { NgxMatTimepickerModule } from './timepicker.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    OverlayModule,\r\n    A11yModule,\r\n    PortalModule,\r\n    MatCommonModule,\r\n    NgxMatTimepickerModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  exports: [\r\n    CdkScrollableModule,\r\n    NgxMatCalendar,\r\n    NgxMatCalendarBody,\r\n    NgxMatDatetimepicker,\r\n    NgxMatDatepickerContent,\r\n    NgxMatDatepickerInput,\r\n    NgxMatDatepickerToggle,\r\n    NgxMatDatepickerToggleIcon,\r\n    NgxMatMonthView,\r\n    NgxMatYearView,\r\n    NgxMatMultiYearView,\r\n    NgxMatCalendarHeader,\r\n    NgxMatDateRangeInput,\r\n    NgxMatStartDate,\r\n    NgxMatEndDate,\r\n    NgxMatDateRangePicker,\r\n    NgxMatDatepickerActions,\r\n    NgxMatDatepickerCancel,\r\n    NgxMatDatepickerApply,\r\n  ],\r\n  declarations: [\r\n    NgxMatCalendar,\r\n    NgxMatCalendarBody,\r\n    NgxMatDatetimepicker,\r\n    NgxMatDatepickerContent,\r\n    NgxMatDatepickerInput,\r\n    NgxMatDatepickerToggle,\r\n    NgxMatDatepickerToggleIcon,\r\n    NgxMatMonthView,\r\n    NgxMatYearView,\r\n    NgxMatMultiYearView,\r\n    NgxMatCalendarHeader,\r\n    NgxMatDateRangeInput,\r\n    NgxMatStartDate,\r\n    NgxMatEndDate,\r\n    NgxMatDateRangePicker,\r\n    NgxMatDatepickerActions,\r\n    NgxMatDatepickerCancel,\r\n    NgxMatDatepickerApply,\r\n  ],\r\n  providers: [NgxMatDatepickerIntl, NGX_MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\r\n})\r\nexport class NgxMatDatetimePickerModule { }\r\n","/*\r\n * Public API Surface of ngx-mat-datetime-picker\r\n */\r\n\r\nexport * from './lib/calendar';\r\nexport * from './lib/calendar-body';\r\nexport * from './lib/core/date-adapter';\r\nexport * from './lib/core/date-formats';\r\nexport * from './lib/core/native-date-adapter';\r\nexport * from './lib/core/native-date-formats';\r\nexport * from './lib/core/native-date.module';\r\nexport * from './lib/date-range-selection-strategy';\r\nexport * from './lib/datepicker-module';\r\nexport * from './lib/month-view';\r\nexport * from './lib/multi-year-view';\r\nexport * from './lib/timepicker.component';\r\nexport * from './lib/timepicker.module';\r\nexport * from './lib/year-view';\r\nexport * from './lib/date-range-input';\r\nexport * from './lib/date-range-input-parts';\r\nexport * from './lib/datepicker-actions';\r\nexport * from './lib/datepicker-input';\r\nexport * from './lib/datepicker-toggle';\r\nexport * from './lib/datepicker-base';\r\nexport * from './lib/date-range-picker';\r\nexport * from './lib/datepicker-input';\r\nexport * from './lib/datepicker';","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.NgxMatDateAdapter","createMissingDateImplError","i1","i3","i4.NgxMatCalendarBody","i3.NgxMatCalendarBody","i1.NgxMatDatepickerIntl","i2.NgxMatDateAdapter","i7.NgxMatMonthView","i8.NgxMatYearView","i9.NgxMatMultiYearView","i2","i3.NgxMatDateAdapter","i4","i5","i6","i7","i3.NgxMatDatepickerIntl","i8.NgxMatTimepickerComponent","i9","i10.NgxMatCalendar","i12","i1.NgxMatDateSelectionModel","i1.NgxMatDatepickerBase","observableOf"],"mappings":"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"}